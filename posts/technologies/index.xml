<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technologies on Anver Bogatov</title><link>/posts/technologies/</link><description>Recent content in Technologies on Anver Bogatov</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 02 Dec 2021 07:14:03 +0400</lastBuildDate><atom:link href="/posts/technologies/index.xml" rel="self" type="application/rss+xml"/><item><title>GraphQL Introduction</title><link>/posts/technologies/content/graphql-intro/</link><pubDate>Thu, 02 Dec 2021 07:14:03 +0400</pubDate><guid>/posts/technologies/content/graphql-intro/</guid><description>This article contains introduction to GraphQL, and it&amp;rsquo;s concepts. If you want to start learning GraphQL, but do not know from what place to start - this article will be a perfect introduction for you.
What is GraphQL? &amp;ldquo;GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data&amp;rdquo; - says project&amp;rsquo;s website. But what these words do really mean?
They mean that GraphQL defines own DSL with which clients can access data.</description></item><item><title>üá∑üá∫ Hibernate N+1 –ü—Ä–æ–±–ª–µ–º–∞</title><link>/posts/technologies/content/hibernate-n1-problem/</link><pubDate>Wed, 10 Nov 2021 19:51:58 +0400</pubDate><guid>/posts/technologies/content/hibernate-n1-problem/</guid><description>–ü—Ä–∏–º–µ—Ä N+1 –ø—Ä–æ–±–ª–µ–º—ã –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–æ–∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä —Å –ö–Ω–∏–≥–æ–π (book) –∏ –ê–≤—Ç–æ—Ä–æ–º (author). –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –≤ –º–æ–¥–µ–ª–∏ –µ—Å—Ç—å —Å—É—â–Ω–æ—Å—Ç—å Book. –£ –∫–∞–∂–¥–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ Book –µ—Å—Ç—å —Å–≤–æ–π Author.
–í Java, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Hibernate —ç—Ç–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Å–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
@Data @Entity @Table(name = &amp;#34;book&amp;#34;) public class Book { @Id @GeneratedValue(strategy = GenerationType.SEQUENCE) private int id; private String title; @OneToOne(fetch = FetchType.LAZY) private Author author; } ---------------------------------------------------------- @Data @Entity @Table(name = &amp;#34;author&amp;#34;) public class Author { @Id @GeneratedValue(strategy = GenerationType.</description></item></channel></rss>