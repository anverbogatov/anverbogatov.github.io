<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ddd on Anver Bogatov</title><link>/tags/ddd/</link><description>Recent content in ddd on Anver Bogatov</description><generator>Hugo -- gohugo.io</generator><language>ru-RU</language><lastBuildDate>Thu, 04 Nov 2021 09:25:57 +0400</lastBuildDate><atom:link href="/tags/ddd/index.xml" rel="self" type="application/rss+xml"/><item><title>DDD 101: Заметки о Domain Driven Design #1</title><link>/posts/ddd-intro/</link><pubDate>Thu, 04 Nov 2021 09:25:57 +0400</pubDate><guid>/posts/ddd-intro/</guid><description>Мысли вслух Domain Driven Design (DDD) или ПРЕДМЕТНО-ОРИЕНТИРОВАННОЕ ПРОЕКТИРОВАНИЕ - это.. если совсем коротко - это сложная тема. Нужно прочитать десяток, а то и пол-сотни статей, просмотреть множество выступлений на эту тему с конференций, познакомиться с некоторыми способами моделирования бизнес процессов, открыть для себя «синюю» и «красную» книги - и всё это, для того, чтобы просто разобраться с DDD. Обратите внимание, я не сказал - начать использовать. Просто - детально разобраться.</description><content>&lt;h3 id="мысли-вслух">Мысли вслух&lt;/h3>
&lt;p>Domain Driven Design (DDD) или &lt;strong>ПРЕДМЕТНО-ОРИЕНТИРОВАННОЕ ПРОЕКТИРОВАНИЕ&lt;/strong> - это.. если совсем коротко - это сложная тема. Нужно прочитать десяток, а то и пол-сотни статей, просмотреть множество выступлений на эту тему с конференций, познакомиться с некоторыми способами моделирования бизнес процессов, открыть для себя «синюю» и «красную» книги - и всё это, для того, чтобы просто разобраться с DDD. Обратите внимание, я не сказал - начать использовать. Просто - детально разобраться.&lt;/p>
&lt;p>Выше, я описал свой путь к пониманию DDD. Это заняло много времени. В конце концов, я осознал суть &lt;strong>ПРЕДМЕТНО-ОРИЕНТИРОВАННОГО ПРОЕКТИРОВАНИЯ&lt;/strong>, прочувствовал на себе как именно этот подход меняет мышление, и какую именно пользу он в себе несёт (как для бизнеса, так и для самого разработчика). Самое главное открытие, которое я сделал, разобравшись в теме - это… &lt;em>DDD - это простая тема, объясняемая «сложным» языком и не «в том» порядке&lt;/em>.&lt;/p>
&lt;p>Цикл статей о &lt;strong>ПРЕДМЕТНО-ОРИЕНТИРОВАННОМ ПРОЕКТИРОВАНИИ&lt;/strong> под названием «DDD 101» - это подача материала по теме, в том виде, в котором я хотел бы его получить, когда сам начинал разбираться с DDD.&lt;/p>
&lt;p>Твоя поддержка мотивирует меня писать больше. Пожалуйста, обрати внимание на &lt;a href="/support">новый раздел&lt;/a>.&lt;/p>
&lt;h3 id="как-будем-работать">Как будем работать?&lt;/h3>
&lt;p>Разбирать концепции DDD в вакууме, пользуясь только техническим описанием и собственной фантазией - является первой ошибкой в деле освоения DDD. Я множество раз перечитывал описания разных идей из DDD, быть может даже понимал, но всегда вопрос «А как это выглядит в коде?» витал в воздухе.&lt;/p>
&lt;p>В этом цикле статей, эту проблему мы решим за счёт следующего подхода:
Я подготовил живое Java приложение, написанное с применением &lt;strong>ОБЪЕКТНО-ОРИЕНТИРОВАННОГО ПРОГРАММИРОВАНИЯ&lt;/strong> (ООП). Именно в него мы будем вживлять идеи DDD. Это позволит тебе увидеть разницу между подходами, а так же получить прямую связь концепций DDD с кодом.&lt;/p>
&lt;p>Вообщем-то, это и будет нашим порядком работы над изучением DDD - разбираемся с очередной концепцией DDD и смотрим на то, как именно мы можем применить её в жизни.&lt;/p>
&lt;h3 id="описание-системы">Описание системы&lt;/h3>
&lt;p>Итак, в любой компании, перед началом работы разработчика проходит этап онбординга. Это когда новоиспечённому сотруднику дают вводную о компании, о бизнесе, о приложениях, с которыми он будет работать.&lt;/p>
&lt;p>Я предлагаю пойти по схожему пути и обрести контекст того, с чем мы будем работать прямо сейчас.&lt;/p>
&lt;p>Представим, что мы занимаемся разработкой программного обеспечения для сети фитнес-клубов. На дворе бушует коронавирус, и поэтому - местные власти ввели ограничение на количество людей, находящихся в одном помещении. Наш заказчик хотел бы, чтобы его клиенты регистрировали своё участие в занятиях йога-класса, чтобы заказчик, мог соблюдать местные ограничения, и при этом, не было неловких ситуаций, когда количество участников конкретного занятия выясняется прямо на занятии.&lt;/p>
&lt;p>Так же, заказчик, крайне озабочен заполняемостью йога-классов, с точки зрения эффективности маркетинга, и для этого, ему нужно иметь возможность увидеть как много людей посещало занятия, которые уже прошли.&lt;/p>
&lt;p>Итого, в рамках этого цикла статей, мы будем работать исключительно с этими вводными, не беря во внимание остальные элементы, наподобие - регистрация членства в фитнес клубе, продление подписки на услуги и т.д. Мы берём ограниченное количество требований в работу, для того, чтобы не усложнять наш пример, ибо, даже на таких простых требованиях DDD покажет положительный эффект.&lt;/p>
&lt;p>Код приложения написанный в виде ООП доступен для просмотра здесь:
&lt;a href="https://github.com/anverbogatov/ddd-yoga-sessions">ddd-yoga-sessions&lt;/a> (на момент публикации этой статьи - приложение ещё в разработке).&lt;/p>
&lt;p>Все последующие изменения в коде будут сделаны с целью продемонстрировать ту или иную концепцию DDD. Для твоего удобства, каждый из них будет реализован в отдельном бранче. Поэтому - используй историю коммитов, для того, чтобы увидеть цельные изменения в коде.&lt;/p>
&lt;h3 id="использованные-термины">Использованные термины&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>ПРЕДМЕТНО-ОРИЕНТИРОВАННОЕ ПРОЕКТИРОВАНИЕ&lt;/strong> - в оригинале - Domain Driven Design. Подход проектирования программного обеспечения, в котором во главу угла ставится область бизнеса, для которой и проектируется ПО.&lt;/li>
&lt;li>&lt;strong>ОБЪЕКТНО-ОРИЕНТИРОВАННОГО ПРОГРАММИРОВАНИЯ&lt;/strong> - старый, давно всем известный подход проектирования программного обеспечения; так же, известен как ООП. Подход базируется на идее выстраивания программы, как набора объектов, структура которых выстраивается по определённым правилам.&lt;/li>
&lt;/ul></content></item></channel></rss>