<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>modeling on Anver Bogatov</title><link>/tags/modeling/</link><description>Recent content in modeling on Anver Bogatov</description><generator>Hugo -- gohugo.io</generator><language>ru-RU</language><lastBuildDate>Thu, 04 Nov 2021 09:25:57 +0400</lastBuildDate><atom:link href="/tags/modeling/index.xml" rel="self" type="application/rss+xml"/><item><title>DDD 101: Заметки о Domain Driven Design #1</title><link>/posts/ddd-intro/</link><pubDate>Thu, 04 Nov 2021 09:25:57 +0400</pubDate><guid>/posts/ddd-intro/</guid><description>Мысли вслух Domain Driven Design (DDD) или ПРЕДМЕТНО-ОРИЕНТИРОВАННОЕ ПРОЕКТИРОВАНИЕ - это.. если совсем коротко - это сложная тема. Нужно прочитать десяток, а то и пол-сотни статей, просмотреть множество выступлений на эту тему с конференций, познакомиться с некоторыми способами моделирования бизнес процессов, открыть для себя «синюю» и «красную» книги - и всё это, для того, чтобы просто разобраться с DDD. Обратите внимание, я не сказал - начать использовать. Просто - детально разобраться.</description><content>&lt;h3 id="мысли-вслух">Мысли вслух&lt;/h3>
&lt;p>Domain Driven Design (DDD) или &lt;strong>ПРЕДМЕТНО-ОРИЕНТИРОВАННОЕ ПРОЕКТИРОВАНИЕ&lt;/strong> - это.. если совсем коротко - это сложная тема. Нужно прочитать десяток, а то и пол-сотни статей, просмотреть множество выступлений на эту тему с конференций, познакомиться с некоторыми способами моделирования бизнес процессов, открыть для себя «синюю» и «красную» книги - и всё это, для того, чтобы просто разобраться с DDD. Обратите внимание, я не сказал - начать использовать. Просто - детально разобраться.&lt;/p>
&lt;p>Выше, я описал свой путь к пониманию DDD. Это заняло много времени. В конце концов, я осознал суть &lt;strong>ПРЕДМЕТНО-ОРИЕНТИРОВАННОГО ПРОЕКТИРОВАНИЯ&lt;/strong>, прочувствовал на себе как именно этот подход меняет мышление, и какую именно пользу он в себе несёт (как для бизнеса, так и для самого разработчика). Самое главное открытие, которое я сделал, разобравшись в теме - это… &lt;em>DDD - это простая тема, объясняемая «сложным» языком и не «в том» порядке&lt;/em>.&lt;/p>
&lt;p>Цикл статей о &lt;strong>ПРЕДМЕТНО-ОРИЕНТИРОВАННОМ ПРОЕКТИРОВАНИИ&lt;/strong> под названием «DDD 101» - это подача материала по теме, в том виде, в котором я хотел бы его получить, когда сам начинал разбираться с DDD.&lt;/p>
&lt;p>Твоя поддержка мотивирует меня писать больше. Пожалуйста, обрати внимание на &lt;a href="/support">новый раздел&lt;/a>.&lt;/p>
&lt;h3 id="как-будем-работать">Как будем работать?&lt;/h3>
&lt;p>Разбирать концепции DDD в вакууме, пользуясь только техническим описанием и собственной фантазией - является первой ошибкой в деле освоения DDD. Я множество раз перечитывал описания разных идей из DDD, быть может даже понимал, но всегда вопрос «А как это выглядит в коде?» витал в воздухе.&lt;/p>
&lt;p>В этом цикле статей, эту проблему мы решим за счёт следующего подхода:
Я подготовил живое Java приложение, написанное с применением &lt;strong>ОБЪЕКТНО-ОРИЕНТИРОВАННОГО ПРОГРАММИРОВАНИЯ&lt;/strong> (ООП). Именно в него мы будем вживлять идеи DDD. Это позволит тебе увидеть разницу между подходами, а так же получить прямую связь концепций DDD с кодом.&lt;/p>
&lt;p>Вообщем-то, это и будет нашим порядком работы над изучением DDD - разбираемся с очередной концепцией DDD и смотрим на то, как именно мы можем применить её в жизни.&lt;/p>
&lt;h3 id="описание-системы">Описание системы&lt;/h3>
&lt;p>Итак, в любой компании, перед началом работы разработчика проходит этап онбординга. Это когда новоиспечённому сотруднику дают вводную о компании, о бизнесе, о приложениях, с которыми он будет работать.&lt;/p>
&lt;p>Я предлагаю пойти по схожему пути и обрести контекст того, с чем мы будем работать прямо сейчас.&lt;/p>
&lt;p>Представим, что мы занимаемся разработкой программного обеспечения для сети фитнес-клубов. На дворе бушует коронавирус, и поэтому - местные власти ввели ограничение на количество людей, находящихся в одном помещении. Наш заказчик хотел бы, чтобы его клиенты регистрировали своё участие в занятиях йога-класса, чтобы заказчик, мог соблюдать местные ограничения, и при этом, не было неловких ситуаций, когда количество участников конкретного занятия выясняется прямо на занятии.&lt;/p>
&lt;p>Так же, заказчик, крайне озабочен заполняемостью йога-классов, с точки зрения эффективности маркетинга, и для этого, ему нужно иметь возможность увидеть как много людей посещало занятия, которые уже прошли.&lt;/p>
&lt;p>Итого, в рамках этого цикла статей, мы будем работать исключительно с этими вводными, не беря во внимание остальные элементы, наподобие - регистрация членства в фитнес клубе, продление подписки на услуги и т.д. Мы берём ограниченное количество требований в работу, для того, чтобы не усложнять наш пример, ибо, даже на таких простых требованиях DDD покажет положительный эффект.&lt;/p>
&lt;p>Код приложения написанный в виде ООП доступен для просмотра здесь:
&lt;a href="https://github.com/anverbogatov/ddd-yoga-sessions">ddd-yoga-sessions&lt;/a> (на момент публикации этой статьи - приложение ещё в разработке).&lt;/p>
&lt;p>Все последующие изменения в коде будут сделаны с целью продемонстрировать ту или иную концепцию DDD. Для твоего удобства, каждый из них будет реализован в отдельном бранче. Поэтому - используй историю коммитов, для того, чтобы увидеть цельные изменения в коде.&lt;/p>
&lt;h3 id="использованные-термины">Использованные термины&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>ПРЕДМЕТНО-ОРИЕНТИРОВАННОЕ ПРОЕКТИРОВАНИЕ&lt;/strong> - в оригинале - Domain Driven Design. Подход проектирования программного обеспечения, в котором во главу угла ставится область бизнеса, для которой и проектируется ПО.&lt;/li>
&lt;li>&lt;strong>ОБЪЕКТНО-ОРИЕНТИРОВАННОГО ПРОГРАММИРОВАНИЯ&lt;/strong> - старый, давно всем известный подход проектирования программного обеспечения; так же, известен как ООП. Подход базируется на идее выстраивания программы, как набора объектов, структура которых выстраивается по определённым правилам.&lt;/li>
&lt;/ul></content></item><item><title>Метод идентификации рисков Risk Storming</title><link>/posts/risk-storming/</link><pubDate>Sat, 30 Oct 2021 11:14:22 +0400</pubDate><guid>/posts/risk-storming/</guid><description>Что такое Risk Storming? Это метод, позволяющий легко и быстро, коллективно и визуально идентифицировать риски в системе. Метод подразумевает участие нескольких людей. Для более широкого взгляда на рассматриваемую систему, полный состав участников может включать в себя людей из разных направлений и с разными навыками.
Метод Сам метод состоит из нескольких последовательно выполняемых шагов. Разберём каждый их них.
Шаг 1: Нарисовать диаграммы архитектуры Поскольку метод подразумевает поиск рисков в готовой или строящейся системе, нам необходимо эту самую систему каким-то образом видеть.</description><content>&lt;h3 id="что-такое-risk-storming">Что такое Risk Storming?&lt;/h3>
&lt;p>Это метод, позволяющий легко и быстро, коллективно и визуально идентифицировать риски в системе. Метод подразумевает участие нескольких людей. Для более широкого взгляда на рассматриваемую систему, полный состав участников может включать в себя людей из разных направлений и с разными навыками.&lt;/p>
&lt;h3 id="метод">Метод&lt;/h3>
&lt;p>Сам метод состоит из нескольких последовательно выполняемых шагов. Разберём каждый их них.&lt;/p>
&lt;h4 id="шаг-1-нарисовать-диаграммы-архитектуры">Шаг 1: Нарисовать диаграммы архитектуры&lt;/h4>
&lt;p>Поскольку метод подразумевает поиск рисков в готовой или строящейся системе, нам необходимо эту самую систему каким-то образом видеть.&lt;/p>
&lt;p>&lt;img src="/images/risk-storming/1.png" alt="risk-storming-map">
&lt;em>Рисунок 1. Пример risk storming сессии&lt;/em>&lt;/p>
&lt;p>Диаграммы архитектуры в этом плане - прекрасное подспорье. Они проиллюстрируют основные компоненты системы и их взаимосвязи.&lt;/p>
&lt;h4 id="шаг-2-индивидуальный-поиск-рисков">Шаг 2. Индивидуальный поиск рисков&lt;/h4>
&lt;p>На данном шаге, каждый из участников выписывает абсолютно любые риски и проблемы, пришедшие ему в голову, на стикеры.&lt;/p>
&lt;p>Этот шаг проводится в абсолютной тишине и должен быть ограничен по времени. Например, 5-10 минут может быть вполне достаточно.&lt;/p>
&lt;p>Примерами рисков могут быть абсолютно любые предположения о неработоспособности чего-либо. Например:&lt;/p>
&lt;ul>
&lt;li>Формат данных в сторонней системе изменился&lt;/li>
&lt;li>Внешние сервисы недоступны&lt;/li>
&lt;li>Неконсистентость данных&lt;/li>
&lt;/ul>
&lt;h4 id="шаг-3-делимся-предположениями">Шаг 3. Делимся предположениями&lt;/h4>
&lt;p>На данном шаге, все участники сессии размещают свои стикеры на диаграммах архитектуры, на основе которых производился поиск рисков.&lt;/p>
&lt;p>Стикеры размещаются близкой к той части диаграммы, к которой относится описанные риски.&lt;/p>
&lt;p>Если несколько участников сессии описали схожие риски, стикеры этих рисков располагаются вместе.&lt;/p>
&lt;p>&lt;img src="/images/risk-storming/2.png" alt="risk-storming-map2">
&lt;em>Рисунок 2. Риски и архитектура&lt;/em>&lt;/p>
&lt;h4 id="шаг-4-приоритизация">Шаг 4. Приоритизация&lt;/h4>
&lt;p>И на заключительном шаге, каждый из найденных рисков, рассматривается и обсуждается коллективно.&lt;/p>
&lt;p>Задача этого шага определить насколько высокий приоритет имеет найденная потенциальная проблема.&lt;/p>
&lt;p>Вариантов оценить приоритет несколько. Я опишу их два:&lt;/p>
&lt;ul>
&lt;li>Planning Poker (&lt;a href="https://www.planningpoker.com">PlanningPoker.com - Estimates Made Easy. Sprints Made Simple.&lt;/a>) - это когда участники оценивают риски, используя карты с цифрами и коллективно обсуждая. В конце концов, переговоры должны придти к общему пониманию.&lt;/li>
&lt;li>Используя специальную матрицу, на которой на одной оси располагается Вероятность возникновения проблемы, а на другой - её Влияние.
&lt;img src="/images/risk-storming/3.png" alt="risk-storming-map3">
&lt;em>Рисунок 3. Матрица оценки риска&lt;/em>&lt;/li>
&lt;/ul>
&lt;h3 id="пример">Пример&lt;/h3>
&lt;p>Для того, чтобы посмотреть на метод в действии, нам понадобится архитектурная схема системы. Поскольку подход абсолютно универсальный - я взял произвольную схему из Интернета:
&lt;img src="/images/risk-storming/4.png" alt="risk-storming-map4">
&lt;em>Рисунок 4. Схема работы сервиса&lt;/em>&lt;/p>
&lt;p>Теперь, когда у нас есть схема архитектуры мы можем приступать.&lt;/p>
&lt;p>Следующим шагом будет попытка каждого участника идентифицировать риски, возможные в абсолютно любой части системы. Риски описываются на стикерах и затем, стикеры, располагаются на той части схемы, к которой риск, описанный на нём, относится.&lt;/p>
&lt;p>У меня получилось следующее:
&lt;img src="/images/risk-storming/5.png" alt="risk-storming-map5">
&lt;em>Рисунок 5. Отмеченные риски&lt;/em>&lt;/p>
&lt;p>Напомню, что цель данного метода не вычислить каждый возможный потенциальный риск. Естественно, должны быть пределы разумного. «Нападение акул на сотрудников дата центра» - хорошая идея, но это гарантированно не произойдёт (если только дата центр не располагается на дне океана).&lt;/p>
&lt;p>Следующим шагом будет коллективная оценка каждого найденного риска, с помощью принятого в команде метода оценки. Для примера я воспользуюсь методом с матрицей. Давайте попробуем оценить приоритет риска с загрузкой в наш сервис гигантского файла (нужно прояснить, под гигантским файлом я имею ввиду любой контент, размер которого выходит за пределы разумного и принятого для данной системы).&lt;/p>
&lt;p>Загрузка гигантского файла может заставить нашу систему расходовать большое количество ресурсов на его обработку и хранение. Более того, предположим что наш Image Storage, это S3 сервис от AWS, а это значит что хранение гигантских объёмов данных будет стоить нам больших денег. Поэтому я полагаю, что Вероятность, что кто-то попробует это провернуть не нулевая, так что Medium, а Влияние на работоспособность системы и её обслуживание велико, то есть High. Оценив риск таким образом, я поместил его в соответствующую строку и колонку.
&lt;img src="/images/risk-storming/6.png" alt="risk-storming-map6">
&lt;em>Рисунок 6. Оценка одного из рисков&lt;/em>&lt;/p>
&lt;p>Аналогично, нужно поступить и с каждым из оставшихся рисков. В итоге, мы получим примерно следующую картину:
&lt;img src="/images/risk-storming/7.png" alt="risk-storming-map7">
&lt;em>Рисунок 7. Итоговая оценка рисков&lt;/em>&lt;/p>
&lt;p>Итак, мы получили оценки для каждого из рисков. С матрицей уже сейчас можно сделать выводы о том, какие из рисков нужно постараться обработать быстрее остальных. Например, неограниченное количество запросов к сервису может привести к полному отказу работоспособности сервиса из-за DDOS атаки.&lt;/p>
&lt;p>Список рисков с их оценкой в дальнейшем послужит отличной вводной информацией для формирования технического бэклога команды, обслуживающей сервис.&lt;/p>
&lt;h3 id="дополнительные-материалы">Дополнительные материалы&lt;/h3>
&lt;ul>
&lt;li>[1] &lt;a href="https://riskstorming.com">Risk-storming&lt;/a> - веб-сайт методологии&lt;/li>
&lt;li>[2] &lt;a href="https://leanpub.com/software-architecture-for-developers">https://leanpub.com/software-architecture-for-developers&lt;/a> - книга автора методологии. В самой книге, методологии посвящена небольшая глава.&lt;/li>
&lt;/ul></content></item></channel></rss>