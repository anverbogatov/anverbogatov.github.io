<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

   <title>Anver Bogatov</title>
   <subtitle>Бесконечность - не предел.</subtitle>
   <link href="http://localhost:4000/feed.xml" rel="self"/>
   <link href="http://localhost:4000/"/>
   <updated>2017-07-09T13:16:38+00:00</updated>
   <id>http://localhost:4000/</id>
   <author>
      <name>Anver Bogatov</name>
   </author>
   <icon>/img/logo.png</icon>
   <category term="programming"/>
   <category term="ios"/>
   <category term="swift"/>
   <category term="objective-c"/>
   <category term="software"/>
   <category term="mobile"/>

   
   <entry>
      <title>Protocol composition in Swift and Objective-C</title>
      <subtitle>Designing optional semantics without optional methods</subtitle>
      <link href="http://localhost:4000/blog/protocol-composition-in-swift-and-objc/" />
      <id>http://localhost:4000/blog/protocol-composition-in-swift-and-objc</id>

      <published>2017-06-05T00:00:00+00:00</published>
      
      <updated>2017-06-05T00:00:00+00:00</updated>
      

      <summary><p><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Protocol.html">Protocols</a> in Swift and Objective-C are a powerful tool to decouple your code. They allow you to specify a contract between classes that consume them, but defer a concrete implementation to conformers. They allow you to <a href="https://en.wikipedia.org/wiki/Interface_segregation_principle">segregate interfaces</a> and <a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle">invert control</a>. One interesting aspect of protocols in Swift and Objective-C is that protocol members can be <em>optional</em> (<code class="highlighter-rouge">optional</code> in Swift or <code class="highlighter-rouge">@optional</code> in Objective-C). Unfortunately, this comes with a number of disadvantages and diminishes the robustness of your code, so it is often avoided. However, having optional members is sometimes the right conceptual model for your design. How can you design your protocols to provide optional semantics without specifying them as <code class="highlighter-rouge">optional</code> or <code class="highlighter-rouge">@optional</code>?</p>

</summary>
      <content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Protocol.html&quot;&gt;Protocols&lt;/a&gt; in Swift and Objective-C are a powerful tool to decouple your code. They allow you to specify a contract between classes that consume them, but defer a concrete implementation to conformers. They allow you to &lt;a href=&quot;https://en.wikipedia.org/wiki/Interface_segregation_principle&quot;&gt;segregate interfaces&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_inversion_principle&quot;&gt;invert control&lt;/a&gt;. One interesting aspect of protocols in Swift and Objective-C is that protocol members can be &lt;em&gt;optional&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;optional&lt;/code&gt; in Swift or &lt;code class=&quot;highlighter-rouge&quot;&gt;@optional&lt;/code&gt; in Objective-C). Unfortunately, this comes with a number of disadvantages and diminishes the robustness of your code, so it is often avoided. However, having optional members is sometimes the right conceptual model for your design. How can you design your protocols to provide optional semantics without specifying them as &lt;code class=&quot;highlighter-rouge&quot;&gt;optional&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;@optional&lt;/code&gt;?&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;the-problem-with-optional&quot;&gt;The problem with &lt;code class=&quot;highlighter-rouge&quot;&gt;@optional&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Let’s begin with Objective-C. Optional protocol methods were introduced in Objective-C 2.0 and are used heavily in Cocoa and Cocoa Touch. You implement protocols with optional methods all the time while working with UIKit, for example. But despite their prevalence, they are widely discouraged and considered a poor design. This is because you forgo compile-time checks for &lt;code class=&quot;highlighter-rouge&quot;&gt;@optional&lt;/code&gt; protocol methods in Objective-C. If a method is optional, then the compiler has no way to enforce that the conformers implement it. On the other hand, it is an error if you declare protocol conformance but fail to implement the required methods. Thus, it is the &lt;em&gt;caller’s responsibility&lt;/em&gt; to check &lt;a href=&quot;https://developer.apple.com/reference/objectivec/1418956-nsobject/1418583-respondstoselector&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-respondsToSelector:&lt;/code&gt;&lt;/a&gt; before calling an optional method. If you forget this check and the class does not implement the optional method, you’ll crash at runtime with a ‘does not respond to selector’ exception.&lt;/p&gt;

&lt;p&gt;Consider the following example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyViewControllerDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didDismissController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@optional&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didSelectItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UIViewController&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyViewControllerDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Calling required methods on the &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; is straightforward:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didDismissController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With optional methods, not only do you forgo help from the compiler, but you incur the additional runtime cost of checking &lt;code class=&quot;highlighter-rouge&quot;&gt;-respondsToSelector:&lt;/code&gt; every time you need to message the &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; object.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;respondsToSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didSelectItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didSelectItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;the-problem-with-optional-1&quot;&gt;The problem with &lt;code class=&quot;highlighter-rouge&quot;&gt;optional&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Swift addresses the safety problems above and offers a convenient &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; syntax for optional members:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;didSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, you do not have to worry about runtime crashes in Swift, but there is another problem. In Swift, &lt;code class=&quot;highlighter-rouge&quot;&gt;optional&lt;/code&gt; is &lt;em&gt;not really&lt;/em&gt; “part of the language” or “pure Swift” — the feature relies on the Objective-C runtime and &lt;strong&gt;it only exists for interoperability with Objective-C&lt;/strong&gt;. Any protocol in Swift that contains optional members must be marked as &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt;. I have &lt;a href=&quot;/avoiding-objc-in-swift/&quot;&gt;written before&lt;/a&gt; about avoiding &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; in your Swift code as much as possible. When &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; infiltrates your object graph, nearly everything must inherit from &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; which means you cannot use Swift structs, enums, or other nice features. This leaves you not writing Swift, but merely “Objective-C with a new syntax”. Clearly, &lt;code class=&quot;highlighter-rouge&quot;&gt;optional&lt;/code&gt; isn’t much of an option in Swift.&lt;/p&gt;

&lt;h3 id=&quot;the-never-optional-solution&quot;&gt;The ‘never optional’ solution&lt;/h3&gt;

&lt;p&gt;One naive solution is to simply never use &lt;code class=&quot;highlighter-rouge&quot;&gt;optional&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;@optional&lt;/code&gt;. This is easy and straightforward. It’s great for simple cases. You provide a strict contract and avoid the shortcomings mentioned above, but in many cases this places an unnecessary burden on classes that conform to the protocol. You end up with a slew of empty methods, or methods that return sentinel values like &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. Consider the familiar &lt;a href=&quot;https://developer.apple.com/reference/uikit/uitableviewdatasource&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt;&lt;/a&gt; protocol. It has two required methods and &lt;strong&gt;nine&lt;/strong&gt; optional methods. Imagine if these were all &lt;code class=&quot;highlighter-rouge&quot;&gt;@required&lt;/code&gt; but you wanted to opt-out of those behaviors. You would have nine empty method stubs, or you would have to return &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; for methods like &lt;a href=&quot;https://developer.apple.com/reference/uikit/uitableviewdatasource/1614850-tableview&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_: titleForHeaderInSection:) -&amp;gt; String?&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;using-multiple-protocols-and-properties&quot;&gt;Using multiple protocols and properties&lt;/h3&gt;

&lt;p&gt;A better approach is to split up large protocols into smaller ones, and provide a unique property (like a delegate) for each one. Again, consider &lt;a href=&quot;https://developer.apple.com/reference/uikit/uitableviewdatasource&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt;&lt;/a&gt;. There are clear semantic groupings for these methods. It could easily be broken up into multiple protocols and &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; could have a property for each one. Ash Furrow &lt;a href=&quot;https://ashfurrow.com/blog/protocols-and-swift/&quot;&gt;has a great article&lt;/a&gt; on doing exactly that. Thus, we could reimagine these APIs in the following way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titlesDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewTitlesDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reorderingDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewReorderingDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// And so on...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfSections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAtIndexPath&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewCell&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewTitlesDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleForHeaderInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleForFooterInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewReorderingDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canMoveRowAtIndexPath&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveRowAtIndexPath&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sourceIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toIndexPath&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;destinationIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// And so on...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This design transfers the “optional-ness” from the protocol itself to an additional optional property on the class. If you want headers and footers in your table view, you can opt-in to those by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;titlesDataSource&lt;/code&gt;. To opt-out, you can set this property to &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. The same applies to &lt;code class=&quot;highlighter-rouge&quot;&gt;reorderingDataSource&lt;/code&gt;, and so on. This design feels appropriate for &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; at first. Many of the methods are not directly related to one another and there are clear semantic groupings. In practice, however, it feels awkward having to access multiple separate properties to query the same underlying data source.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// access sections via `dataSource`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numberOfRowsInSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// access titles via `titlesDataSource`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headerTitle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titlesDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titleForHeaderInSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// access reordering via `reorderingDataSource`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;canMove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reorderingDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;canMoveRowAtIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Having these disjoint protocols and properties is not desirable. Despite having nice semantic groupings, all of these methods &lt;em&gt;are related&lt;/em&gt; in the sense that they all need access to &lt;em&gt;the same underlying data&lt;/em&gt; in order to work properly together. To accommodate the complete &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt; protocol, there would be five distinct protocols, each with a corresponding property on &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;. Then you could reorganize the &lt;a href=&quot;https://developer.apple.com/reference/uikit/uitableviewdelegate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDelegate&lt;/code&gt;&lt;/a&gt; protocol in the same way, which would have at least 10 protocols and properties. Having this many &lt;code class=&quot;highlighter-rouge&quot;&gt;dataSource&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; properties is unintuitive and cumbersome. How can we improve this?&lt;/p&gt;

&lt;h3 id=&quot;composing-protocols&quot;&gt;Composing protocols&lt;/h3&gt;

&lt;p&gt;Instead of numerous disjoint protocols, you can design a union of protocols. This provides a single, top-level “entry point” to reference. You can extract the optional members of a protocol into a new protocol, then add an optional property for this new protocol on the original protocol. The result is a comprehensive top-level protocol and a set of “nested” protocols.&lt;/p&gt;

&lt;p&gt;Adjusting the table view example above:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfSections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAtIndexPath&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewCell&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewTitlesDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reordering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewReorderingDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// And so on...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the table view has a single &lt;code class=&quot;highlighter-rouge&quot;&gt;dataSource&lt;/code&gt; property. The other protocols still exist, but they are absorbed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;titles&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;reordering&lt;/code&gt; properties. Another positive aspect of this design is that the opt-in/opt-out behavior for the nested protocols is explicitly declared. The conformer to &lt;code class=&quot;highlighter-rouge&quot;&gt;TableViewDataSource&lt;/code&gt; can return &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; to opt-out or return &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; to opt-in to these additional methods.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewTitlesDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfSections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// return sections&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// return rows per section&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAtIndexPath&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// configure and return a cell&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewTitlesDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// opt-in to headers and footers&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleForHeaderInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// return header title&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titleForFooterInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// return footer title&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reordering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewReorderingDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// opt-out of reordering&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Accessing these nested members goes through a single point of access:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numberOfRowsInSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headerTitle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titleForHeaderInSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;canMove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reordering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;canMoveRowAtIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This reduces the API surface area of &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; by only having a single &lt;code class=&quot;highlighter-rouge&quot;&gt;dataSource&lt;/code&gt; property instead of five — not to mention the 10 potential &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; properties there could have been after splitting up &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDelegate&lt;/code&gt;. It unifies all of the methods of the data source protocol without resorting to using &lt;code class=&quot;highlighter-rouge&quot;&gt;optional&lt;/code&gt;, while allowing you to opt out of the additional behavior in a concise way. In the case of Objective-C, the check for &lt;code class=&quot;highlighter-rouge&quot;&gt;-respondsToSelector:&lt;/code&gt; becomes a simple check for &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; instead, and the compiler can enforce that the entire protocol is implemented. Overall, it feels cleaner and much more cohesive, especially at the call site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;  &lt;a href=&quot;https://twitter.com/IanKay/status/871773445373149184&quot;&gt;@IanKay&lt;/a&gt; pointed out that you &lt;a href=&quot;https://gist.github.com/IanKeen/68eba888221a1a8de03dbbdd8a4dfcf1&quot;&gt;can further reduce boilerplate&lt;/a&gt; from the child protocols by using protocol extensions. For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewTitlesDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reordering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TableViewReorderingDataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;See &lt;a href=&quot;https://gist.github.com/IanKeen/68eba888221a1a8de03dbbdd8a4dfcf1&quot;&gt;the full gist&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;As we’ve explored, there are a number of ways to design a solution to the “optional protocol problem”. You can design a model that avoids optionality altogether, you can provide many protocols with corresponding properties, or you can design a “nested composition” of protocols. Every situation is different, but I often find this nested composition approach to be the most elegant, powerful, and intuitive.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Writing better singletons in Swift</title>
      <subtitle>Avoiding common pitfalls</subtitle>
      <link href="http://localhost:4000/blog/writing-better-singletons-in-swift/" />
      <id>http://localhost:4000/blog/writing-better-singletons-in-swift</id>

      <published>2017-06-04T00:00:00+00:00</published>
      
      <updated>2017-06-04T00:00:00+00:00</updated>
      

      <summary><p>In a <a href="/blog/refactoring-singletons-in-swift/">previous post</a> I discussed strategies for using singletons in a cleaner, more modular way. <a href="https://en.wikipedia.org/wiki/Singleton_pattern">Singletons</a> are a fact of software development, especially in iOS. <em>Sometimes</em> the design pattern actually <em>is</em> the right tool for the job. In those situations, how we can improve the way we write our own singleton classes?</p>

</summary>
      <content type="html">&lt;p&gt;In a &lt;a href=&quot;/blog/refactoring-singletons-in-swift/&quot;&gt;previous post&lt;/a&gt; I discussed strategies for using singletons in a cleaner, more modular way. &lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;Singletons&lt;/a&gt; are a fact of software development, especially in iOS. &lt;em&gt;Sometimes&lt;/em&gt; the design pattern actually &lt;em&gt;is&lt;/em&gt; the right tool for the job. In those situations, how we can improve the way we write our own singleton classes?&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;the-case-for-the-singleton&quot;&gt;The case for the singleton&lt;/h3&gt;

&lt;p&gt;Generally, I’m not enthusiastic about singletons. In most situations I consider them to be an &lt;a href=&quot;https://en.wikipedia.org/wiki/Anti-pattern&quot;&gt;anti-pattern&lt;/a&gt;. However, there are certainly valid use cases. In the Cocoa and Cocoa Touch frameworks, there are quite a few singletons that we interact with regularly — &lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplication.shared&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FileManager.default&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NotificationCenter.default&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults.standard&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;URLSession.shared&lt;/code&gt;, and others. These singletons make sense. They manage a shared resource or manage access to a shared resource of which there is only one, or (&lt;em&gt;usually&lt;/em&gt;) only should be one. If this is the conceptual model you are working with, then a singleton might be a decent solution.&lt;/p&gt;

&lt;p&gt;The reason we dislike singletons is because they grow in scope and responsibility over time. They end up owning and managing way too much state, they collect random business or application logic, they accumulate a litany of static methods, and their pervasive, implicit use throughout a codebase entangles and demoralizes your object graph. (Addressing how to disentangle them was the subject of my &lt;a href=&quot;/blog/refactoring-singletons-in-swift/&quot;&gt;earlier post&lt;/a&gt;.) In other words, all of the problems we face with singletons arise from abuse and negligence. With a few tweaks to how we approach writing singletons, we can dramatically improve or even avoid such situations.&lt;/p&gt;

&lt;h3 id=&quot;extracting-the-singleton-ness&quot;&gt;Extracting the ‘singleton-ness’&lt;/h3&gt;

&lt;p&gt;A brief look at Cocoa and Cocoa Touch reveal a clue. Take a look at &lt;a href=&quot;https://developer.apple.com/reference/foundation/filemanager&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FileManager&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/reference/foundation/urlsession&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;URLSession&lt;/code&gt;&lt;/a&gt;. Notice anything? Both have an &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; method — you can initialize &lt;strong&gt;non-singleton instances&lt;/strong&gt; of these classes. That is, you can &lt;strong&gt;create an instance&lt;/strong&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;FileManager&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;URLSession&lt;/code&gt; rather than use the singleton (&lt;code class=&quot;highlighter-rouge&quot;&gt;.default&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.shared&lt;/code&gt;). This is perhaps the most important and powerful aspect of their design, yet it is often overlooked. (Rarely do we opt out of using these singletons, but there are scenarios where it may be appropriate.)&lt;/p&gt;

&lt;p&gt;What this reveals is that “singleton-ness” is not hard-coded into the design of these classes. The essence of a singleton is not an intrinsic aspect of the class, but merely an option. You can allocate and initialize a regular instance of the class with no global state, use it and discard it later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This&lt;/strong&gt; is how we should write singletons — as regular classes with a single designated &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; and a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility&lt;/a&gt;. After writing and unit testing the class, &lt;em&gt;then&lt;/em&gt; add a &lt;code class=&quot;highlighter-rouge&quot;&gt;.shared&lt;/code&gt; class property for clients to use. Then you can either remove &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt;, make it &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;, or put this class in its own framework and make it &lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt; to restrict access. Swift makes creating lightweight micro-libraries easy. Moving the class to its own framework will add an additional barrier to prevent adding unrelated functionality and state over time.&lt;/p&gt;

&lt;p&gt;Create a singleton, &lt;strong&gt;but only when there is no other solution&lt;/strong&gt;. And when you do, do it right:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a normal class with a single &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; and single responsibility&lt;/li&gt;
  &lt;li&gt;Write unit tests&lt;/li&gt;
  &lt;li&gt;Put this class and tests in their own framework / micro-library&lt;/li&gt;
  &lt;li&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;.shared&lt;/code&gt; class property to “make it a singleton”&lt;/li&gt;
  &lt;li&gt;Either mark &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt;, remove it altogether, or mark it as &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; to prevent clients from allocating an instance. (I would recommend &lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt; so that &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; is accessible within the test target of the framework, allowing you to maintain your test suite while ensuring clients can only access the singleton.)&lt;/li&gt;
&lt;/ol&gt;
</content>
   </entry>
   
   <entry>
      <title>A Fair Hotel</title>
      <subtitle>Choosing a place to stay for your next conference</subtitle>
      <link href="http://localhost:4000/blog/a-fair-hotel/" />
      <id>http://localhost:4000/blog/a-fair-hotel</id>

      <published>2017-05-28T00:00:00+00:00</published>
      
      <updated>2017-05-28T00:00:00+00:00</updated>
      

      <summary><p>Earlier this week, the <a href="https://techworkerscoalition.org">Tech Workers Coalition</a> and <a href="http://unitehere.org">UNITE HERE!</a> in San Francisco hosted a <a href="https://www.meetup.com/Tech-Workers-Coalition/events/240112005/">panel discussion</a> on how we can use our power as consumers to support hotel workers in the Bay Area and across the United States. The tech industry is full of remote workers, as well as conference organizers that host thousands of conferences each year — meaning thousands of programmers, designers, product managers, and others <strong>travel all the time</strong> to attend these conferences or attend their own company’s events. By choosing to stay at <a href="http://www.fairhotel.org">a fair hotel</a>, you can make a significant impact on an industry where workers are struggling to negotiate fair wages and benefits.</p>

</summary>
      <content type="html">&lt;p&gt;Earlier this week, the &lt;a href=&quot;https://techworkerscoalition.org&quot;&gt;Tech Workers Coalition&lt;/a&gt; and &lt;a href=&quot;http://unitehere.org&quot;&gt;UNITE HERE!&lt;/a&gt; in San Francisco hosted a &lt;a href=&quot;https://www.meetup.com/Tech-Workers-Coalition/events/240112005/&quot;&gt;panel discussion&lt;/a&gt; on how we can use our power as consumers to support hotel workers in the Bay Area and across the United States. The tech industry is full of remote workers, as well as conference organizers that host thousands of conferences each year — meaning thousands of programmers, designers, product managers, and others &lt;strong&gt;travel all the time&lt;/strong&gt; to attend these conferences or attend their own company’s events. By choosing to stay at &lt;a href=&quot;http://www.fairhotel.org&quot;&gt;a fair hotel&lt;/a&gt;, you can make a significant impact on an industry where workers are struggling to negotiate fair wages and benefits.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;what-is-a-fair-hotel&quot;&gt;What is a Fair Hotel?&lt;/h3&gt;

&lt;p&gt;A Fair Hotel is one in which the workers are treated fairly and have negotiated fair labor contracts, giving them the opportunity for a better life. &lt;a href=&quot;http://www.fairhotel.org&quot;&gt;FairHotel.org&lt;/a&gt; is one of the many initiatives from &lt;a href=&quot;http://unitehere.org&quot;&gt;UNITE HERE!&lt;/a&gt;, a union of 270,000 hotel, cafeteria, airport food service, and casino workers across the country. They are predominantly women, immigrants, and people of color. UNITE HERE! represents these workers in the hospitality industry &lt;a href=&quot;http://unitehere.org/changed-lives/&quot;&gt;to improve their wages and benefits&lt;/a&gt; — that is, earning a living wage, having access to affordable health care, getting paid breaks, paid holidays, and paid time off, guaranteed raises, and more. These are basic benefits that we take for granted in the tech industry — not to mention all the other common perks.&lt;/p&gt;

&lt;h3 id=&quot;why-what-and-how&quot;&gt;Why, what, and how&lt;/h3&gt;

&lt;p&gt;Workers in other industries deserve to be treated just as well as tech workers. Unfortunately, the tech industry has a negative impact on the cities and communities in which it thrives. Gentrification is a major problem in tech hubs like &lt;a href=&quot;https://www.antievictionmap.com&quot;&gt;the Bay Area&lt;/a&gt;, &lt;a href=&quot;http://www.huffingtonpost.com/entry/new-york-city-gentrification-rent_us_57333863e4b0bc9cb048a8f6&quot;&gt;New York&lt;/a&gt;, &lt;a href=&quot;http://www.capitolhillseattle.com/2014/02/anti-gentrification-protesters-target-corporate-shuttles-on-capitol-hill/&quot;&gt;Seattle&lt;/a&gt;, &lt;a href=&quot;http://www.dailytexanonline.com/2017/02/13/gentrification-is-chipping-away-at-austins-unique-culture&quot;&gt;Austin&lt;/a&gt;, and many others. But rather than feel helpless and complicit, you can leverage your consumer power (and that of your company) to help offset some of the economic disruption that tech causes.&lt;/p&gt;

&lt;p&gt;Here’s what you can do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Watch the &lt;a href=&quot;https://www.facebook.com/TechWorkersCoalition/videos/1905085736400616/&quot;&gt;video recording&lt;/a&gt; of the panel discussion and read Paige Panter’s &lt;a href=&quot;https://medium.com/@pagepant/consumer-power-in-the-trump-era-tech-hotel-workers-united-b612548a7336&quot;&gt;blog post&lt;/a&gt; about the event to learn more.&lt;/li&gt;
  &lt;li&gt;Always try to &lt;a href=&quot;http://www.fairhotel.org/hotels-search&quot;&gt;book a Fair Hotel&lt;/a&gt; first. (Unfortunately, Fair Hotels are not available everywhere.) They even have an app. (&lt;a href=&quot;https://itunes.apple.com/us/app/fair-hotel/id557229771&quot;&gt;iOS&lt;/a&gt;, &lt;a href=&quot;https://play.google.com/store/apps/details?id=org.unitehere.fairhotel&quot;&gt;Android&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Don’t just implement this for work travel. Try booking Fair Hotels for your personal travel as well.&lt;/li&gt;
  &lt;li&gt;Avoid staying at &lt;a href=&quot;http://www.fairhotel.org/boycott-list&quot;&gt;hotels that are currently in a labor dispute&lt;/a&gt;. Remember, &lt;a href=&quot;https://teamster.org/blog/2016/06/teamsters-pride-work-look-back-coors-boycott&quot;&gt;boycotts work&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Encourage your co-workers, family, and friends to book Fair Hotels. One of the challenges that UNITE HERE! faces is educating the public.&lt;/li&gt;
  &lt;li&gt;Initiate &lt;strong&gt;a policy change at your company&lt;/strong&gt; to prefer Fair Hotels for company-expensed travel. &lt;strong&gt;Your company can &lt;a href=&quot;http://www.fairhotel.org/sign-fairhotel-partner&quot;&gt;become a FairHotel Partner&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;If you are organizing a conference at a hotel, make sure the event contract includes &lt;a href=&quot;http://www.fairhotel.org/model-protective-language&quot;&gt;protective language&lt;/a&gt; that allows you to cancel the event without consequence should a labor dispute arise.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://techworkerscoalition.org/fairhotels/&quot;&gt;Contact&lt;/a&gt; the Tech Workers Coalition for help.&lt;/li&gt;
&lt;/ol&gt;
</content>
   </entry>
   
   <entry>
      <title>Thoughts on Swift access control</title>
      <subtitle>And the opportunity costs of Swift evolution</subtitle>
      <link href="http://localhost:4000/blog/thoughts-on-swift-access-control/" />
      <id>http://localhost:4000/blog/thoughts-on-swift-access-control</id>

      <published>2017-04-05T00:00:00+00:00</published>
      
      <updated>2017-04-05T00:00:00+00:00</updated>
      

      <summary><p>There has been a ton of debate on the <a href="https://lists.swift.org/mailman/listinfo/swift-evolution">swift-evolution mailing lists</a> about <a href="https://twitter.com/swiftlybrief/status/846938309666492417">access control</a> in Swift. A couple of days ago, the proposal <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0159-fix-private-access-levels.md">SE-0159</a>: <em>Fix Private Access Levels</em> was <a href="https://lists.swift.org/pipermail/swift-evolution-announce/2017-April/000337.html">rejected</a>. I want to share my thoughts on this, as well as thoughts on the larger story for access control in general. But first, let’s begin with a brief history of access control in Swift.</p>

</summary>
      <content type="html">&lt;p&gt;There has been a ton of debate on the &lt;a href=&quot;https://lists.swift.org/mailman/listinfo/swift-evolution&quot;&gt;swift-evolution mailing lists&lt;/a&gt; about &lt;a href=&quot;https://twitter.com/swiftlybrief/status/846938309666492417&quot;&gt;access control&lt;/a&gt; in Swift. A couple of days ago, the proposal &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0159-fix-private-access-levels.md&quot;&gt;SE-0159&lt;/a&gt;: &lt;em&gt;Fix Private Access Levels&lt;/em&gt; was &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution-announce/2017-April/000337.html&quot;&gt;rejected&lt;/a&gt;. I want to share my thoughts on this, as well as thoughts on the larger story for access control in general. But first, let’s begin with a brief history of access control in Swift.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;⚠️ Warning: some opinions are forthcoming. 😄&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/swift-access-control.jpg&quot; title=&quot;Swift Access Control&quot; alt=&quot;Swift Access Control&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-brief-history-of-access-control&quot;&gt;A brief history of access control&lt;/h3&gt;

&lt;p&gt;In the early days of Swift — pre-1.0 — there were no access controls. These were the golden days of Swift. Everything was public and globally accessible from anywhere. No one had to think about proper encapsulation. There were no month-long email debates (because swift-evolution didn’t exist yet). No access controls were the simplest access controls, and no evolution was the best evolution. 😉&lt;/p&gt;

&lt;h4 id=&quot;access-control-arrives&quot;&gt;Access control arrives&lt;/h4&gt;

&lt;p&gt;In Xcode 6 beta 4, Swift added support for &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=5&quot;&gt;access control&lt;/a&gt;. It was easy to understand, easy to use, and quite elegant. Shortly after, &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=14&quot;&gt;Swift 1.0 was officially released&lt;/a&gt; with this access control model. Swift 1.0 was bundled with &lt;a href=&quot;https://developer.apple.com/library/content/releasenotes/DeveloperTools/RN-Xcode/Chapters/Introduction.html#//apple_ref/doc/uid/TP40001051-CH1-SW453&quot;&gt;Xcode 6&lt;/a&gt;. There was no &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=11&quot;&gt;“protected” access level&lt;/a&gt;, which conflates &lt;em&gt;access&lt;/em&gt; with &lt;a href=&quot;https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)&quot;&gt;&lt;em&gt;inheritance&lt;/em&gt;&lt;/a&gt;. There was no &lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/inheritance/&quot;&gt;“friend” access level&lt;/a&gt;, because that’s just gross. There were only three access levels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; entities were accessible from any file that imports the module (a framework or library)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt; (the default) entities were only accessible within their current module (an app or framework target, also think “current &lt;em&gt;directory&lt;/em&gt;” à la &lt;a href=&quot;https://github.com/apple/swift-package-manager/tree/master/Documentation#about-modules&quot;&gt;Swift Package Manager&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; entities were only accessible from within the source file where they were defined&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a library author and app developer, these access levels provide all the tools necessary for me to express anything I want. Aside from the obvious use cases, one can achieve a “traditional” notion of “private” access by simply defining a type or other entities in their own files. For example, if I define &lt;code class=&quot;highlighter-rouge&quot;&gt;class A&lt;/code&gt; and want all of its (&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;) properties to be inaccessible by other classes, then I can define &lt;code class=&quot;highlighter-rouge&quot;&gt;class A&lt;/code&gt; in its own file with nothing else. This is what I love about Swift access control — it encourages best practices (reducing file bloat and module bloat) by providing access levels that basically reflect the “physical” structure of files and directories on disk. Designing proper encapsulation means you &lt;em&gt;have to&lt;/em&gt; move files into clearly defined modules (directories) and you &lt;em&gt;have to&lt;/em&gt; define related types in a single file or completely avoid multiple type definitions in a single file. Code organization and access control are nicely coupled and encourage developers to keep code well-organized. (&lt;a href=&quot;https://en.wikipedia.org/wiki/Coupling_(computer_programming)&quot;&gt;Coupling&lt;/a&gt; is typically &lt;strong&gt;bad&lt;/strong&gt; in software design, but in this case the coupling is desirable.)&lt;/p&gt;

&lt;h4 id=&quot;introducing-fileprivate&quot;&gt;Introducing &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The next phase began when &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=34&quot;&gt;Swift was open sourced&lt;/a&gt; and the &lt;a href=&quot;https://swift.org/contributing/#participating-in-the-swift-evolution-process&quot;&gt;Swift Evolution Process&lt;/a&gt; was introduced. The proposal &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&quot;&gt;SE-0025&lt;/a&gt;: &lt;em&gt;Scoped Access Level&lt;/em&gt; was &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution-announce/2016-February/000049.html&quot;&gt;reviewed&lt;/a&gt;, &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution-announce/2016-March/000063.html&quot;&gt;revised&lt;/a&gt;, and finally &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160328/014008.html&quot;&gt;accepted&lt;/a&gt; for Swift 3. This proposal changed the meaning of &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; to restrict access to an entity to within the current scope or declaration, and preserved the former meaning with a new keyword, &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt;. The hypothesis at the time was that the new (and somewhat intentionally ugly) &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; keyword would rarely be used, thus abiding by Swift’s design philosophy of &lt;a href=&quot;https://en.wikipedia.org/wiki/Progressive_disclosure&quot;&gt;progressive disclosure&lt;/a&gt;. Little did we know that this would &lt;em&gt;not&lt;/em&gt; be true in practice. Another side effect was that cognitive load increased, due to the overloaded term “private” and the overlapping functionality of &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;out-in-the-open&quot;&gt;Out in the &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;A mere &lt;em&gt;three months later&lt;/em&gt;, the &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160627/022354.html&quot;&gt;initial discussions&lt;/a&gt; began for another change to access control. After &lt;strong&gt;three&lt;/strong&gt; controversial &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution-announce/2016-July/000249.html&quot;&gt;review periods&lt;/a&gt; and revisions, proposal &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0117-non-public-subclassable-by-default.md&quot;&gt;SE-0117&lt;/a&gt;: &lt;em&gt;Allow distinguishing between public access and public overridability&lt;/em&gt; was &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution-announce/2016-July/000268.html&quot;&gt;accepted&lt;/a&gt; for Swift 3. The proposal introduced a new access level called &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; and changed the definition of &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; in some contexts. The meaning of &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; narrowed regarding subclassing and overriding. A &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; class can no longer be subclassed outside of the module in which it is defined and any &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; members of a class can no longer be overridden by a subclass outside of the class’s module. Thus, &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; classes are &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; and also subclassable and any &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; property or function on an &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; class is overridable by subclasses. Did you follow that? The rules regarding &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; are a labyrinth and are further complicated by &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;, which prevents overriding and subclassing. Thus, &lt;code class=&quot;highlighter-rouge&quot;&gt;final public&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; classes have different semantics depending on whether or not a client is within the same module or outside of it. Again, the cognitive load increased when thinking about access control. This time, the overlapping functionality of &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; was even more pronounced and harder to discern.&lt;/p&gt;

&lt;p&gt;Despite the complexity of &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; and its jungle of rules and edge cases, it abides by the progressive disclosure philosophy extremely well. Many Swift users, especially beginners, may never need to use or know about &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt;. Only library authors and more advanced users will likely encounter uses for &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt;. The progressive disclosure of &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; is further manifested in Swift’s design affinity for value types, for which &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; does not apply. I think this is why we haven’t seen a proposal to revert SE-0117, or further modify &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Even though &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; can be successfully progressively disclosed, I would still argue that it lacks merit, at least in my experience. I almost always declare classes as &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;, especially if part of a public API. I have rarely encountered a situation where I would want to subclass a class within a module, but not outside of the module. Especially in a language as expressive and rich as Swift, there are plenty of other ways to design classes and modules to share behavior internally, but avoid exposing that behavior externally. A feature like &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; is definitely one that won’t be used the majority of the time, which makes its impact on the semantics of &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; even more regretful.&lt;/p&gt;

&lt;p&gt;Furthermore, it’s worth pointing out that even though &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0117-non-public-subclassable-by-default.md&quot;&gt;SE-0117&lt;/a&gt; was discussed and reviewed &lt;em&gt;after&lt;/em&gt; &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&quot;&gt;SE-0025&lt;/a&gt; was accepted and implemented, it was essentially proposed in isolation from SE-0025. Sure, the community knew about SE-0025 at the time, but no one had actually used Swift 3 and the new &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; access modifiers. (One could have played with this in a snapshot, but very few developers are doing that.) We were still completely in the dark about the implications and reality of SE-0025. While drunk on augmenting access control, the community pushed through yet another proposal to change it. To be clear, no one is to blame. We simply didn’t realize.&lt;/p&gt;

&lt;h3 id=&quot;access-control-in-swift-30&quot;&gt;Access control in Swift 3.0&lt;/h3&gt;

&lt;p&gt;This brings us to the current state of access control in Swift. Paraphrasing from &lt;em&gt;The Swift Programming Language&lt;/em&gt; &lt;a href=&quot;https://itunes.apple.com/us/book/the-swift-programming-language-swift-3-1/id881256329&quot;&gt;eBook&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; access enables entities to be used within any source file from their defining module or from another module that imports the defining module. &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; only applies to classes and allows them to be subclassed from where they are accessible. Any &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; class can also declare its members as &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt;, which allows them to be overridden.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; access is similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt;, except that subclassing and overriding are only allowed from within the defining module.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt; access (the default) enables entities to be used within any source file from their defining module, but not outside of that module.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; access restricts the use of an entity to its own defining source file.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; access restricts the use of an entity to the enclosing declaration or scope.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a very short time, Swift nearly doubled its number of access levels from three to five and altered the semantics of two previous keywords. I’ve seen experienced programmers struggle to explain the difference between them or articulate their appropriate usage. You know something is wrong when it’s easier to explain &lt;a href=&quot;http://chris.eidhof.nl/post/monads-in-swift/&quot;&gt;monads&lt;/a&gt; to a beginner than it is to explain access control levels. 😄&lt;/p&gt;

&lt;p&gt;Returning to the philosophy of progressive disclosure, which of these access levels do we regularly need to consider? We can omit &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; for the reasons mentioned above. We can also omit &lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt; since it is the default and does not need to be typed explicitly. This leaves &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; for common, daily usage — one more keyword than before, with more complex behavior than before.&lt;/p&gt;

&lt;h3 id=&quot;saving-fileprivate-or-the-great-compromise&quot;&gt;Saving &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt;, or the great compromise&lt;/h3&gt;

&lt;p&gt;Most recently, proposal &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0159-fix-private-access-levels.md&quot;&gt;SE-0159&lt;/a&gt;: &lt;em&gt;Fix Private Access Levels&lt;/em&gt; was put forward to simply revert the changes of &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&quot;&gt;SE-0025&lt;/a&gt;. That is, remove &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; and restore the original (Swift 1 and 2) semantics of &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;. Why? As I alluded to earlier, &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; turned out to be used quite often, breaking progressive disclosure. The new &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; essentially broke Swift’s extension-oriented style, as &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; members of a type were no longer accessible from an &lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt; on that type, even if the &lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt; was declared in the same file. The proposal was &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution-announce/2017-March/000332.html&quot;&gt;reviewed&lt;/a&gt; with as much controversy and ferver as SE-0025 itself. Ironically (or serendipitously?), &lt;em&gt;&lt;strong&gt;nearly one year to the day&lt;/strong&gt;&lt;/em&gt; after the &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160328/014008.html&quot;&gt;final decision&lt;/a&gt; for SE-0025 was announced, SE-0159 was &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution-announce/2017-April/000337.html&quot;&gt;rejected&lt;/a&gt;, leaving the state of access control unaltered. The proposal could not be accepted because the impact on source stability for Swift 4 would be too great. I agree, this is problematic.&lt;/p&gt;

&lt;p&gt;However, there’s clearly an issue with access control — SE-0025 did not turn out as expected — and there is disagreement in the Swift community on how to address it. The &lt;a href=&quot;https://swift.org/community/#community-structure&quot;&gt;Core Team&lt;/a&gt; is well aware. Doug Gregor &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170403/034903.html&quot;&gt;started a new discussion&lt;/a&gt; to hopefully find a compromise and settle Swift’s access control story for now, possibly for good:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The design, specifically, is that a “private” member declared within a type “X” or an extension thereof would be accessible from:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;An extension of “X” in the same file&lt;/li&gt;
    &lt;li&gt;The definition of “X”, if it occurs in the same file&lt;/li&gt;
    &lt;li&gt;A nested type (or extension thereof) of one of the above that occurs in the same file&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;This design has a number of apparent benefits:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; becomes the right default for “less than whole module” visibility, and aligns well with Swift coding style that divides a type’s definition into a number of extensions.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; remains for existing use cases, but now its use is more rare, which has several advantages:
      &lt;ul&gt;
        &lt;li&gt;It fits well with the “progressive disclosure” philosophy behind Swift: you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; for a while before encountering and having to learn about &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; (note: we thought this was going to be true of &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&quot;&gt;SE-0025&lt;/a&gt;, but we were clearly wrong)&lt;/li&gt;
        &lt;li&gt;When &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; occurs, it means there’s some interesting coupling between different types in the same file. That makes &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; a useful alert to the reader rather than, potentially, something that we routinely use and overlook so that we can separate implementations into extensions.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; is more closely aligned with other programming languages that use type-based access control, which can help programmers just coming to Swift. When they reach for &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;, they’re likely to get something similar to what they expect—with a little Swift twist due to Swift’s heavy use of extensions.&lt;/li&gt;
    &lt;li&gt;Loosening the access restrictions on &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; is unlikely to break existing code.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;There are likely some drawbacks:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Developers using patterns that depend on the existing lexically-scoped access control of &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; may find this new interpretation of &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; to be insufficiently strict&lt;/li&gt;
    &lt;li&gt;Swift’s access control would go from “entirely lexical” to “partly lexical and partly type-based”, which can be viewed as being more complicated&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ultimately, I regret the changes that brought the &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; access levels to Swift. I wish we could revert both of these changes and instead consider any modifications to access control cohesively as part of a &lt;a href=&quot;https://oleb.net/blog/2017/03/swift-themed-releases/&quot;&gt;Swift theme&lt;/a&gt;. As Doug notes, the hypothesis that &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; would rarely be used was incredibly wrong. This was primarily the result of extensions, which break the lexical scoping of &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution-announce/2016-March/000063.html&quot;&gt;requested revisions&lt;/a&gt; to &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&quot;&gt;SE-0025&lt;/a&gt; hinted at the potential scoping issues with extensions and the new behavior of &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;, but these implications were not widely discussed on the mailing lists, nor fully realized until developers actually started using Swift 3. Looking back, this was a major oversight. It certainly took me by surprise when I first realized I’d have to use &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; &lt;em&gt;everywhere&lt;/em&gt;, due to how I had designed my types and extensions. In my experience the new &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; is a burden rather than a solution to any tangible problem. The strict lexical scoping of &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; feels broken in what has become idiomatic and conventional Swift, where extensions on types are heavily used to organize functionality. &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=29&quot;&gt;Protocol extensions&lt;/a&gt; amplify these symptoms of brokenness.&lt;/p&gt;

&lt;p&gt;The Core Team’s proposal that Doug outlines above is a good compromise. Before I could publish this post, David Hart opened a &lt;a href=&quot;https://github.com/apple/swift-evolution/pull/668/files&quot;&gt;pull request&lt;/a&gt; with a draft proposal titled &lt;em&gt;Type-based Private Access Level&lt;/em&gt; for this. I hope it gets accepted and implemented. Although it introduces even more complexity into Swift’s access control system, I think most of the complexities are behind-the-scenes implementation details — from a user’s perspective the &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; modifiers sound much easier to explain and reason about. Prior to actually using &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; as defined in SE-0025, I think most Swift users expected &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; members to be accessible from extensions. The benefits of a “partly lexical and partly type-based” access control that Doug explains are clear, and I think they outweigh the drawbacks.&lt;/p&gt;

&lt;p&gt;We are obviously not in an optimal position. This is far from ideal, but it solves a real problem. If the suggestions above are implemented, we can escape from the corner we have painted ourselves into, albeit leaving a trail of paint-soaked footprints behind us. We will return to the state where only having to know about &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; will be necessary for &lt;em&gt;most&lt;/em&gt; users &lt;em&gt;most&lt;/em&gt; of the time. (Remember, &lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt; is still the default and doesn’t need to be typed.) The usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; would become rare and conspicuous, perhaps eventually considered &lt;em&gt;bad practice&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;opportunity-costs&quot;&gt;Opportunity costs&lt;/h3&gt;

&lt;p&gt;I think it’s fair to say that the Swift community has learned a lot from the Swift 3.0 release — not only the debates and churn around access control, but around the Swift Evolution Process in general. We should keep this in mind moving forward and continue to reflect on proposals, their outcomes, where we’ve been, and how we arrived at where we are today. What do we want from this programming language? What should be prioritized and what should be deferred for the betterment of the language? Does your proposal fit with the &lt;a href=&quot;https://oleb.net/blog/2017/03/swift-themed-releases/&quot;&gt;theme&lt;/a&gt; of the current Swift release?&lt;/p&gt;

&lt;p&gt;Swift evolution is anything but cheap. Some consider it &lt;a href=&quot;http://furbo.org/2017/02/17/swift-changes-considered-harmful/&quot;&gt;actively harmful&lt;/a&gt;. Every change has a cost, as does every deferment. Some changes are clearly expensive while others are more subtle. Swift 3 arrived with a very real cost — a &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160516/017701.html&quot;&gt;completely different set of goals&lt;/a&gt; (see &lt;a href=&quot;https://github.com/apple/swift-evolution/commit/06b69a6e51a71a462c268da60b51a18966dba31b&quot;&gt;this diff&lt;/a&gt;) and an &lt;a href=&quot;https://mozilla-mobile.github.io/ios/firefox/swift/core/2017/02/22/migrating-to-swift-3.0.html&quot;&gt;enormously&lt;/a&gt; &lt;a href=&quot;https://medium.com/airbnb-engineering/getting-to-swift-3-at-airbnb-79a257d2b656&quot;&gt;painful&lt;/a&gt; &lt;a href=&quot;https://swift.org/migration-guide/&quot;&gt;migration&lt;/a&gt;. But these were just the actual costs, the results of changes made.&lt;/p&gt;

&lt;p&gt;What is perhaps more important to consider are the changes that &lt;a href=&quot;http://ericasadun.com/2016/05/16/winding-down-swift-3-0-abi-stability-deferred/&quot;&gt;&lt;em&gt;were not&lt;/em&gt; made&lt;/a&gt;. The opportunity cost of each Swift release is the value of the changes we decide to forgo — that is, the value of everything that &lt;em&gt;was not&lt;/em&gt; implemented. This includes major features, as well as tasks like fixing bugs, addressing compile time issues, improving runtime performance, increasing overall stability, and more. That’s not to say that these things didn’t happen, &lt;a href=&quot;https://swift.org/blog/whole-module-optimizations/&quot;&gt;they&lt;/a&gt; &lt;a href=&quot;https://swift.org/blog/bridging-pch/&quot;&gt;certainly&lt;/a&gt; &lt;a href=&quot;https://github.com/apple/swift/pull/6484&quot;&gt;did&lt;/a&gt; — but &lt;em&gt;a lot&lt;/em&gt; of time was spent on Swift Evolution Proposals, some of which should definitely have been deferred in hindsight.&lt;/p&gt;

&lt;p&gt;None of this means the Swift community did something &lt;em&gt;wrong&lt;/em&gt;, this is just how it is. We are all learning, even the Core Team. Fortunately, the Core Team is definitely being more strict and thoughtful for Swift 4 proposals, so I doubt we will find ourselves in a situation like this again. But, this is software development. There are always trade-offs.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Swift Unwrapped</title>
      <subtitle>Co-hosting a new podcast with JP Simard</subtitle>
      <link href="http://localhost:4000/blog/swift-unwrapped/" />
      <id>http://localhost:4000/blog/swift-unwrapped</id>

      <published>2017-03-07T00:00:00+00:00</published>
      
      <updated>2017-03-07T00:00:00+00:00</updated>
      

      <summary><p>A few months back, <a href="https://twitter.com/simjp">JP Simard</a> and I decided to start a podcast about <a href="https://swift.org">Swift</a> — the language itself, its evolution and development, the Swift.org open source projects, and general Swifty news. There are a ton of great podcasts out there about developing for Apple platforms and Apple news, but there’s nothing exclusively about Swift the language. In many ways, this podcast is an extension of and commentary on the <a href="https://swiftweekly.github.io"><em>Swift Weekly Brief</em></a> newsletter. However, we’ll be doing deep dives on various topics and elaborating on concepts in greater detail. I’m excited to share that we launched <a href="https://spec.fm/podcasts/swift-unwrapped">Swift Unwrapped</a> yesterday with <a href="https://twitter.com/specfm">Spec.fm</a>!</p>

</summary>
      <content type="html">&lt;p&gt;A few months back, &lt;a href=&quot;https://twitter.com/simjp&quot;&gt;JP Simard&lt;/a&gt; and I decided to start a podcast about &lt;a href=&quot;https://swift.org&quot;&gt;Swift&lt;/a&gt; — the language itself, its evolution and development, the Swift.org open source projects, and general Swifty news. There are a ton of great podcasts out there about developing for Apple platforms and Apple news, but there’s nothing exclusively about Swift the language. In many ways, this podcast is an extension of and commentary on the &lt;a href=&quot;https://swiftweekly.github.io&quot;&gt;&lt;em&gt;Swift Weekly Brief&lt;/em&gt;&lt;/a&gt; newsletter. However, we’ll be doing deep dives on various topics and elaborating on concepts in greater detail. I’m excited to share that we launched &lt;a href=&quot;https://spec.fm/podcasts/swift-unwrapped&quot;&gt;Swift Unwrapped&lt;/a&gt; yesterday with &lt;a href=&quot;https://twitter.com/specfm&quot;&gt;Spec.fm&lt;/a&gt;!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;You can &lt;a href=&quot;https://itunes.apple.com/us/podcast/swift-unwrapped/id1209817203&quot;&gt;subscribe on iTunes&lt;/a&gt;. Currently, we’re planning on releasing new episodes every week with each episode being around 30 minutes. Our &lt;a href=&quot;https://spec.fm/podcasts/swift-unwrapped/61849&quot;&gt;&lt;strong&gt;first episode&lt;/strong&gt;&lt;/a&gt; is a retrospective on the first full year of open source Swift development, reflecting on where we’ve been and how we got here. Let us know &lt;a href=&quot;https://twitter.com/jesse_squires&quot;&gt;what you think&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;If you enjoy it, please consider &lt;a href=&quot;https://itunes.apple.com/us/podcast/swift-unwrapped/id1209817203&quot;&gt;leaving a review&lt;/a&gt; on iTunes or sharing with your friends. We would really appreciate it!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/podcast/swift-unwrapped/id1209817203&quot;&gt;
&lt;img class=&quot;img-thumbnail img-responsive img-half-width center&quot; src=&quot;https://media.simplecast.com/podcast/image/2693/small_1488855184-artwork.jpg&quot; title=&quot;Swift Unwrapped&quot; alt=&quot;Swift Unwrapped&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Adapting to change</title>
      <subtitle>And cutting corners</subtitle>
      <link href="http://localhost:4000/blog/adapting-to-change-and-cutting-corners/" />
      <id>http://localhost:4000/blog/adapting-to-change-and-cutting-corners</id>

      <published>2017-02-15T00:00:00+00:00</published>
      
      <updated>2017-02-15T00:00:00+00:00</updated>
      

      <summary><p>In my <a href="/refactoring-singletons-in-swift/">previous post</a> I mentioned writing <em>adaptive</em> code. That is to say, writing code that is easy to change, code that is malleable. It’s like creating <a href="/adaptive-user-interfaces/">adaptive user interfaces</a> but for all of your classes, modules, and other components.</p>

</summary>
      <content type="html">&lt;p&gt;In my &lt;a href=&quot;/refactoring-singletons-in-swift/&quot;&gt;previous post&lt;/a&gt; I mentioned writing &lt;em&gt;adaptive&lt;/em&gt; code. That is to say, writing code that is easy to change, code that is malleable. It’s like creating &lt;a href=&quot;/adaptive-user-interfaces/&quot;&gt;adaptive user interfaces&lt;/a&gt; but for all of your classes, modules, and other components.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;Building and designing good software means writing code that is &lt;strong&gt;easy to change, but difficult to break.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 class=&quot;text-center&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;Software evolves too rapidly to predict. We cannot always foresee the changes we will need to make to accommodate new features or fix systemic bugs. What we can do is avoid backing ourselves into a corner, locking the door, and throwing away the key. We can avoid situations where the only (seemingly) viable solution is to destroy everything and &lt;a href=&quot;https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/&quot;&gt;start from scratch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To &lt;a href=&quot;http://robnapier.net/refactoring&quot;&gt;make progress&lt;/a&gt; and actually ship code, you &lt;em&gt;will&lt;/em&gt; have to cut corners. Sometimes you will have to cut a lot of them. Some corners can easily be cut, while others should &lt;strong&gt;never&lt;/strong&gt; be cut. Those are the corners that back you into a corner from which you cannot escape.&lt;/p&gt;

&lt;h4 class=&quot;text-center&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;No one has a &lt;a href=&quot;https://twitter.com/sqlabs/status/789127047922774016&quot;&gt;perfect and pure object graph&lt;/a&gt; with perfectly modularized components. That is for what we strive, constantly &lt;a href=&quot;https://martinfowler.com/books/refactoring.html&quot;&gt;refactoring&lt;/a&gt;. The more code we write, the more code we ship, and the more mistakes we make, the better our corner-cutting strategies and backed-into-a-corner-avoiding abilities will become. It takes a lot of shitty code and many bad ideas to finally arrive at slightly better code and a few great ideas.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Refactoring singleton usage in Swift</title>
      <subtitle>Tips for a cleaner, modular, and testable codebase</subtitle>
      <link href="http://localhost:4000/blog/refactoring-singletons-in-swift/" />
      <id>http://localhost:4000/blog/refactoring-singletons-in-swift</id>

      <published>2017-02-10T00:00:00+00:00</published>
      
      <updated>2017-02-10T00:00:00+00:00</updated>
      

      <summary><p>In software development, <a href="https://en.wikipedia.org/wiki/Singleton_pattern">singletons</a> are widely <a href="https://www.objc.io/issues/13-architecture/singletons/">discouraged</a> and <a href="http://coliveira.net/software/day-19-avoid-singletons/">frowned upon</a> — but with good reason. They are difficult or impossible to test, and they entangle your codebase when used implicitly in other classes, making code reuse difficult. Most of the time, a singleton amounts to nothing more than a disguise for global, mutable state. Everyone knows at least knows <em>that</em> is a terrible idea. However, singletons are occasionally an unavoidable and necessary evil. How can we incorporate them into our code in a clean, modular, and testable way?</p>

</summary>
      <content type="html">&lt;p&gt;In software development, &lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;singletons&lt;/a&gt; are widely &lt;a href=&quot;https://www.objc.io/issues/13-architecture/singletons/&quot;&gt;discouraged&lt;/a&gt; and &lt;a href=&quot;http://coliveira.net/software/day-19-avoid-singletons/&quot;&gt;frowned upon&lt;/a&gt; — but with good reason. They are difficult or impossible to test, and they entangle your codebase when used implicitly in other classes, making code reuse difficult. Most of the time, a singleton amounts to nothing more than a disguise for global, mutable state. Everyone knows at least knows &lt;em&gt;that&lt;/em&gt; is a terrible idea. However, singletons are occasionally an unavoidable and necessary evil. How can we incorporate them into our code in a clean, modular, and testable way?&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;singletons-everywhere&quot;&gt;Singletons everywhere&lt;/h3&gt;

&lt;p&gt;On Apple platforms, singletons are everywhere in the Cocoa and Cocoa Touch frameworks. There’s &lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplication.shared&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FileManager.default&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NotificationCenter.default&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults.standard&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;URLSession.shared&lt;/code&gt;, and others. The design pattern even has its own section in the &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Singleton.html#//apple_ref/doc/uid/TP40008195-CH49-SW1&quot;&gt;&lt;em&gt;Cocoa Core Competencies&lt;/em&gt;&lt;/a&gt; guide.&lt;/p&gt;

&lt;p&gt;When you implicitly reference these — and your own — singletons, it increases the amount of effort it takes to change your code. It also makes it difficult or impossible to test your code, because there’s no way to change or mock those singletons from outside of the classes in which they are used. Here’s what you typically see in an iOS app:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;currentUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CurrentUserManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// do something with current user&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mySetting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserDefaults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mySetting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mySetting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// do something with setting&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;URLSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dataTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://someResource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// handle response&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is what I mean by &lt;em&gt;implicit references&lt;/em&gt; — you simply use the singleton directly in your class. We can do better. There is a lightweight, easy, and low impact way to improve this in Swift. Swift makes it elegant, too.&lt;/p&gt;

&lt;h3 id=&quot;dependency-injection&quot;&gt;Dependency injection&lt;/h3&gt;

&lt;p&gt;In short, the answer is &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt;. This principle says that you should design your classes and functions such that all inputs are explicit. If you refactor the snippet above to use dependency injection, it would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CurrentUserManager&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserDefaults&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;urlSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLSession&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;userManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CurrentUserManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;urlSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userManager&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlSession&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;currentUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// do something with current user&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mySetting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mySetting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mySetting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// do something with setting&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;urlSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dataTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://someResource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// handle response&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This class no longer implicitly (or explicitly) depends on any singletons. It explicitly depends on a &lt;code class=&quot;highlighter-rouge&quot;&gt;CurrentUserManager&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;URLSession&lt;/code&gt; — but nothing about these dependencies indicates that they are singletons. This detail no longer matters, but the functionality remains unchanged. The view controller merely knows that instances of these objects exist. At the call site you can pass in the singletons. Again, this detail is irrelevant from the class’s perspective.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;userManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;urlSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;span class=&quot;text-muted&quot;&gt;&lt;b&gt;Pro tip: Swift type inference works here. Instead of writing &lt;code class=&quot;highlighter-rouge&quot;&gt;URLSession.shared&lt;/code&gt;, you can simply write &lt;code class=&quot;highlighter-rouge&quot;&gt;.shared&lt;/code&gt;.&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;If you ever need to provide a &lt;em&gt;different&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;userDefaults&lt;/code&gt; — for example, if you need to &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW6&quot;&gt;share data with App Groups&lt;/a&gt; — then it’s easy to change. In fact, you &lt;em&gt;do not&lt;/em&gt; have to change any code in this class. Instead of passing in &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults.standard&lt;/code&gt;, you pass in &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults(suiteName: &quot;com.myApp&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Furthermore, in unit tests you can now pass in fakes or mocks of these classes. Real mocking isn’t possible in Swift, but there are &lt;a href=&quot;/testing-without-ocmock/&quot;&gt;workarounds&lt;/a&gt;. It depends on how you want to structure your code. You could use a protocol for &lt;code class=&quot;highlighter-rouge&quot;&gt;CurrentUserManager&lt;/code&gt;, which you could then “mock” in a test. You could provide a fake suite for &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt; for testing. You could make &lt;code class=&quot;highlighter-rouge&quot;&gt;URLSession&lt;/code&gt; optional and pass &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; in your tests.&lt;/p&gt;

&lt;h3 id=&quot;refactoring-hell&quot;&gt;Refactoring hell&lt;/h3&gt;

&lt;p&gt;You are sold on this idea and now you want to disentangle and liberate your debt-stricken codebase. While dependency injection is ideal and gives you a more pure object model, it is often a struggle to achieve. Even more, code is rarely designed to accommodate this when it is first written.&lt;/p&gt;

&lt;p&gt;What we refactored above is now more modular and testable — but there is a real problem. The initializer for &lt;code class=&quot;highlighter-rouge&quot;&gt;MyViewController&lt;/code&gt; used to be empty (&lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt;), but now it takes three parameters. Every single call site has to change. The clean and proper way to structure this would be to pass instances from the top down, or from the previous view controller to this one. This would require passing data from the root of your object graph to all the children. In iOS in particular, this can cause quite the headache as you pass data from view controller to view controller. Legacy codebases in particular will struggle to implement such a large change immediately.&lt;/p&gt;

&lt;p&gt;The initializer for most classes (and especially view controllers) will need to change. Such a change becomes insurmountable as you realize that you literally have to refactor the entire app. Either everything will be broken, or only some classes will be updated for dependency injection while others will continue to reference singletons implicitly. This inconsistency could cause problems in the future.&lt;/p&gt;

&lt;p&gt;Thus, a refactoring like this simply may not be feasible in a complex, large, legacy codebase — at least not at once, and not without regressions. Because of this, you could argue that you simply should not refactor and live with the debt. Then a few months or years down the road, you have to support multiple users — and now that &lt;code class=&quot;highlighter-rouge&quot;&gt;CurrentUserManager&lt;/code&gt; is not going to work when you implement switching accounts. How do you cope with this?&lt;/p&gt;

&lt;p&gt;There is a way forward, and a way to design your classes from the beginning to accommodate these kinds of changes for next time.&lt;/p&gt;

&lt;h3 id=&quot;default-parameter-values&quot;&gt;Default parameter values&lt;/h3&gt;

&lt;p&gt;One of my favorite features of Swift is default parameter values. They are incredibly valuable and bring tons of flexibility to your code. With default parameters, you can address the issues mentioned above &lt;strong&gt;without&lt;/strong&gt; going down the dependency injection rabbit hole and &lt;strong&gt;without&lt;/strong&gt; introducing too much complexity in your codebase. Maybe your app really will only have a single user, so implementing all of this dependency injection nonsense is unnecessary overhead.&lt;/p&gt;

&lt;p&gt;You can use the singletons as default parameters:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;userManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CurrentUserManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserDefaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;urlSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userManager&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlSession&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, the initializer has not changed from the perspective of the call site. But there is a world of difference in the class itself, which is now using dependency injection and no longer referencing singletons.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What have you gained with this change? You can refactor every class to use this pattern without updating any call sites. Nothing has changed semantically, nor functionally. Yet, your classes are using dependency injection. They are merely using instances internally. You can test them as described above and maintain a flexible, modular API — all while the public interface remains unchanged. Essentially, you can continue working in your codebase as if nothing ever changed.&lt;/p&gt;

&lt;p&gt;If and when the time comes to pass in custom, non-singleton parameters you can do that without changing any class. You only need to update the call sites. Furthermore, if you decide to implement full-fledged dependency injection and pass in every single dependency from the top downward, then you simply remove the default parameters and pass in the dependencies from above.&lt;/p&gt;

&lt;p&gt;If needed, you can even opt-in or opt-out of any of the default values. In the following example, we provide custom &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt; but keep the default parameters for &lt;code class=&quot;highlighter-rouge&quot;&gt;CurrentUserManager&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;URLSession&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;appGroupDefaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;suiteName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.myApp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appGroupDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Swift makes this kind of “partial” dependency injection so effortless. By adding a new property and an initializer parameter with a default value to your class, you can make your code immensely more modular and testable — without having to refactor the world, nor completely buy in to full-fledged dependency injection. If you design your classes like this &lt;em&gt;from the beginning&lt;/em&gt; then you will find yourself coded into a corner much less frequently — and when you &lt;em&gt;are&lt;/em&gt; backed into a corner, it will be easier to escape.&lt;/p&gt;

&lt;p&gt;You can apply these concepts and designs to all areas of your code beyond the simple examples here — classes, structs, enums, functions. Every function in Swift can take default parameter values. By taking the time to think ahead about what might change in the future, we can create types and functions that can effortlessly adapt to change.&lt;/p&gt;

&lt;p&gt;Building and designing good software means writing code that is &lt;strong&gt;easy to change, but difficult to break&lt;/strong&gt;. That’s the motivation behind dependency injection, and Swift’s default parameters can help you achieve this quickly, easily, and elegantly.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Sleazy recruiting</title>
      <subtitle>LAMP stack for an iOS developer</subtitle>
      <link href="http://localhost:4000/blog/sleazy-recruiting/" />
      <id>http://localhost:4000/blog/sleazy-recruiting</id>

      <published>2017-02-09T00:00:00+00:00</published>
      
      <updated>2017-02-09T00:00:00+00:00</updated>
      

      <summary><p>Today I found out that I’m part of a <a href="http://www.courthousenews.com/2015/10/07/class-of-users-irked-by-talentbin-dossiers.htm">class action lawsuit</a> against a service that I never signed up for called <a href="https://www.crunchbase.com/organization/talentbin#/entity"><em>TalentBin</em></a>. As you have likely experienced, most recruiting in the tech industry is debase, disingenuous, boilerplate garbage. But this — this is definitely a new a low.</p>

</summary>
      <content type="html">&lt;p&gt;Today I found out that I’m part of a &lt;a href=&quot;http://www.courthousenews.com/2015/10/07/class-of-users-irked-by-talentbin-dossiers.htm&quot;&gt;class action lawsuit&lt;/a&gt; against a service that I never signed up for called &lt;a href=&quot;https://www.crunchbase.com/organization/talentbin#/entity&quot;&gt;&lt;em&gt;TalentBin&lt;/em&gt;&lt;/a&gt;. As you have likely experienced, most recruiting in the tech industry is debase, disingenuous, boilerplate garbage. But this — this is definitely a new a low.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Here’s an excerpt of the email I received this morning.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/talentbin.png&quot; title=&quot;TalentBin class action lawsuit&quot; alt=&quot;TalentBin class action lawsuit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;http://www.courthousenews.com/2015/10/07/class-of-users-irked-by-talentbin-dossiers.htm&quot;&gt;Courthouse News&lt;/a&gt;, emphasis mine:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Lead plaintiff Eric Halvorson claims that the TalentBin’s website “scours the Internet and aggregates personal information about consumers from various sources.”&lt;/p&gt;

  &lt;p&gt;TalentBin then assembles the information into “candidate profiles” — which include rankings of the users’ skills based on the gathered information — and sells the profiles to their customers, who use them to evaluate the candidates for employment, Halvorson says.&lt;/p&gt;

  &lt;p&gt;He also claims that although some users are willing participants, &lt;strong&gt;the company’s regular practice is to create and sell the profiles “without the consumer having done anything to invite or initiate a relationship” with TalentBin&lt;/strong&gt;. In fact, since TalentBin &lt;strong&gt;gathers personal information without the users’ authorization, “many of the consumers on whom defendant has compiled a candidate profile have no idea that such a profile exists&lt;/strong&gt; or that it is being communicated to potential employers,” …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;What the fuck?&lt;/em&gt; How disgusting.&lt;/p&gt;

&lt;h3 id=&quot;privacy-and-job-hunting&quot;&gt;Privacy and job hunting&lt;/h3&gt;

&lt;p&gt;I’m usually quite diligent about protecting my personal information and privacy, but I wasn’t always. (The email above was sent to an old, inactive email address.) My advice? Painstakingly guard your personal information and privacy. Be skeptical of any recruiter that attempts to undermine that. Never sign up for any of these recruiting services or companies, like &lt;em&gt;Hired&lt;/em&gt; or &lt;em&gt;CyberCoders&lt;/em&gt; — they are all trash. These “services” are not how you find jobs in tech, or anywhere really — at least not good ones. Finding a great job that you’ll love comes from &lt;em&gt;your network&lt;/em&gt;, not a recruiter. If you are just starting out, then do your research on companies that you are interested in and contact them directly. If your network is small (or nil), you can build it up by going to local meet-ups and conferences.&lt;/p&gt;

&lt;h3 id=&quot;terrible-recruiters&quot;&gt;Terrible recruiters&lt;/h3&gt;

&lt;p&gt;Serendipitously, I received the following message &lt;strong&gt;today&lt;/strong&gt;. This is a perfect illustration of the state of recruiting in tech.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;lamp-stack-opportunity-with-an-exciting-education-software-company&quot;&gt;LAMP stack opportunity with an exciting education software company&lt;/h4&gt;

  &lt;p&gt;Hi Jesse,&lt;/p&gt;

  &lt;p&gt;I’m &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;redacted 1&amp;gt;&lt;/code&gt; reaching out to you from Jobspring Partners. I came across your resume while searching online for PHP developers near San Francisco and was eager to get in touch.  You have a really impressive background in web development, and I have one role in particular for which I believe you’d be a good fit. You’d be working with teachers to develop digital resource tools for students, providing their millions of users with access to learning materials. The company is looking for someone with expertise in PHP tech, which you appear to have in abundance. We’ve place candidates there before and have heard nothing but good things since.  I’d love to tell you more about this position and also open up a discussion about all the exciting things going on in the San Francisco market for developers. Are you free today or tomorrow for a quick call?&lt;/p&gt;

  &lt;p&gt;Best, &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;redacted 2&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Firstly, note the two redactions. &lt;strong&gt;These were two different names.&lt;/strong&gt; This person introduced themselves with one name, and signed with a completely different name. This is the beauty in life that wakes me up each morning. I do love pasta, but not copy-pasta. Secondly, if anyone has seen my “impressive background in web development” lying around, please send it back to me along with my “expertise in PHP.” LAMP stack for an iOS developer? WAT.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/love-lamp.png&quot; title=&quot;LAMP stack for an iOS developer&quot; alt=&quot;LAMP stack for an iOS developer&quot; /&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Prioritization</title>
      <subtitle>Or how I learned to stop worrying and love being a normal human</subtitle>
      <link href="http://localhost:4000/blog/prioritization/" />
      <id>http://localhost:4000/blog/prioritization</id>

      <published>2017-02-08T00:00:00+00:00</published>
      
      <updated>2017-02-08T00:00:00+00:00</updated>
      

      <summary><p>Let me <a href="https://medium.com/@thejameskyle/dear-javascript-7e14ffcae36c#.4kno1s8mc">list</a> the <a href="https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.o23m0vlx3">ways</a> that <a href="http://chris.eidhof.nl/post/burnout/">burnout</a> <a href="https://medium.com/@oleg008/fighting-burnout-with-open-source-ba87559ad844#.b4u5csdav">happens</a> in this <a href="https://medium.com/@jedwatson/sustainable-open-source-ff29c42a54c5#.5i277t9vl">industry</a>, and <a href="https://medium.com/the-javascript-collection/healthy-open-source-967fa8be7951#.9w8myd6u4">especially</a> in <a href="https://medium.com/@fox/the-dark-side-of-open-source-ba5a66c8a4c3#.g76f3syvn">open source</a>. No, I don’t need to. Because <a href="http://www.stilldrinking.com/programming-sucks">you know them already</a>. I’m not burnt out, I promise. I’m reprioritizing, just letting you know.</p>

</summary>
      <content type="html">&lt;p&gt;Let me &lt;a href=&quot;https://medium.com/@thejameskyle/dear-javascript-7e14ffcae36c#.4kno1s8mc&quot;&gt;list&lt;/a&gt; the &lt;a href=&quot;https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.o23m0vlx3&quot;&gt;ways&lt;/a&gt; that &lt;a href=&quot;http://chris.eidhof.nl/post/burnout/&quot;&gt;burnout&lt;/a&gt; &lt;a href=&quot;https://medium.com/@oleg008/fighting-burnout-with-open-source-ba87559ad844#.b4u5csdav&quot;&gt;happens&lt;/a&gt; in this &lt;a href=&quot;https://medium.com/@jedwatson/sustainable-open-source-ff29c42a54c5#.5i277t9vl&quot;&gt;industry&lt;/a&gt;, and &lt;a href=&quot;https://medium.com/the-javascript-collection/healthy-open-source-967fa8be7951#.9w8myd6u4&quot;&gt;especially&lt;/a&gt; in &lt;a href=&quot;https://medium.com/@fox/the-dark-side-of-open-source-ba5a66c8a4c3#.g76f3syvn&quot;&gt;open source&lt;/a&gt;. No, I don’t need to. Because &lt;a href=&quot;http://www.stilldrinking.com/programming-sucks&quot;&gt;you know them already&lt;/a&gt;. I’m not burnt out, I promise. I’m reprioritizing, just letting you know.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h4 class=&quot;text-center&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;We can all learn &lt;a href=&quot;https://medium.com/@taramann/learning-to-just-be-a-person-a69c1a852fcb#.xwnyusjhl&quot;&gt;to be a normal human being&lt;/a&gt; again. It’s good. It feels good. I used to check and answer my GitHub notifications as the first task I did each morning and the last task I did each night. Then I’d carry my tired eyes to bed. Not now. Those things are near the bottom of my &lt;em&gt;Todo&lt;/em&gt; list now. They have been for awhile and no one noticed. (&lt;em&gt;I think.&lt;/em&gt;) They’ll get done — eventually, just not first. Or maybe they won’t get done. And that’s ok, too.&lt;/p&gt;

&lt;p&gt;There’s plenty of burnt toast to go around. We can share. You can even borrow my toaster, although you might need to bring your own plug. But hey, &lt;strong&gt;free toaster&lt;/strong&gt; — am I right? Just don’t stick a fork in it after you turn it on. I never intended for it to work that way.&lt;/p&gt;

&lt;p&gt;Wait, are you still there? Now I remember. Once someone told me &lt;em&gt;it will work&lt;/em&gt; with plastic forks — but be careful, it will melt plastic forks after a certain amount of time. Sorry, I wasn’t really thinking about forks when I was making the toaster. Did you try using a gas-powered toaster instead?&lt;/p&gt;

&lt;h4 class=&quot;text-center&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;This is &lt;a href=&quot;http://geekfeminism.wikia.com/wiki/Open_Source_Male_Privilege_Checklist&quot;&gt;a privilege&lt;/a&gt;. Open source can be rewarding. Open source can bring you many gifts. I’ve opened them so many times over. But those gifts are mostly wrapped in thankless, sleepless, countless nights of volunteering time and energy. And that’s ok. Because money isn’t that important. Because &lt;em&gt;power to the people&lt;/em&gt;. Because &lt;em&gt;fuck the man&lt;/em&gt;. But sometimes — if you’re lucky — those gifts are wrapped in gratitude and friendship. That was worth it. Everything is ok until it one day it’s not ok. There will never be enough time to close every issue and merge every pull request. The notifications are &lt;a href=&quot;https://en.wikipedia.org/wiki/Halting_problem&quot;&gt;an endless tape&lt;/a&gt; fed through a &lt;a href=&quot;https://en.wikipedia.org/wiki/Turing_machine&quot;&gt;Turing machine&lt;/a&gt;, making &lt;a href=&quot;https://en.wikipedia.org/wiki/I_Am_a_Strange_Loop&quot;&gt;strange loops&lt;/a&gt; across our digital and analog worlds.&lt;/p&gt;

&lt;p&gt;We work on machines. So we act like machines. So we think like machines. We can do this well enough and long enough to &lt;a href=&quot;https://en.wikipedia.org/wiki/Turing_test&quot;&gt;convince the machine&lt;/a&gt; that we are a machine, and to convince the other machines on the other sides of the screens. Who is convincing whom, again? Is there a mind behind those eyes and screens or another program waiting to halt? Instead, we can do normal things. We can do more valuable things. Like read a book. Like run for miles in the woods. Like &lt;a href=&quot;http://www.timewellspent.io&quot;&gt;spend time&lt;/a&gt; with your loved ones. Like eat &lt;a href=&quot;http://blog.plover.com/prog/burritos.html&quot;&gt;burritos&lt;/a&gt;.&lt;/p&gt;

&lt;h4 class=&quot;text-center&quot;&gt;* * *&lt;/h4&gt;

&lt;p&gt;In college, I was in a hardcore band. Those times were so fun. We worked hard. Our music was brutal. These lyrics I wrote back then still resonate with me now. I haven’t forgotten them. They will probably resonate with you too. This song was short, but so heavy.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Line after line &lt;br /&gt;
I can’t feel my eyes &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;0xdeadbeef&lt;/code&gt; and migraines &lt;br /&gt;
I made this for you &lt;br /&gt;
From thin air &lt;br /&gt;
This is passion&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m not burnt out. Because I’m diligently resisting the pressure — implicit and explicit. Everything will still be there tomorrow. But isn’t that the problem? Nah. I’m reprioritizing, honestly. Honestly? Yeah, that’s what I’ll tell them when I peel my eyes away from this black mirror.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Pushing the limits of protocol-oriented programming</title>
      <subtitle>Talk at Swift Summit in San Francisco</subtitle>
      <link href="http://localhost:4000/blog/pushing-limits-of-pop/" />
      <id>http://localhost:4000/blog/pushing-limits-of-pop</id>

      <published>2017-01-23T00:00:00+00:00</published>
      
      <updated>2017-01-23T00:00:00+00:00</updated>
      

      <summary><p>A few months ago, I spoke at <a href="https://swiftsummit.com">Swift Summit</a> in San Francisco. The conference has a reputation for providing high-quality talks, and this year was no different. Fortunately, I was able to see nearly all of the talks and not a single one disappointed me. It was such a great conference. The <a href="https://www.skilled.io/u/swiftsummit/pushing-the-limits-of-protocol-oriented-programming">video and full transcript</a> of my talk are now available. The videos of the other talks will be coming online over the next few weeks. I would recommend watching all of them!</p>

</summary>
      <content type="html">&lt;p&gt;A few months ago, I spoke at &lt;a href=&quot;https://swiftsummit.com&quot;&gt;Swift Summit&lt;/a&gt; in San Francisco. The conference has a reputation for providing high-quality talks, and this year was no different. Fortunately, I was able to see nearly all of the talks and not a single one disappointed me. It was such a great conference. The &lt;a href=&quot;https://www.skilled.io/u/swiftsummit/pushing-the-limits-of-protocol-oriented-programming&quot;&gt;video and full transcript&lt;/a&gt; of my talk are now available. The videos of the other talks will be coming online over the next few weeks. I would recommend watching all of them!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;slides-and-code&quot;&gt;Slides and code&lt;/h3&gt;

&lt;p&gt;You can find my slides &lt;a href=&quot;https://speakerdeck.com/jessesquires/pushing-the-limits-of-protocol-oriented-programming&quot;&gt;on Speaker Deck&lt;/a&gt; and the code &lt;a href=&quot;https://github.com/jessesquires/JSQDataSourcesKit&quot;&gt;on GitHub&lt;/a&gt;. Note that the code presented in the talk is highly simplified to keep it readable and digestible. Some of the names of protocols and functions are slightly different, too. If you have any feedback, comments, or questions about the code or about the talk itself, please &lt;a href=&quot;https://twitter.com/anver_bogatov&quot;&gt;let me know&lt;/a&gt;. I’d love to hear your thoughts!&lt;/p&gt;

&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;All programming languages have their own “personality” and encourage certain paradigms. In Swift, this is expressed through protocols and a focus on value types. As a community, we convey this by describing code as being “swifty” or not. In this talk, we’ll examine how we can push the limits of protocol-oriented programming (and thus, the limits of the Swift type-checker) by building a generic, protocol-oriented (“swifty”) data source framework.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.skilled.io/u/swiftsummit/pushing-the-limits-of-protocol-oriented-programming&quot;&gt;
&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/swiftsummit-slides.jpg&quot; title=&quot;Pushing the limits of protocol-oriented programming&quot; alt=&quot;Pushing the limits of protocol-oriented programming&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Testing and mocking without OCMock</title>
      <subtitle>For Swift and Objective-C</subtitle>
      <link href="http://localhost:4000/blog/testing-without-ocmock/" />
      <id>http://localhost:4000/blog/testing-without-ocmock</id>

      <published>2017-01-16T00:00:00+00:00</published>
      
      <updated>2017-01-16T00:00:00+00:00</updated>
      

      <summary><p><a href="http://ocmock.org">OCMock</a> is a powerful <a href="https://en.wikipedia.org/wiki/Mock_object">mock object</a> unit testing library for Objective-C. Even if you are using Swift, as long as your classes inherit from <code class="highlighter-rouge">NSObject</code>, you can use <a href="http://ocmock.org/swift/">some of its features</a>. But what if you are writing pure Swift code which does not have access to the dynamic Objective-C runtime? Or, what if you don’t want your Swift code to be <a href="/avoiding-objc-in-swift/">hampered</a> by <code class="highlighter-rouge">NSObject</code> subclasses and <code class="highlighter-rouge">@objc</code> annotations? Perhaps, you merely want to avoid dependencies and use ‘plain old’ <code class="highlighter-rouge">XCTest</code> with Objective-C. It’s relatively easy and lightweight to achieve the same effect in some testing scenarios <em>without</em> using <code class="highlighter-rouge">OCMock</code>.</p>

</summary>
      <content type="html">&lt;p&gt;&lt;a href=&quot;http://ocmock.org&quot;&gt;OCMock&lt;/a&gt; is a powerful &lt;a href=&quot;https://en.wikipedia.org/wiki/Mock_object&quot;&gt;mock object&lt;/a&gt; unit testing library for Objective-C. Even if you are using Swift, as long as your classes inherit from &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt;, you can use &lt;a href=&quot;http://ocmock.org/swift/&quot;&gt;some of its features&lt;/a&gt;. But what if you are writing pure Swift code which does not have access to the dynamic Objective-C runtime? Or, what if you don’t want your Swift code to be &lt;a href=&quot;/avoiding-objc-in-swift/&quot;&gt;hampered&lt;/a&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; subclasses and &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; annotations? Perhaps, you merely want to avoid dependencies and use ‘plain old’ &lt;code class=&quot;highlighter-rouge&quot;&gt;XCTest&lt;/code&gt; with Objective-C. It’s relatively easy and lightweight to achieve the same effect in some testing scenarios &lt;em&gt;without&lt;/em&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;OCMock&lt;/code&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;testable-code&quot;&gt;Testable code&lt;/h3&gt;

&lt;p&gt;I’m generally not a fan of mocking, and would usually prefer to avoid it altogether. The need for mocking is often (but not always) a warning sign of untestable code. If your code is impossible to test, then it likely suffers from &lt;a href=&quot;https://en.wikipedia.org/wiki/Anti-pattern&quot;&gt;design deficiencies&lt;/a&gt;. I’m not merely talking about the testability of your code for the sake of testing, but rather deeper, architectural design issues — ones that are only revealed once you attempt to write a test. Of course, you could ignore the warnings, but in the coming months (or years!) you will have to reconcile that debt when the system you’ve built requires a change that cannot be accommodated due to its flawed design.&lt;/p&gt;

&lt;p&gt;However, writing testable code and mock-free unit tests is not always possible, especially in a &lt;a href=&quot;https://www.amazon.com/dp/0131177052&quot;&gt;legacy codebase&lt;/a&gt;. In this case, you’ll often need to mock the hell out of everything while you refactor towards a more maintainable and malleable system.&lt;/p&gt;

&lt;h3 id=&quot;avoiding-mocks&quot;&gt;Avoiding mocks&lt;/h3&gt;

&lt;p&gt;There are a couple of strategies to avoid mocking:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use actual instances of classes. For example, if you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; class, then simply construct a &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; in your test instead of mocking. If using Swift, this is exceedingly easy if you make heavy use of value types (&lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;, etc.), which cannot be mocked in the first place. If using a persistence framework like &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreData/index.html&quot;&gt;Core Data&lt;/a&gt;, then you can write test helpers to generate fake models, which you can use in your tests. (See also: &lt;a href=&quot;https://github.com/jeffh/Fox&quot;&gt;Fox&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Use protocols. If a function or class receives a protocol instead of a concrete type, then your &lt;code class=&quot;highlighter-rouge&quot;&gt;XCTestCase&lt;/code&gt; can conform to that protocol to provide fake inputs. For example, if you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDataSource&lt;/code&gt; protocol that provides and array of &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; objects, then your test case can conform to that protocol and generate an array of users to pass into the function or class.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;common-uses-for-mocking&quot;&gt;Common uses for mocking&lt;/h3&gt;

&lt;p&gt;The most common — and highly suitable — uses for mocking are for networking events, analytics logging, and user interaction events that utilize the &lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;observer pattern&lt;/a&gt;, such as &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html&quot;&gt;delegation in Cocoa&lt;/a&gt;. Diving into the details of each of these is beyond the scope of this post. For now, let’s look at an example with delegation.&lt;/p&gt;

&lt;h3 id=&quot;example-protocols-and-xctestexpectation&quot;&gt;Example: protocols and &lt;code class=&quot;highlighter-rouge&quot;&gt;XCTestExpectation&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Suppose we have a view controller that displays a “Yes/No” prompt to the user. After the user selects an option, we need to notify another class of the action taken. This class will perform some operations and then update the UI. We want to test that when an option is tapped that the correct delegate method is called.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ControllerProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;controllerDidSelectYes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;controllerDidSelectNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ControllerProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didTapYes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;controllerDidSelectYes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didTapNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;controllerDidSelectNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We could mock &lt;code class=&quot;highlighter-rouge&quot;&gt;ControllerProtocol&lt;/code&gt; with OCMock in an Objective-C test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;MyApp/MyApp-Swift.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockProtocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OCMockObject&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;niceMockForProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ControllerProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// write test...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But we want to write our tests in Swift, and it would be nice to avoid another dependency. Let’s use &lt;code class=&quot;highlighter-rouge&quot;&gt;XCTestExpectation&lt;/code&gt;. In our test, we can create a class that conforms to &lt;code class=&quot;highlighter-rouge&quot;&gt;ControllerProtocol&lt;/code&gt; and has an &lt;code class=&quot;highlighter-rouge&quot;&gt;XCTestExpectation&lt;/code&gt; property for each protocol method. Each protocol method implementation simply calls &lt;code class=&quot;highlighter-rouge&quot;&gt;fulfill()&lt;/code&gt; on the appropriate expectation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FakeDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ControllerProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;yesExpectation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;XCTestExpectation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;noExpectation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;XCTestExpectation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;controllerDidSelectYes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;yesExpectation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fulfill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;controllerDidSelectNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;noExpectation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fulfill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;FakeDelegate&lt;/code&gt; in our test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testDidTapYes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// trigger viewDidLoad:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;beginAppearanceTransition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// setup the delegate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FakeDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yesExpectation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expectation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;yes expectation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// helper extension method to &quot;tap&quot; the yes button&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yesButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;simulateTap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// wait for our delegate method to be called&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;waitForExpectations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the test fails, that means tapping this button &lt;em&gt;does not&lt;/em&gt; notify the delegate.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;text-muted&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; we can write the same test code in pure Objective-C, too.&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;testing-all-the-things&quot;&gt;Testing all the things&lt;/h3&gt;

&lt;p&gt;This method of testing keeps our tests rather simple and straightforward, and gives us a kind of “mocking” in Swift. The tests are easy to read and edit, and they have no external dependencies. Anyone on your team could easily fix a broken test. The major drawback of this approach is that it introduces some boilerplate, which can be tedious to write if you are writing a lot of tests. However, a benefit here is that we can concretely see how our system works. As mentioned above, writing a test can reveal troublesome designs in our code and in this case we &lt;em&gt;also&lt;/em&gt; have to implement our protocol (&lt;code class=&quot;highlighter-rouge&quot;&gt;ControllerProtocol&lt;/code&gt;). If you find that implementing the protocol is difficult — that using it is somehow cumbersome or intertwined with other dependencies — then you should probably reconsider and redesign.&lt;/p&gt;

&lt;p&gt;Depending on your uses and the context of your app, the value you gain from this approach to testing may vary. That’s particularly true for the example above — since UI is susceptible to frequent change — but it’s merely an example. If you use this approach for testing your networking, logging, or other aspects of your app that change &lt;em&gt;infrequently&lt;/em&gt;, then it should carry its weight better. I especially find this valuable for testing self-contained libraries and frameworks. When a library has no dependencies, it’s nice to avoid testing dependencies as well.&lt;/p&gt;

&lt;p&gt;Finally, I want to make it clear that &lt;code class=&quot;highlighter-rouge&quot;&gt;OCMock&lt;/code&gt; is a &lt;strong&gt;great&lt;/strong&gt; tool. &lt;strong&gt;You should use it&lt;/strong&gt; when it makes sense: when you need its advanced features, when working with legacy code, etc. But if your use cases are simple, then &lt;code class=&quot;highlighter-rouge&quot;&gt;XCTestExpectation&lt;/code&gt; can get the job done. And if you want to stay in the Swift world, then you don’t have a choice. :)&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Swift documentation, Part 2</title>
      <subtitle>Generating and publishing docs in Swift</subtitle>
      <link href="http://localhost:4000/blog/swift-documentation-part-2/" />
      <id>http://localhost:4000/blog/swift-documentation-part-2</id>

      <published>2017-01-08T00:00:00+00:00</published>
      
      <updated>2017-01-08T00:00:00+00:00</updated>
      

      <summary><p>I previously wrote about <a href="/swift-documentation/">writing great documentation in Swift</a>. If you haven’t read that post, head there now to catch up. This post is a follow-up with updates for GitHub’s new way <a href="https://github.com/blog/2228-simpler-github-pages-publishing">to publish docs</a>. This is how I’ve setup all of my Swift open source projects.</p>

</summary>
      <content type="html">&lt;p&gt;I previously wrote about &lt;a href=&quot;/swift-documentation/&quot;&gt;writing great documentation in Swift&lt;/a&gt;. If you haven’t read that post, head there now to catch up. This post is a follow-up with updates for GitHub’s new way &lt;a href=&quot;https://github.com/blog/2228-simpler-github-pages-publishing&quot;&gt;to publish docs&lt;/a&gt;. This is how I’ve setup all of my Swift open source projects.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;generating-docs&quot;&gt;Generating docs&lt;/h3&gt;

&lt;p&gt;As I mentioned before, you’ll want to use Realm’s &lt;a href=&quot;https://github.com/realm/jazzy&quot;&gt;jazzy&lt;/a&gt; — &lt;em&gt;Soulful docs for Swift and Objective-C&lt;/em&gt;. Here’s an example of the docs script that I use for &lt;a href=&quot;https://github.com/jessesquires/PresenterKit&quot;&gt;PresenterKit&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jazzy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --clean &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --author &lt;span class=&quot;s1&quot;&gt;'Jesse Squires'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --author_url &lt;span class=&quot;s1&quot;&gt;'https://twitter.com/jesse_squires'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --github_url &lt;span class=&quot;s1&quot;&gt;'https://github.com/jessesquires/PresenterKit'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --module &lt;span class=&quot;s1&quot;&gt;'PresenterKit'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --source-directory . &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --readme &lt;span class=&quot;s1&quot;&gt;'README.md'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --documentation &lt;span class=&quot;s1&quot;&gt;'Guides/*.md'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --output docs/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You need to tell jazzy where your source code is and provide some basic author information. It couldn’t be easier. Run &lt;code class=&quot;highlighter-rouge&quot;&gt;jazzy --help&lt;/code&gt; to see all of the possible usage options.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;New!&lt;/strong&gt; With the latest version of jazzy, you can pass &lt;code class=&quot;highlighter-rouge&quot;&gt;--documentation&lt;/code&gt; and provide additional, custom markdown docs. In PresenterKit, this is used to generate the &lt;a href=&quot;http://www.jessesquires.com/PresenterKit/getting-started.html&quot;&gt;&lt;em&gt;Getting Started&lt;/em&gt;&lt;/a&gt; guide.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;publishing-docs&quot;&gt;Publishing docs&lt;/h3&gt;

&lt;p&gt;In the previous post, publishing docs with GitHub was a somewhat clunky process where you had to create an &lt;a href=&quot;https://git-scm.com/docs/git-checkout#git-checkout---orphanltnewbranchgt&quot;&gt;orphan branch&lt;/a&gt; named &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;. Now, &lt;a href=&quot;https://github.com/blog/2228-simpler-github-pages-publishing&quot;&gt;all you need to do&lt;/a&gt; is put your documentation in a top-level &lt;code class=&quot;highlighter-rouge&quot;&gt;docs/&lt;/code&gt; directory on your &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch. Notice the output directory in the jazzy script above: &lt;code class=&quot;highlighter-rouge&quot;&gt;--output docs/&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;complete-workflow&quot;&gt;Complete workflow&lt;/h3&gt;

&lt;p&gt;Once you’ve made changes to your code and header docs, run &lt;a href=&quot;https://github.com/jessesquires/PresenterKit/blob/develop/build_docs.sh&quot;&gt;your script&lt;/a&gt; to generate the documentation which should dump everything into &lt;code class=&quot;highlighter-rouge&quot;&gt;docs/&lt;/code&gt;. Then simply commit your changes and push to GitHub, where your documentation will be &lt;a href=&quot;http://www.jessesquires.com/JSQCoreDataKit/&quot;&gt;rendered automatically&lt;/a&gt;.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>140 proposals in 30 minutes</title>
      <subtitle>Talk at FrenchKit conference in Paris</subtitle>
      <link href="http://localhost:4000/blog/140-proposals-frenchkit-video/" />
      <id>http://localhost:4000/blog/140-proposals-frenchkit-video</id>

      <published>2016-11-05T00:00:00+00:00</published>
      
      <updated>2016-11-05T00:00:00+00:00</updated>
      

      <summary><p>As you may know, I <a href="/speaking-at-frenchkit/">spoke at FrenchKit</a> a couple of months ago. The organizers have been working hard to get all of <a href="http://frenchkit.fr/#videos">the videos</a> edited and uploaded, and my talk is <a href="https://www.youtube.com/watch?v=0sYQAtoK3VQ">now available here</a>. 😄</p>

</summary>
      <content type="html">&lt;p&gt;As you may know, I &lt;a href=&quot;/speaking-at-frenchkit/&quot;&gt;spoke at FrenchKit&lt;/a&gt; a couple of months ago. The organizers have been working hard to get all of &lt;a href=&quot;http://frenchkit.fr/#videos&quot;&gt;the videos&lt;/a&gt; edited and uploaded, and my talk is &lt;a href=&quot;https://www.youtube.com/watch?v=0sYQAtoK3VQ&quot;&gt;now available here&lt;/a&gt;. 😄&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;slides-and-code&quot;&gt;Slides and code&lt;/h3&gt;

&lt;p&gt;As usual, you can find my slides &lt;a href=&quot;https://speakerdeck.com/jessesquires/140-proposals-in-30-minutes&quot;&gt;on Speaker Deck&lt;/a&gt; and the code &lt;a href=&quot;https://github.com/jessesquires/swift-proposal-analyzer&quot;&gt;on GitHub&lt;/a&gt;. A few weeks ago I also wrote a post, &lt;a href=&quot;/understanding-swift-evolution/&quot;&gt;&lt;em&gt;Understanding Swift Evolution&lt;/em&gt;&lt;/a&gt;, that explains the project and results in more detail.&lt;/p&gt;

&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Swift 3.0 was an exciting release that dramatically changed the language. It was the first major release cycle that was started and finished in the open. With tremendous feedback from the open source community, the language was refined through the Swift Evolution process with 140 proposals! It’s easy to get lost in all the changes. This talk presents an analysis of all the proposals — exploring statistics on metadata and more, and examining why and how we arrived where we are today, and whether or not we’re better off.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0sYQAtoK3VQ&quot;&gt;
&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/frenchkit-slides.jpg&quot; title=&quot;140 proposals in 30 minutes&quot; alt=&quot;140 proposals in 30 minutes&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Contributing to Swift Weekly Brief</title>
      <subtitle>Join us as a guest writer</subtitle>
      <link href="http://localhost:4000/blog/contributing-to-swift-weekly/" />
      <id>http://localhost:4000/blog/contributing-to-swift-weekly</id>

      <published>2016-10-06T00:00:00+00:00</published>
      
      <updated>2016-10-06T00:00:00+00:00</updated>
      

      <summary><p>You may have noticed that I did not write <a href="http://swiftweekly.github.io/issue-38/">the</a> <a href="http://swiftweekly.github.io/issue-39/">last</a> <a href="http://swiftweekly.github.io/issue-40/">few</a> issues of the <a href="http://swiftweekly.github.io"><em>Swift Weekly Brief</em></a>. I took some much needed time off, and I was able to unplug and relax thanks to the wonderful <a href="https://twitter.com/simjp">JP Simard</a> and <a href="https://twitter.com/modocache">Brian Gesiak</a>. They took over for those weeks and I can’t thank them enough! <a href="https://twitter.com/BasThomas">Bas Broek</a> also made regular contributions, which was super helpful.</p>

</summary>
      <content type="html">&lt;p&gt;You may have noticed that I did not write &lt;a href=&quot;http://swiftweekly.github.io/issue-38/&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;http://swiftweekly.github.io/issue-39/&quot;&gt;last&lt;/a&gt; &lt;a href=&quot;http://swiftweekly.github.io/issue-40/&quot;&gt;few&lt;/a&gt; issues of the &lt;a href=&quot;http://swiftweekly.github.io&quot;&gt;&lt;em&gt;Swift Weekly Brief&lt;/em&gt;&lt;/a&gt;. I took some much needed time off, and I was able to unplug and relax thanks to the wonderful &lt;a href=&quot;https://twitter.com/simjp&quot;&gt;JP Simard&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/modocache&quot;&gt;Brian Gesiak&lt;/a&gt;. They took over for those weeks and I can’t thank them enough! &lt;a href=&quot;https://twitter.com/BasThomas&quot;&gt;Bas Broek&lt;/a&gt; also made regular contributions, which was super helpful.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;But JP and Brian didn’t just help publish a few issues. They &lt;em&gt;brought their own perspective and style&lt;/em&gt; and the results were amazing. They did an &lt;strong&gt;outstanding&lt;/strong&gt; job. This is the vision I had for &lt;em&gt;Swift Weekly Brief&lt;/em&gt; from the beginning — it’s not my newsletter, it belongs to the community. This is why it’s a &lt;a href=&quot;https://github.com/SwiftWeekly&quot;&gt;GitHub organization&lt;/a&gt; and hosted on &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt;, so &lt;em&gt;anyone&lt;/em&gt; can contribute.&lt;/p&gt;

&lt;p&gt;This is why I’m writing today — to invite you join us as a guest writer, if you’re interested. &lt;a href=&quot;http://swiftweekly.github.io/issue-41/&quot;&gt;I’m back&lt;/a&gt; today for this week’s issue., but &lt;a href=&quot;https://twitter.com/BasThomas&quot;&gt;Bas Broek&lt;/a&gt; will be writing &lt;a href=&quot;https://github.com/SwiftWeekly/swiftweekly.github.io/issues/102&quot;&gt;next week&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you would like to join us, &lt;a href=&quot;https://github.com/SwiftWeekly/swiftweekly.github.io/issues/new&quot;&gt;open an issue&lt;/a&gt;!&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Understanding Swift Evolution</title>
      <subtitle>What can we learn by analyzing the proposals?</subtitle>
      <link href="http://localhost:4000/blog/understanding-swift-evolution/" />
      <id>http://localhost:4000/blog/understanding-swift-evolution</id>

      <published>2016-10-03T00:00:00+00:00</published>
      
      <updated>2016-10-03T00:00:00+00:00</updated>
      

      <summary><p>I recently <a href="/speaking-at-frenchkit/">spoke at the FrenchKit conference</a> about <a href="https://github.com/apple/swift-evolution">Swift Evolution</a>. The <a href="https://speakerdeck.com/jessesquires/140-proposals-in-30-minutes">talk</a>, <em>140 proposals in 30 minutes</em>, was originally intended to be an overview of the process and each of the proposals. However, as I was writing the talk, it evolved into something much more interesting. I ended up writing some code to analyze the proposals instead.</p>

</summary>
      <content type="html">&lt;p&gt;I recently &lt;a href=&quot;/speaking-at-frenchkit/&quot;&gt;spoke at the FrenchKit conference&lt;/a&gt; about &lt;a href=&quot;https://github.com/apple/swift-evolution&quot;&gt;Swift Evolution&lt;/a&gt;. The &lt;a href=&quot;https://speakerdeck.com/jessesquires/140-proposals-in-30-minutes&quot;&gt;talk&lt;/a&gt;, &lt;em&gt;140 proposals in 30 minutes&lt;/em&gt;, was originally intended to be an overview of the process and each of the proposals. However, as I was writing the talk, it evolved into something much more interesting. I ended up writing some code to analyze the proposals instead.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;raw-proposals&quot;&gt;Raw proposals&lt;/h3&gt;

&lt;p&gt;All of the proposals are publicly &lt;a href=&quot;https://github.com/apple/swift-evolution/tree/master/proposals&quot;&gt;available on GitHub&lt;/a&gt;, but they are just markdown files — plain text. Because of this, there isn’t an easy or efficient way to query or filter them. We can’t filter them based on author. We can’t group them by the Swift version in which they were implemented. We can’t query their contents. And on and on…&lt;/p&gt;

&lt;h3 id=&quot;proposal-analyzer&quot;&gt;Proposal analyzer&lt;/h3&gt;

&lt;p&gt;Now we can do all of these things, and more — &lt;em&gt;interactively&lt;/em&gt; via Swift playgrounds.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/jessesquires/swift-proposal-analyzer&quot;&gt;swift-proposal-analyzer&lt;/a&gt; project repository contains a number of components. (Everything is written in Swift, of course.) I’ll refer you to the &lt;a href=&quot;https://github.com/jessesquires/swift-proposal-analyzer/blob/master/README.md#setup&quot;&gt;README&lt;/a&gt; for details, but here’s the basic flow for how everything works:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It syncs/fetches the proposals from the main &lt;a href=&quot;https://github.com/apple/swift-evolution&quot;&gt;apple/swift-evolution&lt;/a&gt; repo&lt;/li&gt;
  &lt;li&gt;It does some processing and parsing of the proposals&lt;/li&gt;
  &lt;li&gt;You end up with a playground that lets you interact with the proposals&lt;/li&gt;
  &lt;li&gt;The playground contains all of the proposals as raw resource files, as well as playground pages&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: some playground pages do not render properly from the original proposal markdown. I’ve filed a few radars: &lt;a href=&quot;https://openradar.appspot.com/radar?id=6066152501411840&quot;&gt;rdar://28589341&lt;/a&gt;, &lt;a href=&quot;https://openradar.appspot.com/radar?id=6673199689367552&quot;&gt;rdar://28589062&lt;/a&gt;, &lt;a href=&quot;https://openradar.appspot.com/radar?id=5050621174480896&quot;&gt;rdar://28589211&lt;/a&gt;. Please dupe them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the playground, you are presented with an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;Proposal&lt;/code&gt; objects, which contain most of the proposal metadata, as well as the raw file contents.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Proposal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;seNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// SE-0001, etc.&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Accepted, Rejected, etc.&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;wordCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Proposal&lt;/code&gt; has a title and SE number, an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;Author&lt;/code&gt; objects (1 or more), a &lt;code class=&quot;highlighter-rouge&quot;&gt;Status&lt;/code&gt;, a filename, the file contents, and the total (rough) word count.&lt;/p&gt;

&lt;p&gt;For now, &lt;code class=&quot;highlighter-rouge&quot;&gt;Author&lt;/code&gt; only contains the author’s name.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Status&lt;/code&gt; of a proposal is defined as an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inReview&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awaitingReview&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accepted&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;implemented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SwiftVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deferred&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rejected&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withdrawn&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ve gone from a directory of plain text files to structured data that we can query and filter. 😎&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Here are a few brief examples to show what kinds of questions we can ask and answer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Find proposals implemented in Swift 3.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;implementedInSwift3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analyzer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;proposalsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;implemented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v3_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Find proposals authored or co-authored by Chris Lattner&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;proposalsByLattner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analyzer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proposals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writtenBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Chris Lattner&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Find total mentions of &quot;Objective-C&quot; across all proposals&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analyzer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;occurrences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Objective-C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;querying-the-data&quot;&gt;Querying the data&lt;/h3&gt;

&lt;p&gt;These examples show very basic queries, but we can build upon these to derive much more sophisticated data describing how proposals vary over time. For example, we could plot an author’s influence over time. Is she writing fewer or more proposals for each version of Swift? Or, how is Swift itself evolving over time? Does each version of Swift include more or fewer proposals than the previous one? At what rate are proposals increasing or decreasing?&lt;/p&gt;

&lt;p&gt;Since this is such a targeted set of data, we can use word count as a rough metric for complexity, i.e. the longer a proposal is, the more likely it is to be a larger, more complex change. For example, &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0107-unsaferawpointer.md&quot;&gt;SE-0107: &lt;em&gt;UnsafeRawPointer API&lt;/em&gt;&lt;/a&gt; comes in at around 7,300 words, while &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0114-buffer-naming.md&quot;&gt;SE-0114: &lt;em&gt;Updating Buffer “Value” Names to “Header” Names&lt;/em&gt;&lt;/a&gt; is only about 167 words. The latter is simply a renaming, while the former made significant changes to the lower-level &lt;code class=&quot;highlighter-rouge&quot;&gt;UnsafePointer&lt;/code&gt; APIs. How does the complexity of proposals vary over time?&lt;/p&gt;

&lt;p&gt;Because we have the entire file contents available for each proposal, we could even do some &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_language_processing&quot;&gt;natural language processing&lt;/a&gt;, like categorizing proposals based on &lt;a href=&quot;https://en.wikipedia.org/wiki/Topic_model&quot;&gt;topic models&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I haven’t had time to dive this deeply into Swift Evolution, but maybe someone from the community will. Swift is only about 2 years old, so we probably can’t conclude &lt;em&gt;that&lt;/em&gt; much yet. In any case, it’s fun to play around with the data.&lt;/p&gt;

&lt;h3 id=&quot;current-stats&quot;&gt;Current stats&lt;/h3&gt;

&lt;p&gt;Of course, my talk is already out-dated and it will be a few more weeks until the videos are available. 😂 I guess the Swift Evolution process is just as fast as Swift itself. And now this article has turned so meta I can’t even. 😄&lt;/p&gt;

&lt;p&gt;Here are some interesting things about Swift Evolution that the &lt;a href=&quot;http://apple.github.io/swift-evolution/&quot;&gt;status page&lt;/a&gt; can’t tell you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;75%&lt;/strong&gt; of all proposals have been accepted. &lt;strong&gt;70%&lt;/strong&gt; of these have been implemented.&lt;/li&gt;
  &lt;li&gt;Swift 2.2 to Swift 3.0 saw a &lt;strong&gt;1,012%&lt;/strong&gt; increase in proposals.&lt;/li&gt;
  &lt;li&gt;There are &lt;strong&gt;79&lt;/strong&gt; unique authors.&lt;/li&gt;
  &lt;li&gt;Most proposals have 1 or 2 authors, but &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0023-api-guidelines.md&quot;&gt;there’s one&lt;/a&gt; that has &lt;strong&gt;9&lt;/strong&gt; authors.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ericasadun.com&quot;&gt;Erica Sadun&lt;/a&gt; has authored or co-authored more proposals &lt;em&gt;than anyone&lt;/em&gt;, including &lt;em&gt;everyone&lt;/em&gt; on the Core Team.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following are the top 10 authors, and the number of proposals that they have written or co-written. Note that &lt;strong&gt;half&lt;/strong&gt; of them do not work at Apple (that I know of, at least). These individuals were certainly influential in Swift 3.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Erica Sadun, 25&lt;/li&gt;
  &lt;li&gt;Doug Gregor, 15&lt;/li&gt;
  &lt;li&gt;Joe Groff, 12&lt;/li&gt;
  &lt;li&gt;Dave Abrahams, 10&lt;/li&gt;
  &lt;li&gt;Chris Lattner, 10&lt;/li&gt;
  &lt;li&gt;Dmitri Gribenko, 7&lt;/li&gt;
  &lt;li&gt;Jacob Bandes-Storch, 6&lt;/li&gt;
  &lt;li&gt;David Hart, 6&lt;/li&gt;
  &lt;li&gt;Austin Zheng, 5&lt;/li&gt;
  &lt;li&gt;Kevin Ballard, 5&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Contributing to Swift isn’t just about writing compiler code. It’s also about ideas. You don’t have to be a compiler expert to have ideas. And you don’t need to write C++ to have an influence on Swift. All you need is a great idea to make the language better for everyone.&lt;/p&gt;

&lt;p&gt;Like I mentioned above, Swift is still young — and our dataset of proposals is quite small. We should be cautious with any conclusions, but there’s a lot here to think about and a lot more we can learn! Send me a &lt;a href=&quot;https://github.com/jessesquires/swift-proposal-analyzer/compare?expand=1&quot;&gt;pull request&lt;/a&gt;, there’s plenty &lt;a href=&quot;https://github.com/jessesquires/swift-proposal-analyzer/issues&quot;&gt;to work on&lt;/a&gt;! 😄&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Shipping Swift 3.0</title>
      <subtitle>An update on my open source libraries</subtitle>
      <link href="http://localhost:4000/blog/shipping-swift-3/" />
      <id>http://localhost:4000/blog/shipping-swift-3</id>

      <published>2016-10-01T00:00:00+00:00</published>
      
      <updated>2016-10-01T00:00:00+00:00</updated>
      

      <summary><p>I’m happy to share that all of my open source Swift libraries have (finally) been updated for Swift 3. If you’ve been waiting for any of these final releases, you can now run <code class="highlighter-rouge">pod update</code> or <code class="highlighter-rouge">carthage update</code> and relax — sorry it took so long! I wrote about <a href="/migrating-to-swift-3/">migrating to Swift 3</a> a few months ago and this post shares the final results of the process that I outlined in there.</p>

</summary>
      <content type="html">&lt;p&gt;I’m happy to share that all of my open source Swift libraries have (finally) been updated for Swift 3. If you’ve been waiting for any of these final releases, you can now run &lt;code class=&quot;highlighter-rouge&quot;&gt;pod update&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;carthage update&lt;/code&gt; and relax — sorry it took so long! I wrote about &lt;a href=&quot;/migrating-to-swift-3/&quot;&gt;migrating to Swift 3&lt;/a&gt; a few months ago and this post shares the final results of the process that I outlined in there.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;new-major-releases&quot;&gt;New major releases&lt;/h3&gt;

&lt;p&gt;Each of my libraries have two new major releases — one for Swift 2.3 and one for Swift 3. This means if you were using version 3.x of a library, then the 4.0 release is for Swift 2.3 and the 5.0 release is for Swift 3. &lt;a href=&quot;http://semver.org&quot;&gt;Semantic versioning&lt;/a&gt; is key here. These are &lt;em&gt;major&lt;/em&gt; new releases to prevent breaking clients. This means &lt;code class=&quot;highlighter-rouge&quot;&gt;pod update&lt;/code&gt; won’t pull these versions automatically, but it should notify you that new releases are available. You’ll need to specify these new versions in your &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;Cartfile&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This will allow you to update these libraries on your own time, without forcing you to migrate to Swift 3 immediately. However, note that &lt;strong&gt;all future development&lt;/strong&gt; will be using &lt;strong&gt;Swift 3&lt;/strong&gt; or higher. I will not be maintaining Swift 2.3 versions — these are merely intermediate releases to help you migrate to Swift 3 according to your own project’s needs and timeline. New features and fixes will only be applied to the latest version of each library.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jessesquires/JSQDataSourcesKit/releases&quot;&gt;JSQDataSourcesKit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit/releases&quot;&gt;JSQCoreDataKit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jessesquires/PresenterKit/releases&quot;&gt;PresenterKit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jessesquires/JSQWebViewController/releases&quot;&gt;JSQWebViewController&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jessesquires/DefaultStringConvertible/releases&quot;&gt;DefaultStringConvertible&lt;/a&gt; (Note: this library was not updated to Swift 2.3, only Swift 3.0)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Updating so many libraries is time consuming, but the branching model outlined in &lt;a href=&quot;/migrating-to-swift-3/&quot;&gt;my previous post&lt;/a&gt; made it simple. Here’s the final git flow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;swift2.3&lt;/code&gt; branch is finished and ready&lt;/li&gt;
  &lt;li&gt;Squash and merge &lt;code class=&quot;highlighter-rouge&quot;&gt;swift2.3&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Merge &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Tag and release a new version for Swift 2.3&lt;/li&gt;
  &lt;li&gt;Rebase the &lt;code class=&quot;highlighter-rouge&quot;&gt;swift3.0&lt;/code&gt; branch onto &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; and resolve conflicts&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;swift3.0&lt;/code&gt; branch is finished and ready&lt;/li&gt;
  &lt;li&gt;Squash and merge &lt;code class=&quot;highlighter-rouge&quot;&gt;swift3.0&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Merge &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Tag and release a new version for Swift 3.0&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the library was initially at version 2.0, here’s the gist of what this looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;       v2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Swift 2.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       v3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Swift 2.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      v4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Swift 3.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;o------o--------------------o--------------------o--------------&amp;gt; &lt;/span&gt;develop/master
        &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;                 /                    /
         o--- swift2.3 ---o                    /
                           &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;                 /
                            o--- swift3.0 ---o&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;deprecations&quot;&gt;Deprecations&lt;/h3&gt;

&lt;p&gt;Also note that a few of my libraries have been deprecated, which I wrote about &lt;a href=&quot;/swift-3-sherlocked-my-libraries/&quot;&gt;here&lt;/a&gt;. These libraries were no longer valuable in general, or no longer needed in Swift 3.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jessesquires/GrandSugarDispatch&quot;&gt;GrandSugarDispatch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jessesquires/JSQNotificationObserverKit&quot;&gt;JSQNotificationObserverKit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jessesquires/JSQActivityKit&quot;&gt;JSQActivityKit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;contribute&quot;&gt;Contribute&lt;/h3&gt;

&lt;p&gt;If you find any bugs or have any questions, please send me a pull request or open an issue!&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Speaking at FrenchKit</title>
      <subtitle>Paris, France</subtitle>
      <link href="http://localhost:4000/blog/speaking-at-frenchkit/" />
      <id>http://localhost:4000/blog/speaking-at-frenchkit</id>

      <published>2016-09-30T00:00:00+00:00</published>
      
      <updated>2016-09-30T00:00:00+00:00</updated>
      

      <summary><p>Last week I attended and <a href="https://speakerdeck.com/jessesquires/140-proposals-in-30-minutes">gave a talk</a> at <a href="http://frenchkit.fr">FrenchKit</a> in Paris, France. As expected, it was an amazing conference — especially considering it was the first FrenchKit ever. I think the organizers are already thinking about FrenchKit 2017, so keep an eye out and definitely go if you can. I know I will.</p>

</summary>
      <content type="html">&lt;p&gt;Last week I attended and &lt;a href=&quot;https://speakerdeck.com/jessesquires/140-proposals-in-30-minutes&quot;&gt;gave a talk&lt;/a&gt; at &lt;a href=&quot;http://frenchkit.fr&quot;&gt;FrenchKit&lt;/a&gt; in Paris, France. As expected, it was an amazing conference — especially considering it was the first FrenchKit ever. I think the organizers are already thinking about FrenchKit 2017, so keep an eye out and definitely go if you can. I know I will.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/frenchkit.jpg&quot; title=&quot;FrenchKit&quot; alt=&quot;FrenchKit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;talk&quot;&gt;Talk&lt;/h3&gt;

&lt;p&gt;The slides from my talk are &lt;a href=&quot;https://speakerdeck.com/jessesquires/140-proposals-in-30-minutes&quot;&gt;on Speaker Deck&lt;/a&gt; and the project mentioned in the talk is &lt;a href=&quot;https://github.com/jessesquires/swift-proposal-analyzer&quot;&gt;on GitHub&lt;/a&gt;. I’ll be writing another, in-depth post on the &lt;code class=&quot;highlighter-rouge&quot;&gt;swift-proposal-analyzer&lt;/code&gt; next.&lt;/p&gt;

&lt;h3 id=&quot;highlights&quot;&gt;Highlights&lt;/h3&gt;

&lt;p&gt;I’m not sure if I could articulate this better than &lt;a href=&quot;https://twitter.com/cocoaphony&quot;&gt;Rob Napier&lt;/a&gt;, so just &lt;a href=&quot;http://robnapier.net/copying&quot;&gt;read his post&lt;/a&gt;, and mentally paste it here. 😄 Always, these indie conferences are about the people — and the people at FrenchKit were awesome. We do not often have the opportunity to meet people from our community face-to-face, so it’s a special occasion when we do.&lt;/p&gt;

&lt;p&gt;Aside from the fantastic lineup of &lt;a href=&quot;http://frenchkit.fr/#programme&quot;&gt;speakers&lt;/a&gt;, I got to meet Bas Broek (&lt;a href=&quot;https://twitter.com/BasThomas&quot;&gt;&lt;strong&gt;@basthomas&lt;/strong&gt;&lt;/a&gt;) who has been contributing to &lt;a href=&quot;http://swiftweekly.github.io&quot;&gt;Swift Weekly Brief&lt;/a&gt;, as well as Sébastien Duperron (&lt;a href=&quot;https://twitter.com/liquidseb&quot;&gt;&lt;strong&gt;@liquidseb&lt;/strong&gt;&lt;/a&gt;) who contributed significantly to &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit&quot;&gt;JSQCoreDataKit&lt;/a&gt; (which I &lt;a href=&quot;/open-source-everything/&quot;&gt;wrote about&lt;/a&gt; before). There were many other great folks (including a few users of &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController&quot;&gt;JSQMessages&lt;/a&gt;), but definitely too many to list here.&lt;/p&gt;

&lt;p&gt;The organizers opened with a mock Apple-esque keynote. It was hilarious and I hope this part was also recorded. The conference closed with 🧀 and 🍷 (of course) and a fun pub quiz. We had a good time with lots of laughs.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/frenchkit-michel.jpg&quot; title=&quot;FrenchKit pub quiz&quot; alt=&quot;FrenchKit pub quiz&quot; /&gt;
&lt;small class=&quot;text-muted center&quot;&gt;Michel explains the specs of the Macintosh Classic I, which had something called a “headphone jack”?&lt;/small&gt;&lt;/p&gt;

&lt;h3 id=&quot;thanks&quot;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;I can’t say thank you enough to &lt;a href=&quot;https://twitter.com/viteinfinite&quot;&gt;Simone&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/guilletmichel&quot;&gt;Michel&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/nlauquin&quot;&gt;Nicolas&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/MonsieurDart&quot;&gt;Mathieu&lt;/a&gt;, and everyone at &lt;a href=&quot;https://twitter.com/XebiaFr&quot;&gt;Xebia&lt;/a&gt; who helped make this conference great for everyone.&lt;/p&gt;

&lt;p&gt;Until we meet again, let’s keep chatting on Twitter and coding together on GitHub.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Enums as configuration&#58; the anti-pattern</title>
      <subtitle>Implementing the open/closed principle</subtitle>
      <link href="http://localhost:4000/blog/enums-as-configs/" />
      <id>http://localhost:4000/blog/enums-as-configs</id>

      <published>2016-07-31T00:00:00+00:00</published>
      
      <updated>2016-07-31T00:00:00+00:00</updated>
      

      <summary><p>One of the most common patterns I see in software design with Objective-C (and sometimes Swift), is the use of enumeration types (<code class="highlighter-rouge">enum</code>) as configurations for a class. For example, passing an <code class="highlighter-rouge">enum</code> to a <code class="highlighter-rouge">UIView</code> to style it in a certain way. In this article, I explain why I think this is an <a href="https://en.wikipedia.org/wiki/Anti-pattern">anti-pattern</a> and provide a more robust, modular, and extensible approach to solving this problem.</p>

</summary>
      <content type="html">&lt;p&gt;One of the most common patterns I see in software design with Objective-C (and sometimes Swift), is the use of enumeration types (&lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;) as configurations for a class. For example, passing an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; to style it in a certain way. In this article, I explain why I think this is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Anti-pattern&quot;&gt;anti-pattern&lt;/a&gt; and provide a more robust, modular, and extensible approach to solving this problem.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;the-configuration-problem&quot;&gt;The configuration problem&lt;/h3&gt;

&lt;p&gt;Let’s first define the problem we’re solving. Suppose we have a class that is used in a few different contexts, where each usage needs a slightly different configuration. That is, in each unique context the behavior of the class should be different. This class could represent a view, a networking client, or anything else. When instantiated, users need to be able to specify or modify the behavior of the class for the current context without knowing or modifying any of the class’s implementation details.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the following examples will be in Swift (3.0), but this applies to Objective-C as well. In fact, this discussion is relevant for any programming language with similar concepts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s use a simple, familiar example — a &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewCell_Class/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt;&lt;/a&gt;. Suppose we have a cell layout with an image, a couple of labels, and an accessory view. The layout is pretty generic, and we want to reuse the same cell across different views in our app. Suppose our &lt;em&gt;login view&lt;/em&gt; styles all of its cells with specific colors, fonts, etc. However, when we reuse these cells in our &lt;em&gt;settings view&lt;/em&gt; we want all of our fonts, colors, etc. to be &lt;em&gt;different&lt;/em&gt;. All views that use this cell need the same basic cell layout and subviews, but different visual treatments.&lt;/p&gt;

&lt;h3 id=&quot;using-an-enum-for-configuration&quot;&gt;Using an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; for configuration&lt;/h3&gt;

&lt;p&gt;Given the problem above, we may design something like the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CellStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CommonTableCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CellStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;didSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;configureStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configureStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// configure style for login view&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;textLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;textLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preferredFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTextStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFontTextStyleBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;detailTextLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;detailTextLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preferredFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTextStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFontTextStyleTitle3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;accessoryView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;chevron&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// configure style for settings view&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;textLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;textLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preferredFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTextStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFontTextStyleTitle1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;detailTextLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;detailTextLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preferredFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTextStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFontTextStyleCaption1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;accessoryView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;checkmark&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// configure style for profile view&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SettingsViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

   &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellForRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// create and configure cell&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We create our usual &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt; and &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewController_Class/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewController&lt;/code&gt;&lt;/a&gt; subclasses, and define a style &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;. Within each view controller we set the appropriate style when we create and configure the cell. Easy enough, right?&lt;/p&gt;

&lt;h3 id=&quot;why-enum-configurations-are-bad&quot;&gt;Why &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; configurations are bad&lt;/h3&gt;

&lt;p&gt;If writing a library or framework, the “&lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; as configuration” pattern is often promoted as flexible for clients — &lt;em&gt;“Look at all of these configuration options provided for you!”&lt;/em&gt; It is certainly a well-intentioned design, but don’t be fooled. Rather than provide a truly modular and adaptable API, the result is unnecessarily limiting, cumbersome to maintain, and highly error-prone.&lt;/p&gt;

&lt;p&gt;The notion that this design is flexible because you can &lt;em&gt;“set any style you want”&lt;/em&gt; is ironic, because an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; is &lt;strong&gt;inflexible by definition&lt;/strong&gt; — there are a finite number of values. In this example, a finite number of cell styles. If this were part of your app, each time you encounter a new context where you want to use this cell, you would need to add a new &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;CellStyle&lt;/code&gt; and update the enormous &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;If this were a library, there would be no way for clients to add a new &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; or define their own style. Clients would have to request a new style be added and/or submit a pull request to implement it. Further, adding a new value to the &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; is technically a &lt;strong&gt;breaking&lt;/strong&gt; change for your library — if a client is using this &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; in a &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement in other parts of their application then the addition of a new &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; will be an error since Swift requires &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statements to be exhaustive.&lt;/p&gt;

&lt;p&gt;It’s even worse in Objective-C — there are no errors or warnings for incomplete &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statements and it is too easy to omit a &lt;code class=&quot;highlighter-rouge&quot;&gt;break;&lt;/code&gt; and accidentally fall through to the next &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt;. Of course, you can mitigate these deficiencies (and more) by enabling a few clang warnings: &lt;code class=&quot;highlighter-rouge&quot;&gt;-Wcovered-switch-default&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-Wimplicit-fallthrough&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-Wassign-enum&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-Wswitch-enum&lt;/code&gt;. But I digress.&lt;/p&gt;

&lt;p&gt;This approach is fragile, &lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot;&gt;imperative&lt;/a&gt;, and produces a lot of duplicate code. We can do better.&lt;/p&gt;

&lt;h3 id=&quot;configuration-models&quot;&gt;Configuration models&lt;/h3&gt;

&lt;p&gt;Rather than obfuscate what’s happening by exposing merely an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;, we can open up our API using a technique known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;inversion of control&lt;/a&gt;. Continuing with our example, what if we create an entirely new model to represent our cell style? Consider the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CellStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;labelColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;labelFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detailColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detailFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;accessory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CommonTableCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CellStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;textLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labelColor&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;textLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labelFont&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;detailTextLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detailColor&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;detailTextLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detailFont&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;accessoryView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead of an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;, we can create a &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; that represents our cell style. Not only does this clearly define all attributes of the style, but we can now &lt;strong&gt;map this value directly onto&lt;/strong&gt; the cell in a less procedural, more &lt;a href=&quot;https://en.wikipedia.org/wiki/Declarative_programming&quot;&gt;declarative&lt;/a&gt; way. In other scenarios, we could pass a configuration to a class’s designated initializer.&lt;/p&gt;

&lt;p&gt;We’ve eliminated a ton of code and complexity from this class, leaving it smaller, easier to read, and easier to reason about. There is a well-defined, one-to-one mapping from the style attributes to the cell attributes. We no longer have the maintenance burden of the giant &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement, nor its proclivity towards introducing errors. Finally, not only can clients express infinitely many styles, but introducing new styles &lt;strong&gt;no longer results in changing the original class&lt;/strong&gt;, nor does it result in breaking changes if creating a library.&lt;/p&gt;

&lt;h3 id=&quot;providing-default-and-custom-values&quot;&gt;Providing default and custom values&lt;/h3&gt;

&lt;p&gt;Another reason this design is superior is because it allows us to provide sensible default values, and add new styles in a purely additive, non-breaking way. Some of Swift’s features really shine here — default parameter values, &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html&quot;&gt;extensions&lt;/a&gt;, and &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/doc/uid/TP40014097-CH31-ID457&quot;&gt;type inference&lt;/a&gt;. The language is so conducive to these types of patterns, whereas Objective-C feels clumsy, tedious, and verbose.&lt;/p&gt;

&lt;p&gt;In Swift, we can provide default values in the initializer:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CellStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;labelColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;labelFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detailColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;detailFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;accessory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;labelColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;labelFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preferredFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTextStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFontTextStyleTitle1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;detailColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lightGray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;detailFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preferredFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTextStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFontTextStyleCaption1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;accessory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labelColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labelColor&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labelFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labelFont&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detailColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detailColor&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detailFont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detailFont&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessory&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And for our library-provided styles that we previously defined using an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;, we can define properties in an extension:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CellStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CellStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CellStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;labelColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                         &lt;span class=&quot;nv&quot;&gt;labelFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preferredFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTextStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFontTextStyleTitle1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                         &lt;span class=&quot;nv&quot;&gt;detailColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                         &lt;span class=&quot;nv&quot;&gt;detailFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preferredFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTextStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFontTextStyleCaption1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                         &lt;span class=&quot;nv&quot;&gt;accessory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;checkmark&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// usage:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice the call site can actually remain &lt;em&gt;unchanged&lt;/em&gt; due to Swift’s type inference. Previously &lt;code class=&quot;highlighter-rouge&quot;&gt;.settings&lt;/code&gt; referred to the &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; value, but it now refers to the &lt;code class=&quot;highlighter-rouge&quot;&gt;static var&lt;/code&gt; property in the extension. We can provide a more modular, extensible API without sacrificing conciseness or clarity.&lt;/p&gt;

&lt;p&gt;As mentioned above, clients can now effortlessly provide their own styles by adding an extension. Even more, they can choose to only override some of the default properties:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CellStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CellStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// uses default fonts&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CellStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;labelColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                         &lt;span class=&quot;nv&quot;&gt;detailColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                         &lt;span class=&quot;nv&quot;&gt;accessory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;configurations-as-behaviors&quot;&gt;Configurations as behaviors&lt;/h3&gt;

&lt;p&gt;While our example focused on styling a view, I want to reiterate that this is a powerful pattern for modeling general behaviors. Consider a class responsible for networking. Its configuration could specify the protocol, retry policy for failures, cache expiration, and more. Where you previously would have had a litany of individual properties, you can now bundle these attributes into a single cohesive unit, provide default behaviors, and allow for customization.&lt;/p&gt;

&lt;h3 id=&quot;real-world-examples&quot;&gt;Real world examples&lt;/h3&gt;

&lt;p&gt;A savvy reader would likely realize by now that this is exactly how the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLSession_class/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;URLSession&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLSessionConfiguration_class/index.html#//apple_ref/occ/cl/NSURLSessionConfiguration&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;URLSessionConfiguration&lt;/code&gt;&lt;/a&gt; APIs are designed. Among others, this is one reason to celebrate this API over the now obsolete &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSURLConnection&lt;/code&gt;&lt;/a&gt;. Notice how &lt;code class=&quot;highlighter-rouge&quot;&gt;URLSessionConfiguration&lt;/code&gt; provides three configurations: &lt;code class=&quot;highlighter-rouge&quot;&gt;.default&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.ephemeral&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;.background(withIdentifier:)&lt;/code&gt;. It also allows you to customize individual properties. Imagine how limiting this API would be if it were merely an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at another example on the other side of the spectrum — &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPresentationController_class/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIPresentationController&lt;/code&gt;&lt;/a&gt;. This API allows us to provide custom presentations for view controllers by creating custom presentation controllers. Previously, this API was limited to… an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;! The only presentation styles available were those defined by &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/index.html#//apple_ref/swift/enum/c:@E@UIModalPresentationStyle&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIModalPresentationStyle&lt;/code&gt;&lt;/a&gt;. As we’ve explored above, this incredibly inflexible for clients. However, &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt; unfortunately did not get this new API 100% correct. There are parts of the public API that still depend on &lt;code class=&quot;highlighter-rouge&quot;&gt;UIModalPresentationStyle&lt;/code&gt; values:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;adaptivePresentationStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;traitCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITraitCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIModalPresentationStyle&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This method requires you to return a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIModalPresentationStyle&lt;/code&gt; value for the specified &lt;code class=&quot;highlighter-rouge&quot;&gt;UITraitCollection&lt;/code&gt;. What we &lt;em&gt;should&lt;/em&gt; be able to do here is return any arbitrary &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPresentationController&lt;/code&gt;. If you want to learn more, see &lt;a href=&quot;/swifty-presenters/&quot;&gt;my talk&lt;/a&gt; about these APIs.&lt;/p&gt;

&lt;p&gt;For our final example, let’s look at the evolution of &lt;a href=&quot;http://www.jessesquires.com/JSQMessagesViewController/&quot;&gt;JSQMessagesViewController&lt;/a&gt;. A &lt;strong&gt;very old&lt;/strong&gt; version of this library &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/blob/e6b9413f49605e3ec9cb70991f73f20de900c1e7/JSMessagesViewController/Classes/JSMessagesViewController.h#L23-L48&quot;&gt;provided&lt;/a&gt; an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; to determine how timestamps were displayed in the messages view, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSMessagesViewTimestampPolicy&lt;/code&gt;. Today, there’s a &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/blob/develop/JSQMessagesViewController/Model/JSQMessagesCollectionViewDataSource.h#L114-L126&quot;&gt;data source&lt;/a&gt; and &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/blob/develop/JSQMessagesViewController/Model/JSQMessagesCollectionViewDelegateFlowLayout.h#L38-L50&quot;&gt;delegate&lt;/a&gt; method for determining what text should be displayed above the message bubbles and when it should be displayed. Not only can clients specify exactly when to show these labels, but they do not even have to contain timestamps! The API just asks for any arbitrary text. In this case, you’ll notice that we don’t provide a configuration object for clients like what we describe above. Instead, data source and delegate objects fulfill this role — this is another method by which we can &lt;a href=&quot;https://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;invert control&lt;/a&gt; to provide more powerful and simpler APIs for clients for custom configuration and custom behavior.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;What we’ve explored in this post is a manifestation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Open/closed_principle&quot;&gt;open/closed principle&lt;/a&gt; — the “O” in &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Software entities should be open for extension, but closed for modification. That is, such an entity can allow its behavior to be extended without modifying its source code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ve seen that attempting to implement this principle via enumeration types is limiting for clients, error-prone, and a maintenance burden. By using configuration and behavior objects or data sources and delegates, we can simplify our code, eliminate errors, maintain concision and clarity, provide a modular and extensible API for clients, and avoid breaking changes.&lt;/p&gt;

&lt;p&gt;What kind of styles, configurations, or behaviors can you identify in your app? Time to refactor. 🤓&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Migrating to Swift 3</title>
      <subtitle>Advice, tips, and warnings</subtitle>
      <link href="http://localhost:4000/blog/migrating-to-swift-3/" />
      <id>http://localhost:4000/blog/migrating-to-swift-3</id>

      <published>2016-07-25T00:00:00+00:00</published>
      
      <updated>2016-07-25T00:00:00+00:00</updated>
      

      <summary><p>I spent most of my free time last weekend and a few days of last week on migrating my Swift code to Swift 3.0 — I migrated my open source projects as well as my private side projects. Overall, I would say my experience was “OK”. It definitely could have been better, but I think the largest problem was overcoming the cognitive hurdle of seeing all the changes and errors from Xcode’s migration tool at once. The best thing to do is wipe away the tears, put your headphones on, and start hacking. 🤓</p>

</summary>
      <content type="html">&lt;p&gt;I spent most of my free time last weekend and a few days of last week on migrating my Swift code to Swift 3.0 — I migrated my open source projects as well as my private side projects. Overall, I would say my experience was “OK”. It definitely could have been better, but I think the largest problem was overcoming the cognitive hurdle of seeing all the changes and errors from Xcode’s migration tool at once. The best thing to do is wipe away the tears, put your headphones on, and start hacking. 🤓&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/eidhof-programmer.jpg&quot; title=&quot;A Swift programmer&quot; alt=&quot;A Swift programmer&quot; /&gt;
&lt;small class=&quot;text-muted center&quot;&gt;A real-life Swift programmer, ready for migration. Photo taken just before migrating to Swift 3.0. (&lt;a href=&quot;http://www.itworld.com/article/2892928/music-to-get-you-into-the-coding-groove.html&quot;&gt;Source&lt;/a&gt;)&lt;/small&gt;&lt;/p&gt;

&lt;h3 id=&quot;open-source-migration-strategy&quot;&gt;Open source migration strategy&lt;/h3&gt;

&lt;p&gt;Here’s my basic git workflow for migrating my open source libraries:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All normal development happens on the &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; branch&lt;/li&gt;
  &lt;li&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;swift2.3&lt;/code&gt; branch from &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; and run Xcode’s migrator for Swift 2.3&lt;/li&gt;
  &lt;li&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;swift3.0&lt;/code&gt; branch &lt;strong&gt;from the &lt;code class=&quot;highlighter-rouge&quot;&gt;swift2.3&lt;/code&gt; branch&lt;/strong&gt; and run Xcode’s migrator for Swift 3.0&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This creates the following model:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;o-----o develop &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;swift 2.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        o-----o swift2.3
               &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                o-----o swift3.0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My plan for now is to keep these branches in sync like what you see above. That is, &lt;code class=&quot;highlighter-rouge&quot;&gt;swift2.3&lt;/code&gt; will be ahead of &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;swift3.0&lt;/code&gt; will be ahead of &lt;code class=&quot;highlighter-rouge&quot;&gt;swift2.3&lt;/code&gt;. The end goal will be to merge changes from each branch back into a single squashed commit on &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; when the final release of Xcode 8 is out.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;                           merge 2.3           merge 3.0
o------o                    o                    o-----------o develop
        &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;                 /                    /
         o--- swift2.3 ---o                    /
                           &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;                 /
                            o--- swift3.0 ---o&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Each merge into &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; will be a major release of the library. For example, if the library is currently at &lt;code class=&quot;highlighter-rouge&quot;&gt;v2.0&lt;/code&gt;, then the Swift 2.3 merge will result in &lt;code class=&quot;highlighter-rouge&quot;&gt;v3.0&lt;/code&gt; of the library and the Swift 3.0 merge will result in &lt;code class=&quot;highlighter-rouge&quot;&gt;v4.0&lt;/code&gt; of the library. This ensures &lt;a href=&quot;http://semver.org&quot;&gt;semantic versioning&lt;/a&gt; and allows clients to safely migrate between versions &lt;em&gt;at their own pace&lt;/em&gt; as they adopt the next version of Swift.&lt;/p&gt;

&lt;h3 id=&quot;private-projects&quot;&gt;Private projects&lt;/h3&gt;

&lt;p&gt;For my private projects, I migrated directly to Swift 3.0. I use &lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;, so I migrated my dependencies first. This means following the steps above for each open source library (or private pod).&lt;/p&gt;

&lt;p&gt;So far, the only dependencies I have for this project are my own libraries, which made this quite easy since I control all of the code. However, if you have third-party dependencies, then I would recommend opening an issue on the project to discuss migration plans with the current maintainers. I expect most popular projects are doing something similar to what I described above. For example, &lt;a href=&quot;https://github.com/Alamofire/Alamofire&quot;&gt;AlamoFire&lt;/a&gt; has a &lt;code class=&quot;highlighter-rouge&quot;&gt;swift2.3&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;swift3.0&lt;/code&gt; branch. If needed, you can fork and migrate third-party libraries yourself — then submit a pull request or use your fork until the maintainers offer a solution. However, you should definitely reach out to project maintainers before submitting a pull request for migration.&lt;/p&gt;

&lt;p&gt;Until Xcode 8 is final, you’ll need to point your pods to these new branches:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MyLibrary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/username/MyLibrary.git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'swift3.0'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This tells CocoaPods to fetch the latest on the &lt;code class=&quot;highlighter-rouge&quot;&gt;swift3.0&lt;/code&gt; branch, instead of the latest published version.&lt;/p&gt;

&lt;p&gt;Once your dependencies and &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; are updated, you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;pod update&lt;/code&gt; to bring in the Swift 3.0 versions of each library. &lt;em&gt;Then&lt;/em&gt; you can migrate your main app. I suggest commiting all of this migration in a single commit — update all dependencies, migrate your app, then commit — to keep your history clean.&lt;/p&gt;

&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;/h3&gt;

&lt;p&gt;These things probably go without saying, but it doesn’t hurt to reiterate.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure you have decent test coverage on the code you are migrating. The changes are &lt;strong&gt;massive&lt;/strong&gt; and having a list of green checkmarks once the migration is over is the best way to ensure you haven’t broken anything. ✅&lt;/li&gt;
  &lt;li&gt;Resist doing any other refactoring during the migration. Migrate, commit, &lt;strong&gt;then&lt;/strong&gt; make &lt;em&gt;Swifty API&lt;/em&gt; changes in a follow-up commit to bring your code up-to-date with the latest &lt;a href=&quot;https://swift.org/documentation/api-design-guidelines/&quot;&gt;API guidelines&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;If you haven’t migrated yet, wait until &lt;em&gt;right after&lt;/em&gt; the next beta. I made the mistake of migrating during beta 2 after it had been out for two weeks. The next day, beta 3 was released. 😅 The changes between the betas weren’t as large as the initial migration, but they weren’t trivial either — &lt;strike&gt;and the migrator doesn't work between betas, so you have to apply each Xcode fix-it individually.&lt;/strike&gt; &lt;strong&gt;Update: &lt;a href=&quot;https://twitter.com/clattner_llvm/status/757626936810057728&quot;&gt;the migrator does work between betas&lt;/a&gt;, but you have to run it manually. (I thought I tried this, but I might be mistaken.)&lt;/strong&gt; I would rather have waited the extra day to migrate all at once with beta 3, then tackle the changes in beta 4 two weeks later.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Do not&lt;/strong&gt; migrate everything in a single day. Accept that this is a multi-day task. I did one or two libraries in a day and then spent a few days migrating the full app. Commit or &lt;code class=&quot;highlighter-rouge&quot;&gt;git stash&lt;/code&gt; a work-in-progress and resume the next day.&lt;/li&gt;
  &lt;li&gt;When in doubt about how to properly migrate a piece of code, consult the new swift-evolution &lt;a href=&quot;http://apple.github.io/swift-evolution/&quot;&gt;proposal status page&lt;/a&gt; to find the corresponding proposal. In the &lt;em&gt;Implemented for Swift 3&lt;/em&gt; section, you’ll find all of the proposals that have been implemented for Swift 3. Note that not all of these may be in the current beta yet.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;bugs&quot;&gt;Bugs&lt;/h3&gt;

&lt;p&gt;Xcode’s migration tool is not perfect. 😱 It would sometimes fail to migrate test targets, or only partially migrate app and framework targets. When this happens, you can attempt to run the tool again, but it’s probably best to make changes manually. Here are some of the specific issues that I saw:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some expressions inside of &lt;code class=&quot;highlighter-rouge&quot;&gt;XCTAssert*()&lt;/code&gt; did not migrate.&lt;/li&gt;
  &lt;li&gt;Some expressions inside closures did not migrate.&lt;/li&gt;
  &lt;li&gt;Sometimes &lt;code class=&quot;highlighter-rouge&quot;&gt;waitForExpectations(timeout:)&lt;/code&gt; did not migrate.&lt;/li&gt;
  &lt;li&gt;Migrating &lt;code class=&quot;highlighter-rouge&quot;&gt;NSIndexPath&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;IndexPath&lt;/code&gt; when used in certain contexts often resulted in derpy things like &lt;code class=&quot;highlighter-rouge&quot;&gt;(indexPath as! NSIndexPath).section&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Enums with associated &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDate&lt;/code&gt; values migrated to &lt;code class=&quot;highlighter-rouge&quot;&gt;case myCase(Foundation.Date)&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;case myCase(Date)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Sometimes &lt;code class=&quot;highlighter-rouge&quot;&gt;optional&lt;/code&gt; protocol methods did not migrate, which can produce hard-to-find bugs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Migrating Swift code is as fun as fixing your CI servers for the &lt;em&gt;Nth&lt;/em&gt; time and as exciting as waiting for an hours-long test suite to run on your local machine. Even &lt;a href=&quot;https://xkcd.com/303/&quot;&gt;waiting for your code to compile&lt;/a&gt; is probably more fun than migrating to Swift 3. 😄 When you first see all the changes and errors that the migrator produces, it will be cognitive overload. It’s a lot to absorb at once. You can always find comfort in &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset --HARD&lt;/code&gt;, but you will have to migrate eventually. And when you finish, you’ll feel great.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This weekend&lt;/em&gt; I got to spend my time writing Swift 3.0 code — not migrating it — and it was awesome.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Swift 3 sherlocked my library</title>
      <subtitle>Many of our "Swifty" wrappers are no longer necessary</subtitle>
      <link href="http://localhost:4000/blog/swift-3-sherlocked-my-libraries/" />
      <id>http://localhost:4000/blog/swift-3-sherlocked-my-libraries</id>

      <published>2016-07-03T00:00:00+00:00</published>
      
      <updated>2016-07-03T00:00:00+00:00</updated>
      

      <summary><p>What’s my favorite thing about Swift 3? Not maintaining third-party libraries that make Cocoa more “Swifty”.
Swift 3 <a href="http://www.urbandictionary.com/define.php?term=sherlocked">sherlocked</a> my libraries, and I couldn’t be happier.</p>

</summary>
      <content type="html">&lt;p&gt;What’s my favorite thing about Swift 3? Not maintaining third-party libraries that make Cocoa more “Swifty”.
Swift 3 &lt;a href=&quot;http://www.urbandictionary.com/define.php?term=sherlocked&quot;&gt;sherlocked&lt;/a&gt; my libraries, and I couldn’t be happier.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;deprecated&quot;&gt;Deprecated&lt;/h3&gt;

&lt;p&gt;Among the many improvements included in Swift 3 are the &lt;em&gt;Swifty&lt;/em&gt; API refinements to Foundation and libdispatch.&lt;/p&gt;

&lt;p&gt;I have two Swift libraries that I’m officially deprecating today. The first is &lt;a href=&quot;https://github.com/jessesquires/JSQNotificationObserverKit&quot;&gt;JSQNotificationObserverKit&lt;/a&gt; which provided a generic &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification&lt;/code&gt; struct to wrap the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSNotificationCenter_Class/index.html&quot;&gt;NSNotification&lt;/a&gt; APIs. It was sherlocked by proposal &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0069-swift-mutability-for-foundation.md&quot;&gt;SE-0069&lt;/a&gt;: &lt;em&gt;Mutability and Foundation Value Types&lt;/em&gt;. The second is &lt;a href=&quot;https://github.com/jessesquires/GrandSugarDispatch&quot;&gt;GrandSugarDispatch&lt;/a&gt; which provided &lt;em&gt;Swifty&lt;/em&gt; syntactic sugar for &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/&quot;&gt;Grand Central Dispatch&lt;/a&gt; (GCD). It was sherlocked by proposal &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0088-libdispatch-for-swift3.md&quot;&gt;SE-0088&lt;/a&gt;: &lt;em&gt;Modernize libdispatch for Swift 3 naming conventions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As expected, there a few differences between my libraries and what Apple now provides. In particular, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification&lt;/code&gt; struct in Foundation is not generic. However, the differences are not significant enough to justify keeping my libraries around. Plus, as stated in SE-0069, it is much better for the community to have one canonical API whenever possible:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We know from our experience with Swift so far that if we do not provide these value types then others will, often by wrapping our types. It would be better if we provide one canonical API for greater consistency across all Swift code. This is, after all, the purpose of the Foundation framework.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These libraries served their purpose during the pre-Swift 3 era — before &lt;a href=&quot;https://swift.org/blog/swift-api-transformation/&quot;&gt;&lt;em&gt;The Great API Transformation&lt;/em&gt;&lt;/a&gt;. But I’m ultimately very happy to see them go. In situations like this, it feels good to get sherlocked. It means that Apple are taking on this responsibility — it &lt;em&gt;shows us&lt;/em&gt; once more that the Core Team are listening to the community and responding with solutions.&lt;/p&gt;

&lt;p&gt;The more we can agree and settle on canonical APIs and libraries, the better it will be for all of us. Do you have any libraries that have been obsoleted by Swift 3? If so, deprecate them now then sit back and relax. 😄&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>The A5 is dead (almost)</title>
      <subtitle>iOS 10 drops support for A5 devices</subtitle>
      <link href="http://localhost:4000/blog/the-a5-is-dead/" />
      <id>http://localhost:4000/blog/the-a5-is-dead</id>

      <published>2016-06-14T00:00:00+00:00</published>
      
      <updated>2016-06-14T00:00:00+00:00</updated>
      

      <summary><p>As developers, we’ve been <a href="http://arstechnica.com/apple/2015/09/ios-9-on-the-ipad-2-not-worse-than-ios-8-but-missing-many-features/">lamenting</a> the continued existence of the inferior <a href="https://en.wikipedia.org/wiki/Apple_A5">A5 system-on-a-chip</a> for the past couple of years. Both <a href="https://en.wikipedia.org/wiki/IOS_8">iOS 8</a> and <a href="https://en.wikipedia.org/wiki/IOS_9">iOS 9</a> continued to support <em>iPhone 4S, iPad 2, and iPad Mini 1</em> — devices that struggled to run the OS itself. I had hoped that iOS 9 would finally drop support for these less powerful devices, but it didn’t. Today, we can finally <a href="http://arstechnica.com/apple/2016/06/goodbye-a5-ios-10-ends-support-for-iphone-4s-ipad-2-and-more/">say goodbye</a> to the A5. Well, almost.</p>

</summary>
      <content type="html">&lt;p&gt;As developers, we’ve been &lt;a href=&quot;http://arstechnica.com/apple/2015/09/ios-9-on-the-ipad-2-not-worse-than-ios-8-but-missing-many-features/&quot;&gt;lamenting&lt;/a&gt; the continued existence of the inferior &lt;a href=&quot;https://en.wikipedia.org/wiki/Apple_A5&quot;&gt;A5 system-on-a-chip&lt;/a&gt; for the past couple of years. Both &lt;a href=&quot;https://en.wikipedia.org/wiki/IOS_8&quot;&gt;iOS 8&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/IOS_9&quot;&gt;iOS 9&lt;/a&gt; continued to support &lt;em&gt;iPhone 4S, iPad 2, and iPad Mini 1&lt;/em&gt; — devices that struggled to run the OS itself. I had hoped that iOS 9 would finally drop support for these less powerful devices, but it didn’t. Today, we can finally &lt;a href=&quot;http://arstechnica.com/apple/2016/06/goodbye-a5-ios-10-ends-support-for-iphone-4s-ipad-2-and-more/&quot;&gt;say goodbye&lt;/a&gt; to the A5. Well, almost.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/a5-chip.jpg&quot; title=&quot;A5 SoC&quot; alt=&quot;A5 SoC&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ios-10&quot;&gt;iOS 10&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.apple.com/ios/ios10-preview/&quot;&gt;iOS 10&lt;/a&gt; has dropped support for these older A5-powered devices — a reason for celebration. However, most developers support &lt;em&gt;at least&lt;/em&gt; the two most recent versions of iOS, per Apple’s recommendations. This means we’ll been writing modern apps on modern OSes for 6-year-old or 7-year-old devices, depending on when you drop support for iOS 9. But the good news is, once you &lt;em&gt;are&lt;/em&gt; ready to drop iOS 9 support in your app, you can say goodbye to the A5 forever. Oh, and you can also say goodbye to 3.5-inch screen sizes. Rejoice.&lt;/p&gt;

&lt;p&gt;According to Apple’s &lt;a href=&quot;http://www.apple.com/newsroom/2016/06/apple-previews-ios-10-biggest-ios-release-ever.html&quot;&gt;press release&lt;/a&gt;, here are the &lt;strong&gt;oldest&lt;/strong&gt; devices that will run iOS 10:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/IPhone_5&quot;&gt;iPhone 5(c)&lt;/a&gt;, A6 (2012)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/IPod_Touch_%286th_generation%29&quot;&gt;iPod Touch 6&lt;/a&gt;, A8 (2015)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/IPad_Mini_2&quot;&gt;iPad Mini 2&lt;/a&gt;, A7 (2013)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/IPad_%284th_generation%29&quot;&gt;iPad 4&lt;/a&gt;, A6X (2012)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This leaves us with a new baseline of the 32-bit &lt;a href=&quot;https://en.wikipedia.org/wiki/Apple_A6&quot;&gt;A6 SoC&lt;/a&gt;. This is better for the moment, but the A6 already 4 years old. If iOS 11 continues to support the A6, then we’ll likely return to the situation where the software has substantially out-paced the hardware. Again, we’ll have sluggish devices that probably shouldn’t be running the latest OS in the first place. Again, we’ll be supporting 6-year-old hardware. But, maybe it won’t be so bad.&lt;/p&gt;

&lt;p&gt;Of course, when the day comes to drop the A6 we can say goodbye to 32-bit CPUs on iOS, and that will be great.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;text-muted&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; I realize that perhaps 6 years isn’t &lt;i&gt;that old&lt;/i&gt; for other platforms, but iOS moves so fast.&lt;/span&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Avoiding the overuse of @objc in Swift</title>
      <subtitle>Don't let Objective-C cramp your style</subtitle>
      <link href="http://localhost:4000/blog/avoiding-objc-in-swift/" />
      <id>http://localhost:4000/blog/avoiding-objc-in-swift</id>

      <published>2016-06-04T00:00:00+00:00</published>
      
      <updated>2016-06-04T00:00:00+00:00</updated>
      

      <summary><p>A few days ago I was (finally!) updating a project to use Swift 2.2 and I ran into a few issues when converting to use the new <code class="highlighter-rouge">#selector</code> syntax introduced by proposal <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md">SE-0022</a>. If using <code class="highlighter-rouge">#selector</code> from within a protocol extension, that protocol must be declared as <code class="highlighter-rouge">@objc</code>. The former <code class="highlighter-rouge">Selector("method:")</code> syntax did not have this requirement.</p>

</summary>
      <content type="html">&lt;p&gt;A few days ago I was (finally!) updating a project to use Swift 2.2 and I ran into a few issues when converting to use the new &lt;code class=&quot;highlighter-rouge&quot;&gt;#selector&lt;/code&gt; syntax introduced by proposal &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md&quot;&gt;SE-0022&lt;/a&gt;. If using &lt;code class=&quot;highlighter-rouge&quot;&gt;#selector&lt;/code&gt; from within a protocol extension, that protocol must be declared as &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt;. The former &lt;code class=&quot;highlighter-rouge&quot;&gt;Selector(&quot;method:&quot;)&lt;/code&gt; syntax did not have this requirement.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;configuring-view-controllers-with-protocol-extensions&quot;&gt;Configuring view controllers with protocol extensions&lt;/h3&gt;

&lt;p&gt;For the purposes of this post, I’ve simplified the code from the project I’m working on, but all of the core ideas remain. One pattern I’ve been using a lot in Swift is writing protocols and extensions for reusable configurations, especially with UIKit.&lt;/p&gt;

&lt;p&gt;Suppose we have a group of view controllers that all need a view model and a “cancel” button. Each controller needs to be able to execute its own code when “cancel” is tapped. We may write something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewControllerType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didTapCancelButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIBarButtonItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we stopped here, then each controller would have to add and wire up its own cancel button. That ends up being a lot of boilerplate. We can fix that with an extension (using the old &lt;code class=&quot;highlighter-rouge&quot;&gt;Selector(&quot;&quot;)&lt;/code&gt; syntax):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewControllerType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configureNavigationItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;navigationItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftBarButtonItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIBarButtonItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;barButtonSystemItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;didTapCancelButton:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now each controller that conforms to this protocol can call &lt;code class=&quot;highlighter-rouge&quot;&gt;configureNavigationItem()&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt;, which is much better. Our controller might look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewControllerType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;configureNavigationItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didTapCancelButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIBarButtonItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// handle tap&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is rather simple, but you can imagine more complex configurations that we could apply using this strategy.&lt;/p&gt;

&lt;p&gt;After updating the snippet above for Swift 2.2, we have the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewControllerType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configureNavigationItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;navigationItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftBarButtonItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIBarButtonItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;barButtonSystemItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;didTapCancelButton(_:)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And now we have a problem, a new compiler error.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Argument of &lt;span class=&quot;s1&quot;&gt;'#selector'&lt;/span&gt; refers to a method that is not exposed to Objective-C.

Fix-it   Add &lt;span class=&quot;s1&quot;&gt;'@objc'&lt;/span&gt; to expose this method to Objective-C&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;when-objc-tries-to-ruin-everything&quot;&gt;When &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; tries to ruin everything&lt;/h3&gt;

&lt;p&gt;We cannot simply add &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; to this method in the original &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewControllerType&lt;/code&gt; protocol for a number of reasons. If we do, then the entire protocol needs to be marked &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt;, which means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Any protocols from which this one inherits need to be marked &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Any protocols that &lt;em&gt;inherit from&lt;/em&gt; this one are now automatically &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We’re using structs (the &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;) in the protocol which cannot be expressed in Objective-C.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Until this point, the only occurrences of &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; in this code base were confined to normal target-action selectors. We may not be writing &lt;em&gt;Pure Swift&lt;sup&gt;TM&lt;/sup&gt;&lt;/em&gt; apps yet since it’s still &lt;a href=&quot;http://inessential.com/2016/05/25/oldie_complains_about_the_old_old_ways&quot;&gt;Cocoa all the way down&lt;/a&gt;, but we can still take advantage of many of Swift’s powerful features — unless we start introducing &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; in too many places.&lt;/p&gt;

&lt;p&gt;Our example here is simple, but imagine a much more complex object graph that makes heavy use of Swift’s value types and a hierarchy of three protocols with this one in the middle. Introducing &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; as the fix-it suggests would &lt;em&gt;break the entire world&lt;/em&gt; in our app. If we let it, the tyranny of &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; will expel all beauty from our Swift code and make everything horrible. It will ruin everything.&lt;/p&gt;

&lt;p&gt;But there’s hope.&lt;/p&gt;

&lt;h3 id=&quot;stop-objc-from-making-everything-horrible&quot;&gt;Stop &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; from making everything horrible&lt;/h3&gt;

&lt;p&gt;We do not have to let &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; proliferate our code base and transform our Swift code into merely “Objective-C with a new syntax”.&lt;/p&gt;

&lt;p&gt;We can decompose this protocol by separating out all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; code into its own protocol. Then, we can use protocol composition to reunite them. In fact, we can make the compiler happy and avoid changing &lt;em&gt;any&lt;/em&gt; of our view controller code.&lt;/p&gt;

&lt;p&gt;First we split up the protocol into two protocols, &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModelConfigurable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationItemConfigurable&lt;/code&gt;. Our previous extension on &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewControllerType&lt;/code&gt; can move to &lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationItemConfigurable&lt;/code&gt; instead.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewModelConfigurable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NavigationItemConfigurable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didTapCancelButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIBarButtonItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NavigationItemConfigurable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configureNavigationItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;navigationItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftBarButtonItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIBarButtonItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;barButtonSystemItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;didTapCancelButton(_:)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we can define our original &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewControllerType&lt;/code&gt; protocol as a &lt;code class=&quot;highlighter-rouge&quot;&gt;typealias&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewControllerType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ViewModelConfigurable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NavigationItemConfigurable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now everything works exactly as it did before migrating to Swift 2.2 and our original view controller definition above does not have to change. Nothing is ruined. If you ever face a similar situation, or if you generally want to contain the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; (&lt;em&gt;which you should&lt;/em&gt;), then I highly recommend adopting this strategy.&lt;/p&gt;

&lt;h3 id=&quot;its-not-always-obvious&quot;&gt;It’s not always obvious&lt;/h3&gt;

&lt;p&gt;Looking at this now, I think “duh”, of course this is the best and “most Swifty” answer to the problem. However, a solution like this is not always immediately clear when Xcode suddenly starts yelling at you and quickly applying the fix-its starts breaking &lt;em&gt;everything else&lt;/em&gt; — especially when Xcode’s fix-its are usually what you want when migrating Swift versions.&lt;/p&gt;

&lt;p&gt;Lastly, after making this change I realized it’s actually a much better solution in general. There was no reason for this to be a single protocol in the first place. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModelConfigurable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationItemConfigurable&lt;/code&gt; protocols have distinct responsibilities. Protocol composition was the most elegant and appropriate design all along.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Open source everything</title>
      <subtitle>Getting meaningful contributions to move your projects forward</subtitle>
      <link href="http://localhost:4000/blog/open-source-everything/" />
      <id>http://localhost:4000/blog/open-source-everything</id>

      <published>2016-05-22T00:00:00+00:00</published>
      
      <updated>2016-05-22T00:00:00+00:00</updated>
      

      <summary><p>I recently had an incredible experience with one of my open source projects that I’d like to share. It’s a story of openness and collaboration that I hope other open source project maintainers will find valuable. This post continues the theme of “building successful open source projects” from my <a href="/swift-documentation/">previous article</a> on documentation.</p>

</summary>
      <content type="html">&lt;p&gt;I recently had an incredible experience with one of my open source projects that I’d like to share. It’s a story of openness and collaboration that I hope other open source project maintainers will find valuable. This post continues the theme of “building successful open source projects” from my &lt;a href=&quot;/swift-documentation/&quot;&gt;previous article&lt;/a&gt; on documentation.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;the-story&quot;&gt;The story&lt;/h3&gt;

&lt;p&gt;A couple of weeks ago, I released the fourth major version of &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit/releases/tag/4.0.0&quot;&gt;JSQCoreDataKit&lt;/a&gt;. This release contained a number of improvements and breaking changes — a redesigned Core Data stack and a lot of refactoring to bring the library in line with the latest &lt;a href=&quot;https://swift.org/documentation/api-design-guidelines/&quot;&gt;Swift API Guidelines&lt;/a&gt;. It was a big step forward for the library and &lt;strong&gt;I barely wrote any code&lt;/strong&gt; for this release. That’s right. &lt;a href=&quot;http://code-craftsman.fr/about/&quot;&gt;Sébastien Duperron&lt;/a&gt; (&lt;a href=&quot;https://github.com/Liquidsoul&quot;&gt;&lt;strong&gt;@Liquidsoul&lt;/strong&gt;&lt;/a&gt;) pretty much completed the entire release for me. All I had to do was review and merge his &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit/pulls?q=is%3Apr+author%3ALiquidsoul+is%3Aclosed&quot;&gt;pull requests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The release was seamless and free of regressions. So, how did we do this?&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/success_release.jpg&quot; title=&quot;No regressions&quot; alt=&quot;No regressions&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-other-kind-of-documentation&quot;&gt;The &lt;em&gt;other&lt;/em&gt; kind of documentation&lt;/h3&gt;

&lt;p&gt;The success of this release was the result of a number of attributes about this project:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It has &lt;a href=&quot;http://www.jessesquires.com/JSQCoreDataKit/&quot;&gt;100% API documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;It has &lt;a href=&quot;https://codecov.io/gh/jessesquires/JSQCoreDataKit&quot;&gt;96% test coverage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;It has &lt;a href=&quot;https://travis-ci.org/jessesquires/JSQCoreDataKit&quot;&gt;continuous integration&lt;/a&gt; with Travis CI&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit/issues?utf8=✓&amp;amp;q=is%3Aissue&quot;&gt;All issues&lt;/a&gt; are organized, labeled, and clearly explained&lt;/li&gt;
  &lt;li&gt;Each release has a corresponding &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit/milestones?state=closed&quot;&gt;milestone&lt;/a&gt; that groups the issues going into it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Collectively, &lt;em&gt;all&lt;/em&gt; of these things serve as &lt;em&gt;documentation&lt;/em&gt; — not just the API documentation itself. By keeping a project organized in this fashion, you can empower &lt;em&gt;anyone&lt;/em&gt; to easily and successfully contribute.&lt;/p&gt;

&lt;p&gt;With excellent API documentation and test coverage, contributors can fix bugs and add features without worrying about breaking something. Together, the docs and tests provide the complete picture for how your APIs should behave. Continuous integration keeps this in check by regularly running tests for each change, and notifying you of any regressions in test failures or test coverage. Once &lt;a href=&quot;https://travis-ci.org/jessesquires/JSQCoreDataKit&quot;&gt;travis-ci&lt;/a&gt; and &lt;a href=&quot;https://codecov.io/gh/jessesquires/JSQCoreDataKit&quot;&gt;codecov.io&lt;/a&gt; were green for each pull request, I was &lt;strong&gt;certain&lt;/strong&gt; that it was safe to merge. To me, this is the most liberating feeling in software development.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/tests_pass.jpg&quot; title=&quot;All tests pass&quot; alt=&quot;All tests pass&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;transparency-via-issues-and-milestones&quot;&gt;Transparency via issues and milestones&lt;/h3&gt;

&lt;p&gt;I work diligently to keep issues &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit/labels&quot;&gt;labeled&lt;/a&gt; and grouped in &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit/milestones?state=closed&quot;&gt;milestones&lt;/a&gt;. I try to explain a task as clearly as possible, so that anyone could read it and know what to do. I open issues for &lt;strong&gt;everything&lt;/strong&gt; — bugs, features, todo items, refactors, future work, random ideas, and anything else. For me, issues serve not only as a way to track work for a project, but to communicate with the open source community about where I want to take a project. I also use issues as reminders for myself, and as forums for discussions or questions.&lt;/p&gt;

&lt;p&gt;Milestones allow the community to clearly see the changes made in past, present, and future releases. Using milestones also makes it easier to write a &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit/blob/develop/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt; for each release.&lt;/p&gt;

&lt;p&gt;With all of the above, the project becomes entirely transparent. The community knows everything that I know. Discussions on design decisions are open source, questions and their answers are open source — &lt;strong&gt;nothing is a secret&lt;/strong&gt;. Everyone has all of the information they need to take an issue to work on and submit a pull request for it, and they can be confident in their changes because of &lt;a href=&quot;https://travis-ci.org/jessesquires/JSQCoreDataKit&quot;&gt;travis-ci&lt;/a&gt; and &lt;a href=&quot;https://codecov.io/gh/jessesquires/JSQCoreDataKit&quot;&gt;codecov.io&lt;/a&gt;. I believe this kind of transparency is the foundation of successful open source projects.&lt;/p&gt;

&lt;h3 id=&quot;easier-said-than-done&quot;&gt;Easier said than done&lt;/h3&gt;

&lt;p&gt;So that’s what happened. Sébastien was able to synthesize and navigate all of the information and resources on GitHub, and submit a pull request for each issue for the &lt;code class=&quot;highlighter-rouge&quot;&gt;4.0.0&lt;/code&gt; release of JSQCoreDataKit. We had some discussion and I made few gardening passes to clean up some documentation and formatting, but I mostly sat back and watched. I cannot express how thankful I am for his contributions, and how much time he saved me. The upfront cost of writing tests and docs, and keeping the project extremely organized paid off.&lt;/p&gt;

&lt;p&gt;Finally, I must admit that everything I have outlined here is much easier said than done. Keeping documentation and test coverage at or near 100 percent is challenging. Keeping GitHub issues, milestones, and pull requests organized is challenging. It takes time and effort to maintain any open source project, no matter how big or small it might be. But if you do these things then the future of your project will be bright, and the cost of maintaining it will diminish dramatically. You’ll find it easier to merge pull requests and release new versions faster.&lt;/p&gt;

&lt;p&gt;Remember, &lt;em&gt;writing the actual code is only &lt;strong&gt;half&lt;/strong&gt; of the work.&lt;/em&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Swift documentation</title>
      <subtitle>Writing, generating, and publishing great docs in Swift</subtitle>
      <link href="http://localhost:4000/blog/swift-documentation/" />
      <id>http://localhost:4000/blog/swift-documentation</id>

      <published>2016-05-20T00:00:00+00:00</published>
      
      <updated>2016-05-20T00:00:00+00:00</updated>
      

      <summary><p>The Swift community is ecstatic about Swift. There are so many new libraries being released each week that some have created <a href="https://swiftmodules.com">package indexes</a> — even <a href="https://developer.ibm.com/swift/products/package-catalog/">IBM</a>. But of course, a library is only as great as its documentation.</p>

</summary>
      <content type="html">&lt;p&gt;The Swift community is ecstatic about Swift. There are so many new libraries being released each week that some have created &lt;a href=&quot;https://swiftmodules.com&quot;&gt;package indexes&lt;/a&gt; — even &lt;a href=&quot;https://developer.ibm.com/swift/products/package-catalog/&quot;&gt;IBM&lt;/a&gt;. But of course, a library is only as great as its documentation.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;successful-open-source-projects&quot;&gt;Successful open source projects&lt;/h3&gt;

&lt;p&gt;With open source, I’ve learned that if you want to encourage adoption of your library, then you need a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A great library that solves a real problem for developers (of course!)&lt;/li&gt;
  &lt;li&gt;You need to build an open and supportive community around your project&lt;/li&gt;
  &lt;li&gt;Write excellent documentation that’s easily accessible&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you look at any popular project (even outside of the Swift/Objective-C/Cocoa community), you’ll find these common attributes. See &lt;a href=&quot;https://github.com/Alamofire/Alamofire&quot;&gt;Alamofire&lt;/a&gt;, &lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;, and &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController&quot;&gt;JSQMessagesViewController&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post will focus on the third item in that list above — documentation. First, we’ll look at each step of creating documentation and then I’ll share my complete workflow.&lt;/p&gt;

&lt;h3 id=&quot;writing-docs&quot;&gt;Writing docs&lt;/h3&gt;

&lt;p&gt;Writing clear, understandable documentation is not easy to learn and it’s more difficult to explain. The best way to learn write documentation is to &lt;em&gt;read&lt;/em&gt; documentation. If writing a library for iOS, allow the &lt;a href=&quot;https://developer.apple.com/library/ios/navigation/&quot;&gt;iOS documentation&lt;/a&gt; to guide you. If writing a library in Swift, allow the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Reference/SwiftStandardLibraryReference/&quot;&gt;Swift documentation&lt;/a&gt; to guide you. How do &lt;em&gt;those&lt;/em&gt; authors explain certain concepts or parameter values? Search for APIs that are similar to the ones you have written for your library, and begin writing by mimicking others — whether that’s Apple or other open source authors. Iterate until you arrive at something that unambiguously explains your API.&lt;/p&gt;

&lt;p&gt;Here’s an example from &lt;a href=&quot;http://cocoadocs.org/docsets/JSQMessagesViewController/7.2.0/Protocols/JSQMessagesCollectionViewDataSource.html#//api/name/collectionView:messageDataForItemAtIndexPath:&quot;&gt;JSQMessagesViewController&lt;/a&gt;. It’s not Swift, but it illustrates these ideas.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**
 *  Asks the data source for the message data that corresponds to the specified item at indexPath in the collectionView.
 *
 *  @param collectionView The collection view requesting this information.
 *  @param indexPath      The index path that specifies the location of the item.
 *
 *  @return An initialized object that conforms to the `JSQMessageData` protocol. You must not return `nil` from this method.
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSQMessageData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSQMessagesCollectionView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;messageDataForItemAtIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This reads very similarly to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDataSource&lt;/code&gt; method &lt;code class=&quot;highlighter-rouge&quot;&gt;- collectionView: cellForItemAtIndexPath:&lt;/code&gt;. It follows the precedent set by UIKit, not only in terms of the API design but also the documentation. Doing this allows your library to feel natural and familiar to users.&lt;/p&gt;

&lt;p&gt;After enough imitation, you’ll eventually find your own voice and get enough experience that you won’t need to reference others’ documentation in order to write your own. Writing documentation will begin to flow naturally. It might even be fun! 😉&lt;/p&gt;

&lt;p&gt;Also, strive to provide &lt;a href=&quot;https://twitter.com/orta/status/471009574276050944&quot;&gt;100% coverage&lt;/a&gt;. This is relatively easy to do. It’s much easier than having 100% test coverage, for example. It’s something to be proud of, and it will make you and your library feel complete.&lt;/p&gt;

&lt;p&gt;One final tip — use &lt;a href=&quot;https://github.com/onevcat&quot;&gt;Wei Wang&lt;/a&gt;’s plug-in, &lt;a href=&quot;https://github.com/onevcat/VVDocumenter-Xcode&quot;&gt;VVDocumenter-Xcode&lt;/a&gt;. This Xcode plug-in will generate the doc comment templates for you. All you have to do is type &lt;code class=&quot;highlighter-rouge&quot;&gt;///&lt;/code&gt; above any method or class and then fill-in the docs.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/feels_good_docs.jpg&quot; title=&quot;100% docs&quot; alt=&quot;100% docs&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;generating-docs&quot;&gt;Generating docs&lt;/h3&gt;

&lt;p&gt;By far, the best way to generate docs for Swift (and Objective-C!) libraries is by using Realm’s &lt;a href=&quot;https://github.com/realm/jazzy&quot;&gt;jazzy&lt;/a&gt; — &lt;em&gt;Soulful docs for Swift and Objective-C&lt;/em&gt;. It’s an amazing project and one of my favorite open source tools, maintained by &lt;a href=&quot;https://github.com/jpsim&quot;&gt;JP Simard&lt;/a&gt; and &lt;a href=&quot;https://github.com/segiddins&quot;&gt;Samuel Giddins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once installed, just run &lt;code class=&quot;highlighter-rouge&quot;&gt;jazzy&lt;/code&gt; from the command line with a few configuration parameters and you’ll have beautifully generated docs in seconds. The &lt;a href=&quot;https://github.com/realm/jazzy/blob/master/README.md&quot;&gt;README&lt;/a&gt; has all of the details, but here’s an example from &lt;a href=&quot;https://github.com/jessesquires/PresenterKit&quot;&gt;PresenterKit&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jazzy --swift-version 2.2 -o ./ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      --source-directory PresenterKit/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      --readme PresenterKit/README.md &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -a &lt;span class=&quot;s1&quot;&gt;'Jesse Squires'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -u &lt;span class=&quot;s1&quot;&gt;'https://twitter.com/jesse_squires'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -m &lt;span class=&quot;s1&quot;&gt;'PresenterKit'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -g &lt;span class=&quot;s1&quot;&gt;'https://github.com/jessesquires/PresenterKit'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You need to specify a version of Swift, tell jazzy where your source code is, and provide some basic author information. It couldn’t be easier. Run &lt;code class=&quot;highlighter-rouge&quot;&gt;jazzy --help&lt;/code&gt; to see all of the possible usage options.&lt;/p&gt;

&lt;h3 id=&quot;publishing-docs&quot;&gt;Publishing docs&lt;/h3&gt;

&lt;p&gt;Publishing is the final piece to this puzzle. If you are distributing your library with CocoaPods, then you’ll get &lt;a href=&quot;http://cocoadocs.org&quot;&gt;CocoaDocs&lt;/a&gt; for free. Thanks &lt;a href=&quot;https://twitter.com/orta&quot;&gt;Orta&lt;/a&gt;! Note that CocoaDocs uses jazzy for Swift pods.&lt;/p&gt;

&lt;p&gt;However, with &lt;a href=&quot;https://developer.ibm.com/swift/&quot;&gt;server-side Swift&lt;/a&gt; or projects that do not use CocoaPods you’ll need another solution. Even the &lt;a href=&quot;https://github.com/apple/swift-package-manager&quot;&gt;Swift Package Manager&lt;/a&gt; does not provide any solutions for documentation. The best solution I’ve found for publishing is &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt;. All you need to do is create an orphan branch in git named &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;, push some html or markdown using &lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;, and your site will be published at &lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io/repository&lt;/code&gt;. (In fact, &lt;a href=&quot;https://github.com/jessesquires/jessesquires.github.io&quot;&gt;this site&lt;/a&gt; is hosted on GitHub pages and created using Jekyll.) What I like most about using GitHub Pages for docs is that it keeps everything contained within a single repository. So you not only have version control for your source code, but also for your documentation.&lt;/p&gt;

&lt;p&gt;But if your source code and docs live in separate disjoint branches, then how do you coordinate between them to keep your docs up-to-date? That’s what we’ll discuss next.&lt;/p&gt;

&lt;p class=&quot;text-muted&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; Even though CocoaDocs provides docs for free, I still prefer using jazzy and GitHub Pages in addition to this. One small shortcoming of CocoaDocs is the inability to update documentation independent of a version release. Suppose you release &lt;code&gt;v1.0&lt;/code&gt; of your library and then discover errors in your documentation. To update CocoaDocs, you'll need to push another version, say &lt;code&gt;v1.0.1&lt;/code&gt;, to CocoaPods. In any case, it's nice to have documentation in both places. Whether a user discovers your library via GitHub or CocoaPods, the docs are right there.&lt;/p&gt;

&lt;h3 id=&quot;complete-workflow&quot;&gt;Complete workflow&lt;/h3&gt;

&lt;p&gt;We’ve covered writing, generating, and publishing. Now let’s find out how we can coordinate these into a seamless, mostly automated workflow. I’ll share how I set this up for all of my libraries. We’ll use &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit&quot;&gt;JSQCoreDataKit&lt;/a&gt; as an example.&lt;/p&gt;

&lt;h4 id=&quot;branches&quot;&gt;Branches&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit&quot;&gt;develop&lt;/a&gt; branch contains the library, an example app, a readme, and other supporting files like the &lt;code class=&quot;highlighter-rouge&quot;&gt;.podspec&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit/tree/gh-pages&quot;&gt;gh-pages&lt;/a&gt; branch only contains documentation and scripts for generating it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;directories&quot;&gt;Directories&lt;/h4&gt;

&lt;p&gt;On my machine I checkout the repo &lt;em&gt;twice&lt;/em&gt;. One checkout for both the &lt;em&gt;develop&lt;/em&gt; and &lt;em&gt;gh-pages&lt;/em&gt; branches.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/GitHub/JSQCoreDataKit&lt;/code&gt; is the checkout for &lt;em&gt;develop&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/GitHub-Pages/JSQCoreDataKit&lt;/code&gt; is the checkout for &lt;em&gt;gh-pages&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This setup allows me to more easily develop and write docs, and quickly build and preview the generated docs. Constantly having to switch branches would cause a lot of churn, since the &lt;em&gt;gh-pages&lt;/em&gt; branch doesn’t contain the library source.&lt;/p&gt;

&lt;h4 id=&quot;submodules&quot;&gt;Submodules&lt;/h4&gt;

&lt;p&gt;This is where it all comes together. On the &lt;em&gt;gh-pages&lt;/em&gt; branch, I add the &lt;em&gt;develop&lt;/em&gt; branch of the library as a &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Submodules&quot;&gt;git submodule&lt;/a&gt;. By running &lt;code class=&quot;highlighter-rouge&quot;&gt;git submodule update&lt;/code&gt;, the &lt;em&gt;gh-pages&lt;/em&gt; branch can pull in the library source without including it in the git history. Now, we can run &lt;code class=&quot;highlighter-rouge&quot;&gt;jazzy&lt;/code&gt; from the root directory of the &lt;em&gt;gh-pages&lt;/em&gt; checkout and provide the submodule directory as the &lt;code class=&quot;highlighter-rouge&quot;&gt;--source-directory&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;automation&quot;&gt;Automation&lt;/h4&gt;

&lt;p&gt;On the &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit/tree/gh-pages&quot;&gt;gh-pages&lt;/a&gt; branch of &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit&quot;&gt;JSQCoreDataKit&lt;/a&gt;, you’ll find two small bash scripts.&lt;/p&gt;

&lt;p&gt;The first is &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit/blob/gh-pages/build_docs.sh&quot;&gt;build_docs.sh&lt;/a&gt;, which will update the submodule and build the docs. These can then be previewed in Safari by opening &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git submodule update --remote

jazzy --swift-version 2.2 -o ./ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      --source-directory JSQCoreDataKit/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      --readme JSQCoreDataKit/README.md &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -a &lt;span class=&quot;s1&quot;&gt;'Jesse Squires'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -u &lt;span class=&quot;s1&quot;&gt;'https://twitter.com/jesse_squires'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -m &lt;span class=&quot;s1&quot;&gt;'JSQCoreDataKit'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -g &lt;span class=&quot;s1&quot;&gt;'https://github.com/jessesquires/JSQCoreDataKit'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second is &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit/blob/gh-pages/publish_docs.sh&quot;&gt;publish_docs.sh&lt;/a&gt; which will first call the build script, then push the docs to GitHub.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./build_docs.sh
git add .
git commit -am &lt;span class=&quot;s2&quot;&gt;&quot;auto-update docs&quot;&lt;/span&gt;
git push
git status&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;workflow&quot;&gt;Workflow&lt;/h4&gt;

&lt;p&gt;With all of this in place, updating the documentation for my library is painless. I write code and docs, then push to &lt;em&gt;develop&lt;/em&gt;. Then I switch directories to the &lt;em&gt;gh-pages&lt;/em&gt; checkout and run &lt;code class=&quot;highlighter-rouge&quot;&gt;./publish_docs.sh&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/GitHub/JSQCoreDataKit
&lt;span class=&quot;c&quot;&gt;# write code and docs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# commit&lt;/span&gt;
git push

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/GitHub-Pages/JSQCoreDataKit
./publish_docs.sh &lt;span class=&quot;c&quot;&gt;# update docs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Right now, I prefer running the &lt;code class=&quot;highlighter-rouge&quot;&gt;publish_docs.sh&lt;/code&gt; script manually so that the docs only update when I want them to — for corrections and major releases. However, you could easily do this in the &lt;code class=&quot;highlighter-rouge&quot;&gt;after_success:&lt;/code&gt; step of your &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis-CI&lt;/a&gt; script.&lt;/p&gt;

&lt;p&gt;Here’s the &lt;a href=&quot;http://www.jessesquires.com/JSQCoreDataKit/&quot;&gt;final product&lt;/a&gt; for JSQCoreDataKit.&lt;/p&gt;

&lt;h3 id=&quot;its-easy&quot;&gt;It’s easy&lt;/h3&gt;

&lt;p&gt;Writing, even if technical, is a great way to take a break from coding — which I think we can all agree is a good thing to do. The workflow I’ve outlined above is how I setup &lt;em&gt;all&lt;/em&gt; of my libraries now. When we have the tools that make this &lt;em&gt;so easy&lt;/em&gt;, there are no excuses to not do it!&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Contributing to open source Swift</title>
      <subtitle>Talk at try! Swift conference in Tokyo</subtitle>
      <link href="http://localhost:4000/blog/contributing-to-swift/" />
      <id>http://localhost:4000/blog/contributing-to-swift</id>

      <published>2016-03-21T00:00:00+00:00</published>
      
      <updated>2016-03-21T00:00:00+00:00</updated>
      

      <summary><p>Earlier this month I had the incredible opportunity to speak at the <a href="http://www.tryswiftconf.com/en">try! Swift conference</a> in Tokyo, Japan. 🇯🇵 It was such a fun and rewarding experience. A <a href="https://realm.io/news/tryswift-jesse-squires-contributing-open-source-swift/">video of the talk</a> is now online over at <a href="https://realm.io">Realm’s</a> blog, where it is synced with my <a href="https://speakerdeck.com/jessesquires/contributing-to-open-source-swift">slides</a>. If you have not already seen it, go check it out!</p>

</summary>
      <content type="html">&lt;p&gt;Earlier this month I had the incredible opportunity to speak at the &lt;a href=&quot;http://www.tryswiftconf.com/en&quot;&gt;try! Swift conference&lt;/a&gt; in Tokyo, Japan. 🇯🇵 It was such a fun and rewarding experience. A &lt;a href=&quot;https://realm.io/news/tryswift-jesse-squires-contributing-open-source-swift/&quot;&gt;video of the talk&lt;/a&gt; is now online over at &lt;a href=&quot;https://realm.io&quot;&gt;Realm’s&lt;/a&gt; blog, where it is synced with my &lt;a href=&quot;https://speakerdeck.com/jessesquires/contributing-to-open-source-swift&quot;&gt;slides&lt;/a&gt;. If you have not already seen it, go check it out!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;live-translation&quot;&gt;Live translation&lt;/h3&gt;

&lt;p&gt;One of the most interesting aspects of the conference was that there was live translation between English and Japanese. Most talks were in given in English, but there were at least a couple of talks given in Japanese each day — even some non-native speakers presented in Japanese! 😎 The speakers met with the translation team multiple times to review our slide decks before presenting to ensure top quality. Then attendees were given receivers with earphones, and the translators sat in the back in a cubicle listening and translating. We also had Q&amp;amp;A sessions with speakers and attendees where the translators helped bridge the language barrier. It was awesome. 🎉&lt;/p&gt;

&lt;p&gt;Because of this, you will notice that I’m speaking somewhat slowly during the presentation and pausing often. And so for me personally, it feels a bit awkward when I watch this. Nonetheless, I think the talk was really well received. If you have any feedback, I would love to hear it. &lt;a href=&quot;https://twitter.com/jesse_squires&quot;&gt;Let me know!&lt;/a&gt; 😄&lt;/p&gt;

&lt;p&gt;Also, one part of preparing for the live translation was providing a rough transcript before the conference. You can find all of my talk materials &lt;a href=&quot;https://github.com/jessesquires/talks&quot;&gt;on GitHub&lt;/a&gt;. And as always, Realm’s &lt;a href=&quot;https://realm.io/news/tryswift-jesse-squires-contributing-open-source-swift/&quot;&gt;transcript&lt;/a&gt; of the talk is excellent. 🙌&lt;/p&gt;

&lt;h3 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h3&gt;

&lt;p&gt;I hope that the idea of contributing to open source Swift is more approachable and less overwhelming after you watch this presentation, and I hope you leave feeling inspired to contribute — even something small.&lt;/p&gt;

&lt;p&gt;You &lt;strong&gt;do not&lt;/strong&gt; need to be a compiler expert to have an impact on Swift or any of the various projects, but I think having a high-level understanding of how the Swift compiler works can help situate you within the project and help to define your area of contribution. No matter your what your skill set or experience level are, there is &lt;strong&gt;something&lt;/strong&gt; you can do to make Swift &lt;strong&gt;better&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.apple.com/swift/&quot;&gt;Apple&lt;/a&gt; and &lt;a href=&quot;https://developer.ibm.com/swift/&quot;&gt;IBM&lt;/a&gt; are &lt;em&gt;massively&lt;/em&gt; invested in Swift — it’s the beginning of the next generation of development on Apple platforms, and maybe others. So what will Swift be like in 10 years? We can decide! In fact, we already are. So many community-driven proposals have already been &lt;a href=&quot;https://github.com/apple/swift-evolution#accepted-proposals-for-swift-30&quot;&gt;accepted&lt;/a&gt;. These first few years are the defining moments of Swift — it’s not just about the compiler, but &lt;em&gt;how we write code&lt;/em&gt;, best practices, and the &lt;strong&gt;kind of community that we build&lt;/strong&gt;. Let’s make it awesome.&lt;/p&gt;

&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Do you want to contribute to Swift? Not sure how or where to begin? It can be overwhelming! In this talk we’ll explore the different parts of Swift, see how the various Swift projects are related, discuss the skills you need to get started, and learn the best ways to get your first fix accepted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/jessesquires/contributing-to-open-source-swift&quot;&gt;
&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/try-swift-slides.jpeg&quot; title=&quot;Contributing to open source Swift&quot; alt=&quot;Contributing to open source Swift&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Swifty view controller presenters</title>
      <subtitle>Talk at Realm in San Francisco</subtitle>
      <link href="http://localhost:4000/blog/swifty-presenters/" />
      <id>http://localhost:4000/blog/swifty-presenters</id>

      <published>2016-02-19T00:00:00+00:00</published>
      
      <updated>2016-02-19T00:00:00+00:00</updated>
      

      <summary><p>A few weeks ago, I spoke at <a href="https://realm.io">Realm</a> in San Francisco at the Swift Language User Group (<a href="https://www.meetup.com/swift-language/events/227833264/">#SLUG</a>) meetup. A <a href="https://realm.io/news/slug-jesse-squires-swifty-view-controller-presenters/">video of the talk</a> is now online over at Realm’s blog, where it is synced with my <a href="https://speakerdeck.com/jessesquires/swifty-view-controller-presenters">slides</a>. If you haven’t already seen it, go check it out!</p>

</summary>
      <content type="html">&lt;p&gt;A few weeks ago, I spoke at &lt;a href=&quot;https://realm.io&quot;&gt;Realm&lt;/a&gt; in San Francisco at the Swift Language User Group (&lt;a href=&quot;https://www.meetup.com/swift-language/events/227833264/&quot;&gt;#SLUG&lt;/a&gt;) meetup. A &lt;a href=&quot;https://realm.io/news/slug-jesse-squires-swifty-view-controller-presenters/&quot;&gt;video of the talk&lt;/a&gt; is now online over at Realm’s blog, where it is synced with my &lt;a href=&quot;https://speakerdeck.com/jessesquires/swifty-view-controller-presenters&quot;&gt;slides&lt;/a&gt;. If you haven’t already seen it, go check it out!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h3&gt;

&lt;p&gt;Realm’s &lt;a href=&quot;https://realm.io/news/slug-jesse-squires-swifty-view-controller-presenters/&quot;&gt;transcript&lt;/a&gt; of the talk is excellent. They always do such an amazing job with these posts! 🙌&lt;/p&gt;

&lt;p&gt;This talk examines the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPresentationController&lt;/code&gt; API that was introduced in iOS 8 and explores ideas for making it more &lt;em&gt;swifty&lt;/em&gt;. It isn’t too technical, but these APIs are really interesting to me and can be really powerful. However, I feel like they are often overlooked. (Maybe this is because a lot of developers are still supporting iOS 7?) Where developers could utilize these APIs, they instead opt for view controller containment — which is often more cumbersome.&lt;/p&gt;

&lt;p&gt;I’m formalizing these ideas from the talk (and possibly more!) in a new framework — &lt;a href=&quot;https://github.com/jessesquires/PresenterKit&quot;&gt;PresenterKit&lt;/a&gt;. It is not quite finished, but when it is I will push it to &lt;a href=&quot;https://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;. Meanwhile, feel free to check it out. There is also an &lt;a href=&quot;https://github.com/jessesquires/PresenterKit/tree/develop/Example&quot;&gt;example project&lt;/a&gt;, which includes all the code from the talk.&lt;/p&gt;

&lt;p&gt;Overall, I think the talk was really well received. If you have any feedback, I would love to hear it. &lt;a href=&quot;https://twitter.com/jesse_squires&quot;&gt;Let me know!&lt;/a&gt; 😄&lt;/p&gt;

&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;One major shortcoming of UIKit is that view controllers have too many responsibilities. This talk focuses on one — presenting and dismissing view controllers — and how we can re-examine and redefine these common operations with a more Swifty API that reduces boilerplate and increases expressivity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/yodawg-swifty-presenters.jpg&quot; title=&quot;Swifty Presenters&quot; alt=&quot;Swifty Presenters&quot; /&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Call for contributors</title>
      <subtitle>Join the JSQMessagesViewController team!</subtitle>
      <link href="http://localhost:4000/blog/jsqmessages-call-for-contributors/" />
      <id>http://localhost:4000/blog/jsqmessages-call-for-contributors</id>

      <published>2016-02-06T00:00:00+00:00</published>
      
      <updated>2016-02-06T00:00:00+00:00</updated>
      

      <summary><p>Do you love writing code? Are you passionate about open source? Do you want to get more involved, but have yet to find a project to which you want contribute? Are you interested in contributing to a widely used, impactful project? Then I have a proposition for you! 😄 I am looking for dedicated core contributors to help maintain <a href="https://github.com/jessesquires/JSQMessagesViewController">JSQMessagesViewController</a>!</p>

</summary>
      <content type="html">&lt;p&gt;Do you love writing code? Are you passionate about open source? Do you want to get more involved, but have yet to find a project to which you want contribute? Are you interested in contributing to a widely used, impactful project? Then I have a proposition for you! 😄 I am looking for dedicated core contributors to help maintain &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController&quot;&gt;JSQMessagesViewController&lt;/a&gt;!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;3-years-later&quot;&gt;3 years later&lt;/h3&gt;

&lt;p&gt;Believe it or not, &lt;code class=&quot;highlighter-rouge&quot;&gt;1.0.0&lt;/code&gt; was released &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/releases/tag/1.0.0&quot;&gt;3 years ago&lt;/a&gt;! It really is surprising how much the project has evolved and changed since then.&lt;/p&gt;

&lt;p&gt;Don’t worry — I still plan to play a large role in the development of the library that we have all grown to love, but I am realizing that I do not have enough hours each month to move as fast as I would like. &lt;strong&gt;JSQMessages is not being abandoned.&lt;/strong&gt; But, I want to move faster. &lt;strong&gt;You&lt;/strong&gt; can help this project &lt;em&gt;move faster&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;impact&quot;&gt;Impact&lt;/h3&gt;

&lt;p&gt;Contributing to open source is extremely rewarding and provides you with an opportunity to &lt;strong&gt;give back&lt;/strong&gt;. If you are reading this, it is nearly impossible for you to not have benefited from open source in &lt;em&gt;some way&lt;/em&gt;. You might even use JSQMessages. 😄 Working on this library will give you a chance to work on a high profile, high impact project for the iOS community. Not to mention, you will learn a lot! And it will be fun! 🤓&lt;/p&gt;

&lt;p&gt;If you aren’t convinced, here’s some data to help!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Over &lt;a href=&quot;https://cocoapods.org/pods/JSQMessagesViewController&quot;&gt;5,500 apps are using this library&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;It has &lt;a href=&quot;http://cocoadocs.org/docsets/JSQMessagesViewController/&quot;&gt;100% documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;It has decent &lt;a href=&quot;https://codecov.io/github/jessesquires/JSQMessagesViewController&quot;&gt;test coverage&lt;/a&gt; and &lt;a href=&quot;https://travis-ci.org/jessesquires/JSQMessagesViewController&quot;&gt;continuous integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;There’s a nice &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/issues/1216&quot;&gt;roadmap&lt;/a&gt; and &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/milestones&quot;&gt;milestones&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Over 7,000 stars and over 1,600 forks &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController&quot;&gt;on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interested, &lt;a href=&quot;https://twitter.com/jesse_squires&quot;&gt;let me know&lt;/a&gt; and let’s get this party started! 🎉&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>The new weekly brief</title>
      <subtitle>The Swift Weekly Brief gets a new home</subtitle>
      <link href="http://localhost:4000/blog/new-weekly-brief/" />
      <id>http://localhost:4000/blog/new-weekly-brief</id>

      <published>2016-01-14T00:00:00+00:00</published>
      
      <updated>2016-01-14T00:00:00+00:00</updated>
      

      <summary><p>In case you are <a href="https://twitter.com/jesse_squires/status/687457899992383488">late to the party</a>, I finally found some time to give the <em>Swift Weekly Brief</em> a proper home. Starting this newsletter kind of happened by accident when I <a href="/swift-open-source/">first wrote</a> about the Swift open source announcement. Since then, it was kind of bootstrapped here on my personal blog and started to feel awkward. I hacked together <a href="http://swiftweekly.github.io">the new site</a> in a couple of nights and moved all the previous posts over. Today’s <a href="http://swiftweekly.github.io/issue-5/">issue #5</a> is the first one to be originally published at <a href="http://swiftweekly.github.io">swiftweekly.github.io</a>. However, there is more here than just organization and a nice separation of concerns.</p>

</summary>
      <content type="html">&lt;p&gt;In case you are &lt;a href=&quot;https://twitter.com/jesse_squires/status/687457899992383488&quot;&gt;late to the party&lt;/a&gt;, I finally found some time to give the &lt;em&gt;Swift Weekly Brief&lt;/em&gt; a proper home. Starting this newsletter kind of happened by accident when I &lt;a href=&quot;/swift-open-source/&quot;&gt;first wrote&lt;/a&gt; about the Swift open source announcement. Since then, it was kind of bootstrapped here on my personal blog and started to feel awkward. I hacked together &lt;a href=&quot;http://swiftweekly.github.io&quot;&gt;the new site&lt;/a&gt; in a couple of nights and moved all the previous posts over. Today’s &lt;a href=&quot;http://swiftweekly.github.io/issue-5/&quot;&gt;issue #5&lt;/a&gt; is the first one to be originally published at &lt;a href=&quot;http://swiftweekly.github.io&quot;&gt;swiftweekly.github.io&lt;/a&gt;. However, there is more here than just organization and a nice separation of concerns.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;openness&quot;&gt;Openness&lt;/h3&gt;

&lt;p&gt;I wanted the site to be as open and accessible as possible. It is setup has a GitHub &lt;a href=&quot;https://github.com/SwiftWeekly&quot;&gt;organization&lt;/a&gt;, hosted on &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub-Pages&lt;/a&gt;, and built completely with open source tools and libraries — &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;, &lt;a href=&quot;http://getbootstrap.com&quot;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt;, and &lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/&quot;&gt;Font Awesome&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;community&quot;&gt;Community&lt;/h3&gt;

&lt;p&gt;With this setup, anyone can quickly and easily contribute fixes, corrections, suggestions, or content. I would much rather describe this as &lt;strong&gt;&lt;em&gt;our&lt;/em&gt;&lt;/strong&gt; newsletter, not &lt;strong&gt;&lt;em&gt;my&lt;/em&gt;&lt;/strong&gt; newsletter. One thing I always liked about &lt;a href=&quot;http://nshipster.com&quot;&gt;NSHipster&lt;/a&gt; and &lt;a href=&quot;https://www.objc.io/issues/&quot;&gt;objc.io&lt;/a&gt; were the guest writers — it’s a great way to get other (and perhaps lesser known) members of the community involved. So if you would like to contribute, don’t be shy and &lt;a href=&quot;https://twitter.com/jesse_squires&quot;&gt;let me know&lt;/a&gt;!&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Open source Swift&#58; weekly brief #4</title>
      <subtitle>What's been happening on Swift.org?</subtitle>
      <link href="http://localhost:4000/blog/open-source-swift-weekly-4/" />
      <id>http://localhost:4000/blog/open-source-swift-weekly-4</id>

      <published>2016-01-07T00:00:00+00:00</published>
      
      <updated>2016-01-07T00:00:00+00:00</updated>
      

      <summary><p>Now that the holidays are over, things have started to pick up again on Swift.org. If you are following any of the repos on GitHub, you have probably noticed. I’m not sure how I missed this before, but this week I just discovered <a href="https://github.com/apple/swift/blob/master/stdlib/internal/SwiftExperimental/SwiftExperimental.swift">SwiftExperimental.swift</a>. For now, it defines a bunch of custom unicode operators for <code class="highlighter-rouge">Set</code>. It’s really cool. I would love to see more APIs like this in the standard library. Anyway, here’s the weekly brief!</p>

</summary>
      <content type="html">&lt;p&gt;Now that the holidays are over, things have started to pick up again on Swift.org. If you are following any of the repos on GitHub, you have probably noticed. I’m not sure how I missed this before, but this week I just discovered &lt;a href=&quot;https://github.com/apple/swift/blob/master/stdlib/internal/SwiftExperimental/SwiftExperimental.swift&quot;&gt;SwiftExperimental.swift&lt;/a&gt;. For now, it defines a bunch of custom unicode operators for &lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt;. It’s really cool. I would love to see more APIs like this in the standard library. Anyway, here’s the weekly brief!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;commits-and-pull-requests&quot;&gt;Commits and pull requests&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/austinzheng&quot;&gt;Austin Zheng&lt;/a&gt; submitted a &lt;a href=&quot;https://github.com/apple/swift/pull/838&quot;&gt;pull request&lt;/a&gt; to remove to old mirror API.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/argon&quot;&gt;Andrew Naylor&lt;/a&gt; merged &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/pull/181&quot;&gt;changes&lt;/a&gt; to speed up JSON parsing in corelibs-foundation. We all know how much the Swift community loves JSON parsing. 😉&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/keith&quot;&gt;Keith Smiley&lt;/a&gt; submitted a &lt;a href=&quot;https://github.com/apple/swift-corelibs-xctest/pull/25&quot;&gt;pull request&lt;/a&gt; to that adds support for the Swift package manager to corelibs-xctest. 👏&lt;/p&gt;

&lt;p&gt;Chris Lattner completely &lt;a href=&quot;https://github.com/apple/swift/commit/7daaa22d936393f37176ba03975a0eec7277e1fb&quot;&gt;redesigned&lt;/a&gt; the AST representation of parameters.&lt;/p&gt;

&lt;h3 id=&quot;proposals&quot;&gt;Proposals&lt;/h3&gt;

&lt;p&gt;Matthew Johnson’s &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md&quot;&gt;proposal&lt;/a&gt; to improve memberwise initializers is now &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution-announce/2016-January/000010.html&quot;&gt;under review&lt;/a&gt;. As Lattner &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151130/000518.html&quot;&gt;pointed out&lt;/a&gt;, there are a number of deficiencies with the current memeberwise initializer behavior in Swift. I have a good feeling this will be accepted.&lt;/p&gt;

&lt;p&gt;The proposal to “require self for accessing instance members” has been (thankfully) &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution-announce/2016-January/000009.html&quot;&gt;rejected&lt;/a&gt;. Some of the main reasons for this decision were that it (1) introduces verbosity rather than clarity, (2) diminishes the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;self.&lt;/code&gt; as an indicator for possible retain cycles, and (3) teams wishing to adopt this usage could simply enforce it with a linter.&lt;/p&gt;

&lt;p&gt;Doug Gregor has submitted a &lt;a href=&quot;https://github.com/DougGregor/swift-evolution/blob/generalized-naming/proposals/0000-generalized-naming.md&quot;&gt;proposal&lt;/a&gt; for &lt;em&gt;Generalized Naming for Any Function&lt;/em&gt;. From the introduction: &lt;em&gt;“Swift includes support for first-class functions, such that any function (or method) can be placed into a value of function type. However, it is not possible to specifically name every function that is part of a Swift program — one cannot provide the argument labels when naming a function.”&lt;/em&gt; The lack of this feature is definitely a pain point in Swift, especially when working with Cocoa and Objective-C selectors. It’s a short read!&lt;/p&gt;

&lt;h3 id=&quot;mailing-lists&quot;&gt;Mailing lists&lt;/h3&gt;

&lt;p&gt;Doug Gregor &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160104/005312.html&quot;&gt;notes&lt;/a&gt; some surprising behavior when extending an &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; protocol — the members of the &lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt; are not exposed to the Objective-C runtime. 😳 Luckily, I haven’t run into this bug myself.&lt;/p&gt;

&lt;p&gt;Finally, is &lt;code class=&quot;highlighter-rouge&quot;&gt;?.&lt;/code&gt; the &lt;a href=&quot;https://twitter.com/uint_min/status/683532142677114880&quot;&gt;“call-me-maybe” operator&lt;/a&gt; in Swift? &lt;strong&gt;That’s it for this week!&lt;/strong&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Open source Swift&#58; weekly brief #3</title>
      <subtitle>What's been happening on Swift.org?</subtitle>
      <link href="http://localhost:4000/blog/open-source-swift-weekly-3/" />
      <id>http://localhost:4000/blog/open-source-swift-weekly-3</id>

      <published>2015-12-24T00:00:00+00:00</published>
      
      <updated>2015-12-24T00:00:00+00:00</updated>
      

      <summary><p>As expected with the holiday season, <a href="https://lists.swift.org/pipermail/swift-corelibs-dev/Week-of-Mon-20151214/000179.html">things are</a> <a href="https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20151221/000540.html">slowing down</a> for a bit on Swift.org. I have been traveling for the holidays as well, so this issue will be shorter than usual. If you haven’t already, be sure you take some time away from coding to enjoy the holidays and <a href="https://twitter.com/chriseidhof/status/679213894343200768">avoid burnout</a>. 😄 Now, the weekly brief!</p>

</summary>
      <content type="html">&lt;p&gt;As expected with the holiday season, &lt;a href=&quot;https://lists.swift.org/pipermail/swift-corelibs-dev/Week-of-Mon-20151214/000179.html&quot;&gt;things are&lt;/a&gt; &lt;a href=&quot;https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20151221/000540.html&quot;&gt;slowing down&lt;/a&gt; for a bit on Swift.org. I have been traveling for the holidays as well, so this issue will be shorter than usual. If you haven’t already, be sure you take some time away from coding to enjoy the holidays and &lt;a href=&quot;https://twitter.com/chriseidhof/status/679213894343200768&quot;&gt;avoid burnout&lt;/a&gt;. 😄 Now, the weekly brief!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;commits-and-pull-requests&quot;&gt;Commits and pull requests&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tienex&quot;&gt;@tienex&lt;/a&gt; submitted a &lt;a href=&quot;https://github.com/apple/swift/pull/608&quot;&gt;pull request&lt;/a&gt; for Linux/armv7 support.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/practicalswift&quot;&gt;@practicalswift&lt;/a&gt; added a ton of &lt;a href=&quot;https://github.com/apple/swift/pulls?utf8=✓&amp;amp;q=is%3Apr+author%3Apracticalswift+is%3Aclosed+test+case&quot;&gt;test cases&lt;/a&gt;. And as of this writing, there are still a few waiting to be merged.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/masters3d&quot;&gt;@masters3d&lt;/a&gt; merged a &lt;a href=&quot;https://github.com/apple/swift-evolution/pull/72/files&quot;&gt;pull request&lt;/a&gt; to swift-evolution that documents commonly proposed changes to Swift. This is a great idea to help reduce duplicate proposals. Don’t forget to &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md&quot;&gt;check this list&lt;/a&gt; before suggesting a change on the mailing list! 👏&lt;/p&gt;

&lt;p&gt;Doug Gregor &lt;a href=&quot;https://github.com/apple/swift/commit/c8dd8d066132683aa32c2a5740b291d057937367&quot;&gt;implemented SE-0001&lt;/a&gt;, which &lt;em&gt;“allows (most) keywords as argument labels”&lt;/em&gt;. This is a great change. When Swift was initially released, one of my Objective-C libraries used &lt;code class=&quot;highlighter-rouge&quot;&gt;extension:&lt;/code&gt; as a &lt;a href=&quot;https://github.com/jessesquires/JSQSystemSoundPlayer/issues/8&quot;&gt;parameter name&lt;/a&gt; (for a file extension string) and bridging to Swift caused all kinds of problems, thus I ended up having to rename it to &lt;code class=&quot;highlighter-rouge&quot;&gt;fileExtension:&lt;/code&gt;. Glad to see I can revert this change in Swift 2.2! Note that the keywords &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;inout&lt;/code&gt; are excluded from this.&lt;/p&gt;

&lt;h3 id=&quot;proposals&quot;&gt;Proposals&lt;/h3&gt;

&lt;p&gt;Oisin Kidney’s &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0008-lazy-flatmap-for-optionals.md&quot;&gt;proposal (SE-0008)&lt;/a&gt;, &lt;em&gt;Add a Lazy flatMap for Sequences of Optionals&lt;/em&gt;, has been &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution-announce/2015-December/000006.html&quot;&gt;accepted&lt;/a&gt; for Swift 2.2! 🎉&lt;/p&gt;

&lt;p&gt;Kevin Ballard’s &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0015-tuple-comparison-operators.md&quot;&gt;proposal (SE-0015)&lt;/a&gt;, &lt;em&gt;Tuple comparison operators&lt;/em&gt; has also been &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151221/004423.html&quot;&gt;accepted&lt;/a&gt;! As of this writing, the status of the proposal on GitHub has not been updated to reflect this. Since this proposal should not affect existing code, I assume it will be included for Swift 2.2. 🎉&lt;/p&gt;

&lt;p&gt;Joe Groff submitted &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003148.html&quot;&gt;a proposal&lt;/a&gt; to add property behaviors to Swift. You can find &lt;a href=&quot;https://gist.github.com/jckarter/f3d392cf183c6b2b2ac3&quot;&gt;draft&lt;/a&gt; on GitHub. Or if you prefer to receive information via &lt;a href=&quot;https://twitter.com/jckarter/status/677554831003791360&quot;&gt;tweet&lt;/a&gt;, there’s that too. 😄 In short, the proposal outlines an extensible framework for applying various behaviors to properties, similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;atomic&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt; in Objective-C. Currently, Swift has some special-purpose hardcoded behaviors, for example,&lt;code class=&quot;highlighter-rouge&quot;&gt;lazy&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@NSCopying&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;willSet&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;didSet&lt;/code&gt;. This proposal aims to generalize and unify these concepts such that they are implemented via the same underlying framework and can be easily extended. Clients could even implement their own behaviors. It sounds awesome. Some example behaviors include: lazy, memoization, delayed initialization, resettable, and synchronized. Definitely worth the read!&lt;/p&gt;

&lt;h3 id=&quot;mailing-lists&quot;&gt;Mailing lists&lt;/h3&gt;

&lt;p&gt;Andyy Hope started &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151221/003819.html&quot;&gt;a discussion&lt;/a&gt; around adding an &lt;code class=&quot;highlighter-rouge&quot;&gt;.allValues&lt;/code&gt; static variable to enums, which would return an array of all cases in the enum. Looks like there is a lot of support for the idea so far. &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001233.html&quot;&gt;Jacob Bandes-Storch&lt;/a&gt; also brought up this idea up a couple of weeks ago. I would definitely be in favor of this, as I’ve found myself writing this boilerplate multiple times. 👍&lt;/p&gt;

&lt;p&gt;Kevin Ballard &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151221/004223.html&quot;&gt;suggests&lt;/a&gt; a more formal “This Week In Swift” newsletter. 😁 Maybe I should go ahead and setup swiftweekly.org?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That’s it for this week!&lt;/strong&gt; Cheers.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Open source Swift&#58; weekly brief #2</title>
      <subtitle>What's been happening on Swift.org?</subtitle>
      <link href="http://localhost:4000/blog/open-source-swift-weekly-2/" />
      <id>http://localhost:4000/blog/open-source-swift-weekly-2</id>

      <published>2015-12-17T00:00:00+00:00</published>
      
      <updated>2015-12-17T00:00:00+00:00</updated>
      

      <summary><p>The Swift.org community is finishing up its second full week of open source development. If you were hoping for a quiet week, you will definitely be disappointed. There is still a ton of activity with no signs of slowing down. The Swift team <a href="https://twitter.com/uint_min/status/675022507527684096">continues</a> to work openly and to be <a href="https://github.com/apple/swift/pull/389#issuecomment-163851653">encouraging</a> to contributors. This week brought more crash fixes and more Swift Evolution proposals. Let’s get to it — the weekly brief!</p>

</summary>
      <content type="html">&lt;p&gt;The Swift.org community is finishing up its second full week of open source development. If you were hoping for a quiet week, you will definitely be disappointed. There is still a ton of activity with no signs of slowing down. The Swift team &lt;a href=&quot;https://twitter.com/uint_min/status/675022507527684096&quot;&gt;continues&lt;/a&gt; to work openly and to be &lt;a href=&quot;https://github.com/apple/swift/pull/389#issuecomment-163851653&quot;&gt;encouraging&lt;/a&gt; to contributors. This week brought more crash fixes and more Swift Evolution proposals. Let’s get to it — the weekly brief!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;community&quot;&gt;Community&lt;/h3&gt;

&lt;p&gt;Craig Federighi reflects on Swift’s first week out in the open with John Gruber on &lt;a href=&quot;http://daringfireball.net/thetalkshow/2015/12/07/ep-139&quot;&gt;The Talk Show&lt;/a&gt;. I really enjoyed listening to this episode and continue to be surprised by Apple’s openness! The interview is only about 30 minutes. There is also a &lt;a href=&quot;http://daringfireball.net/thetalkshow/139/federighi-gruber-transcript&quot;&gt;transcript&lt;/a&gt; on Daring Fireball.&lt;/p&gt;

&lt;p&gt;It looks like &lt;a href=&quot;https://github.com/zhuowei&quot;&gt;@zhuowei&lt;/a&gt; started a port for &lt;a href=&quot;https://github.com/SwiftAndroid&quot;&gt;Android&lt;/a&gt;. I really hope this project takes off. Writing Android apps in Swift could be a huge win for mobile developers.&lt;/p&gt;

&lt;p&gt;One clarification from last week — currying will not removed completely, &lt;a href=&quot;https://github.com/apple/swift-evolution/pull/43#issuecomment-163849233&quot;&gt;just the syntax&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;commits-and-pull-requests&quot;&gt;Commits and pull requests&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/slavapestov&quot;&gt;Slava Pestov&lt;/a&gt; pushed &lt;a href=&quot;https://github.com/apple/swift/commit/c258f991f64a431da57fc79b66e879e5062fba3b&quot;&gt;a commit&lt;/a&gt; that &lt;em&gt;fixed &lt;a href=&quot;https://github.com/apple/swift/commit/c258f991f64a431da57fc79b66e879e5062fba3b#commitcomment-14971959&quot;&gt;91 percent&lt;/a&gt; of the outstanding compiler crashers.&lt;/em&gt; 😲&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nubbel&quot;&gt;Dominique d’Argent&lt;/a&gt; introduced the first &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/pull/93#discussion_r47160608&quot;&gt;unicode variable name&lt;/a&gt; in his implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;NSAffineTransform&lt;/code&gt;. This is the only one that I’ve seen so far. I will happily buy a ☕️ or 🍺 for anyone who can successfully merge a pull request that uses 💩.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apple/swift/pull/413&quot;&gt;Bill Abt&lt;/a&gt; and &lt;a href=&quot;https://github.com/apple/swift-corelibs-libdispatch/pull/15&quot;&gt;David Grove&lt;/a&gt; from IBM made significant contributions to Swift and the core libraries! As Federighi mentioned on The Talk Show, IBM &lt;em&gt;really&lt;/em&gt; wants to use Swift on the server.&lt;/p&gt;

&lt;p&gt;Chris Lattner &lt;a href=&quot;http://github.com/apple/swift/commit/a2d9b10b64c3115c2eed7b6baa8f641db9fc246e&quot;&gt;fixed&lt;/a&gt; &lt;a href=&quot;https://github.com/apple/swift/commit/e28c2e2c6e4c7da665090f0acce4c68cbf4ebc15&quot;&gt;a few&lt;/a&gt; &lt;a href=&quot;https://github.com/apple/swift/commit/7b323a8460540bbb9e9234ef3e3fb27f7cb117e3&quot;&gt;more&lt;/a&gt; &lt;a href=&quot;https://github.com/apple/swift/commit/0bfacde2420937bfb6e0e1be6567b0e90ee2fb67&quot;&gt;radars&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dduan&quot;&gt;Daniel Duan&lt;/a&gt; submitted a &lt;a href=&quot;https://github.com/apple/swift/pull/419&quot;&gt;pull request&lt;/a&gt; to optimize the &lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt; collection type. The result is roughly a 42 percent speed improvement. &lt;a href=&quot;https://github.com/apple/swift/pull/419#issuecomment-164109613&quot;&gt;Whoa!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/practicalswift&quot;&gt;@PracticalSwift&lt;/a&gt; fixed &lt;a href=&quot;https://github.com/apple/swift/pull/561&quot;&gt;a ton&lt;/a&gt; of &lt;a href=&quot;https://github.com/apple/swift/pull/526&quot;&gt;typos&lt;/a&gt;. 😂&lt;/p&gt;

&lt;p&gt;William Dillon &lt;a href=&quot;https://github.com/apple/swift/pull/439&quot;&gt;began support&lt;/a&gt; for ARMv7 hosts such as the Raspberry Pi, BeagleBone, and Nvidia Tegras.&lt;/p&gt;

&lt;p&gt;Brian Gesiak &lt;a href=&quot;https://github.com/apple/swift-corelibs-xctest/pull/14&quot;&gt;continued to pursue&lt;/a&gt; testing the XCTest framework, and in terms of number of commits, he is now the &lt;a href=&quot;https://github.com/apple/swift-corelibs-xctest/graphs/contributors&quot;&gt;#3 contributor&lt;/a&gt; on corelibs-xctest. 👏&lt;/p&gt;

&lt;h3 id=&quot;proposals&quot;&gt;Proposals&lt;/h3&gt;

&lt;p&gt;The first independent Swift language evolution proposal has been &lt;a href=&quot;https://twitter.com/clattner_llvm/status/676472122437271552&quot;&gt;accepted&lt;/a&gt;! You can say goodbye to &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md&quot;&gt;C-style for-loops&lt;/a&gt; and say thank you to &lt;a href=&quot;https://twitter.com/ericasadun&quot;&gt;Erica Sadun&lt;/a&gt;. Beginning in Swift 2.2, you’ll see warning if you use a C-style for-loop and it will be removed in the 3.0 release. &lt;em&gt;“For the most part, there was agreement that C-style for loops are quite rare in Swift code, and most of the existing uses would be better written as for-in loops.”&lt;/em&gt; Also be sure to note the two potential problems with this change as described in the &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution-announce/2015-December/000001.html&quot;&gt;announcement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mxcl&quot;&gt;Max Howell&lt;/a&gt;, &lt;a href=&quot;https://github.com/ddunbar&quot;&gt;Daniel Dunbar&lt;/a&gt;, and &lt;a href=&quot;https://github.com/mattt&quot;&gt;Mattt Thompson&lt;/a&gt; have prepared &lt;a href=&quot;https://github.com/apple/swift-evolution/pull/51&quot;&gt;a proposal&lt;/a&gt; to add testing support to the &lt;a href=&quot;https://github.com/apple/swift-package-manager&quot;&gt;Swift package manager&lt;/a&gt;! &lt;em&gt;“Testing is an essential part of modern software development. Tight integration of testing into the Swift Package Manager will help ensure a stable and reliable packaging ecosystem. We propose to extend our conventional package directory layout to accommodate test modules.”&lt;/em&gt; 🎉&lt;/p&gt;

&lt;p&gt;Max Moiseev’s &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0014-constrained-AnySequence.md&quot;&gt;proposal&lt;/a&gt; to constrain &lt;code class=&quot;highlighter-rouge&quot;&gt;AnySequence.init&lt;/code&gt; is due for review this week. I don’t see any reason why this would not be accepted. &lt;em&gt;“These constraints, in fact, should be applied to &lt;code class=&quot;highlighter-rouge&quot;&gt;SequenceType&lt;/code&gt; protocol itself (although, that is not currently possible), as we expect every &lt;code class=&quot;highlighter-rouge&quot;&gt;SequenceType&lt;/code&gt; implementation to satisfy them already.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;David Hart’s &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&quot;&gt;proposal&lt;/a&gt; to require &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; for accessing instance members is currently under review. If you haven’t been following along, this would make &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; &lt;em&gt;always required&lt;/em&gt; even when it can be inferred implicitly. For example, using &lt;code class=&quot;highlighter-rouge&quot;&gt;self.view&lt;/code&gt; versus simply &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;. There’s a ton of discussion on the &lt;a href=&quot;(https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002407.html)&quot;&gt;mailing list&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ashfurrow/status/676881928168017921&quot;&gt;twitter&lt;/a&gt;. I’m not a fan, but I can understand some of the arguments to do this.&lt;/p&gt;

&lt;p&gt;Erica Sadun also has a &lt;a href=&quot;http://ericasadun.com/2015/12/16/the-evolution-will-be-televised-current-and-upcoming-proposal-reviews/&quot;&gt;great post&lt;/a&gt; detailing some of the recent proposals.&lt;/p&gt;

&lt;h3 id=&quot;mailing-lists&quot;&gt;Mailing lists&lt;/h3&gt;

&lt;p&gt;There’s &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001948.html&quot;&gt;an interesting thread&lt;/a&gt; on dynamic versus static method dispatch. From Chris Lattner: &lt;em&gt;“TL;DR: What I’m really getting at is that the old static vs dynamic trope is at the very least only half of the story.  You really need to include the compilation model and thus the resultant programmer model into the story, and the programmer model is what really matters.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fabian Ehrentraud started a &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001054.html&quot;&gt;discussion&lt;/a&gt; around improving crash-safety when importing Objective-C code without nullability attributes. Currently, un-annotated Objective-C members are bridged to Swift as implicitly unwrapped optionals (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;view!&lt;/code&gt;). This proposal suggests importing these members as optionals (&lt;code class=&quot;highlighter-rouge&quot;&gt;view?&lt;/code&gt;) instead, which would encourage clients to handle possible &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; values safely. Sounds great to me. Honestly, I’m not sure why implicitly unwrapped optionals exist to begin with, as they seem contrary to Swift’s safety goals.&lt;/p&gt;

&lt;p&gt;Colin Cornaby &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002324.html&quot;&gt;suggested&lt;/a&gt; removing semi-colons completely from Swift following the trend of removing C-style language features. As noted on the mailing list, while semi-colons are often syntactic noise, they do serve a stylistic purpose for grouping similar statements on the same line. I could go either way on this, but it doesn’t seem like the idea is gaining enough traction to warrant a formal proposal.&lt;/p&gt;

&lt;blockquote&gt;
   &lt;p&gt;Stare long enough into the language design, and the language design stares back into you.&lt;/p&gt;
   &lt;footer&gt;&lt;a href=&quot;https://twitter.com/jckarter/status/676939142790569986&quot;&gt;Joe Groff&lt;/a&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;That’s it for this week!&lt;/strong&gt; Stay tuned. And if you have suggestions for the next brief, &lt;a href=&quot;https://twitter.com/jesse_squires&quot;&gt;send me a link&lt;/a&gt;.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Open source Swift&#58; weekly brief</title>
      <subtitle>What's been happening during the first full week on Swift.org?</subtitle>
      <link href="http://localhost:4000/blog/open-source-swift-weekly-1/" />
      <id>http://localhost:4000/blog/open-source-swift-weekly-1</id>

      <published>2015-12-10T00:00:00+00:00</published>
      
      <updated>2015-12-10T00:00:00+00:00</updated>
      

      <summary><p>It looks many developers in the community enjoyed my <a href="http://www.jessesquires.com/swift-open-source/">previous post</a> detailing my thoughts and observations on the activity around the <a href="https://swift.org">Swift open source project</a>. So, I’m going to try to do this weekly — every Thursday, since the open source announcement was on a Thursday. Each week I’ll provide a high-level summary of what’s been happening, updates on interesting statistics, and links to interesting content. If you have any suggestions, please <a href="https://twitter.com/jesse_squires">let me know</a>! And now, the weekly brief!</p>

</summary>
      <content type="html">&lt;p&gt;It looks many developers in the community enjoyed my &lt;a href=&quot;http://www.jessesquires.com/swift-open-source/&quot;&gt;previous post&lt;/a&gt; detailing my thoughts and observations on the activity around the &lt;a href=&quot;https://swift.org&quot;&gt;Swift open source project&lt;/a&gt;. So, I’m going to try to do this weekly — every Thursday, since the open source announcement was on a Thursday. Each week I’ll provide a high-level summary of what’s been happening, updates on interesting statistics, and links to interesting content. If you have any suggestions, please &lt;a href=&quot;https://twitter.com/jesse_squires&quot;&gt;let me know&lt;/a&gt;! And now, the weekly brief!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;this-week-on-swiftorg&quot;&gt;This week on Swift.org&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/ManavGabhawala&quot;&gt;Manav Gabhawala&lt;/a&gt; submitted an &lt;a href=&quot;https://github.com/apple/swift-evolution/pull/37&quot;&gt;interesting proposal&lt;/a&gt; to add implicit initializers to Swift. In particular, this would address the verbosity of converting between number types. However, as pointed out on the &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/2015-December/000352.html&quot;&gt;mailing list discussion&lt;/a&gt; there are safety and precision concerns.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/1101_debian&quot;&gt;Alex Denisov&lt;/a&gt; submitted a &lt;a href=&quot;https://github.com/apple/swift/pull/295&quot;&gt;pull request&lt;/a&gt; that fixes 323 crashes. 😲&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Not very good at &lt;a href=&quot;https://github.com/apple/swift-evolution/pull/39&quot;&gt;using git&lt;/a&gt;? Worry not! Lots of &lt;a href=&quot;https://github.com/apple/swift-evolution/pull/34#issuecomment-162693826&quot;&gt;cool people&lt;/a&gt; aren’t that great at using it either. The message here: do not let this deter you from contributing!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Chris Lattner tends to &lt;a href=&quot;https://github.com/apple/swift/commit/4ebb461d634964f0399d63b3264d4090451c77fd&quot;&gt;fix&lt;/a&gt; &lt;a href=&quot;https://github.com/apple/swift/commit/5dded3f3523e9bd6ea45d0b6ffe5068a59d03a3f&quot;&gt;radars&lt;/a&gt; late at night.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/modocache&quot;&gt;Brian Gesiak&lt;/a&gt;, creator of &lt;a href=&quot;https://github.com/Quick/Quick&quot;&gt;Quick&lt;/a&gt;, asks &lt;a href=&quot;https://lists.swift.org/pipermail/swift-corelibs-dev/2015-December/000018.html&quot;&gt;&lt;em&gt;who tests the tests?&lt;/em&gt;&lt;/a&gt; after noticing that the &lt;a href=&quot;https://github.com/apple/swift-corelibs-xctest&quot;&gt;xctest&lt;/a&gt; framework isn’t itself tested. Testing a testing framework sounds funny, but some important &lt;a href=&quot;https://github.com/apple/swift-corelibs-xctest/commit/ce4c98bc58763d49db474703d005ba9c479cac3a&quot;&gt;bugs&lt;/a&gt; have already been found. &lt;a href=&quot;https://github.com/apple/swift/blob/b53ff3b58053407f380d09770d2e2069e02d6ff5/utils/build-script-impl#L1957&quot;&gt;FIXME&lt;/a&gt;. 😳&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In case you missed it, currying &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0002-remove-currying.md&quot;&gt;will be removed&lt;/a&gt; from Swift 3.0. (&lt;a href=&quot;https://robots.thoughtbot.com/introduction-to-function-currying-in-swift&quot;&gt;What is currying&lt;/a&gt;?)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/owensd&quot;&gt;David Owens&lt;/a&gt; submitted a &lt;a href=&quot;https://github.com/apple/swift-evolution/pull/26&quot;&gt;proposal&lt;/a&gt; to add type annotations to &lt;code class=&quot;highlighter-rouge&quot;&gt;throws&lt;/code&gt;. When Swift’s error-handling model was first announced, the lack of explicit error types was a common criticism. There’s a &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/001117.html&quot;&gt;good discussion&lt;/a&gt; on the mailing list. You can also read the original &lt;a href=&quot;https://github.com/apple/swift/blob/master/docs/ErrorHandlingRationale.rst&quot;&gt;Error Handling Rationale and Proposal&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Swift now has almost 200 &lt;a href=&quot;https://github.com/apple/swift/graphs/contributors&quot;&gt;contributors&lt;/a&gt; and over 230 pull requests have been &lt;a href=&quot;https://github.com/apple/swift/pulls?utf8=✓&amp;amp;q=is%3Apr+is%3Amerged+&quot;&gt;merged&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Last week I mentioned that &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation&quot;&gt;Foundation&lt;/a&gt; was largely &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/search?utf8=✓&amp;amp;q=NSUnimplemented&quot;&gt;unimplemented&lt;/a&gt;. There’s also some &lt;em&gt;really&lt;/em&gt; surprising &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/pull/89/files&quot;&gt;bugs&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/argon&quot;&gt;Andrew Naylor&lt;/a&gt; ambitiously implements &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/pull/54&quot;&gt;NSJSONSerialization&lt;/a&gt;. 👏&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/jtbandes&quot;&gt;Jacob Bandes-Storch&lt;/a&gt; submitted a &lt;a href=&quot;https://github.com/apple/swift-evolution/pull/44&quot;&gt;proposal&lt;/a&gt; that aims to greatly improve the bridging of C APIs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There’s an &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151207/000873.html&quot;&gt;interesting discussion&lt;/a&gt; on the mailing lists to make classes and methods &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt; by default. Anything that discourages or prevents subclassing is &lt;a href=&quot;https://twitter.com/jesse_squires/status/664588682997964800&quot;&gt;fine by me&lt;/a&gt;. 😊&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Swift Programming Language iBook (ePub) is available for &lt;em&gt;direct download&lt;/em&gt; on Swift.org (instead of only the iBook Store) and is now under a &lt;a href=&quot;https://swift.org/documentation/&quot;&gt;Creative Commons Attribution 4.0 International (CC BY 4.0) License&lt;/a&gt;! Translations &lt;a href=&quot;https://twitter.com/clattner_llvm/status/674454905449373696&quot;&gt;would be great&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Programming is little more than a &lt;a href=&quot;https://twitter.com/clattner_llvm/status/674254974629502976&quot;&gt;“nights and weekends” hobby&lt;/a&gt; for Chris Lattner. 😂&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;That’s it for this week!&lt;/strong&gt; &lt;a href=&quot;/feed.xml&quot;&gt;Subscribe&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/jesse_squires&quot;&gt;follow me&lt;/a&gt; to stay up-to-date!&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Swift open source</title>
      <subtitle>Let the revolution begin</subtitle>
      <link href="http://localhost:4000/blog/swift-open-source/" />
      <id>http://localhost:4000/blog/swift-open-source</id>

      <published>2015-12-06T00:00:00+00:00</published>
      
      <updated>2015-12-06T00:00:00+00:00</updated>
      

      <summary><p>It has only been a few days since the announcement of <a href="https://developer.apple.com/swift/blog/?id=34">Swift going open source</a> and the activity around the project has been incredible. When Apple revealed that Swift would be open source at <a href="https://developer.apple.com/wwdc/">WWDC</a> earlier this year, I do not think anyone anticipated a release like this.</p>

</summary>
      <content type="html">&lt;p&gt;It has only been a few days since the announcement of &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=34&quot;&gt;Swift going open source&lt;/a&gt; and the activity around the project has been incredible. When Apple revealed that Swift would be open source at &lt;a href=&quot;https://developer.apple.com/wwdc/&quot;&gt;WWDC&lt;/a&gt; earlier this year, I do not think anyone anticipated a release like this.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/swift-logo.png&quot; title=&quot;Swift&quot; alt=&quot;Swift&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;expectations&quot;&gt;Expectations&lt;/h3&gt;

&lt;p&gt;No one really knew what to expect. Was Swift going to be dumped on &lt;a href=&quot;http://www.opensource.apple.com&quot;&gt;opensource.apple.com&lt;/a&gt; and grow stale with the other projects? Would it be put on GitHub like &lt;a href=&quot;https://github.com/ResearchKit&quot;&gt;ResearchKit&lt;/a&gt;? Not only is Swift on &lt;a href=&quot;https://github.com/apple/&quot;&gt;GitHub&lt;/a&gt;, but the Swift team will be &lt;a href=&quot;http://arstechnica.com/apple/2015/12/craig-federighi-talks-open-source-swift-and-whats-coming-in-version-3-0/&quot;&gt;working completely in the open&lt;/a&gt;. Apple did a spectacular job with the release. Not only do we have the source code, but we have the &lt;a href=&quot;https://github.com/apple/swift/commits/master&quot;&gt;entire commit history&lt;/a&gt; for each project, a very detailed view into the Swift team’s development process, and access to the &lt;a href=&quot;https://github.com/apple/swift-evolution&quot;&gt;Swift evolution process&lt;/a&gt;. Everything you need to know is on &lt;a href=&quot;http://swift.org&quot;&gt;Swift.org&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;swift-in-the-open&quot;&gt;Swift in the open&lt;/h3&gt;

&lt;p&gt;For the past few days I have been watching the repositories on &lt;a href=&quot;https://github.com/apple/&quot;&gt;GitHub&lt;/a&gt; and the Swift &lt;a href=&quot;https://swift.org/community/#mailing-lists&quot;&gt;mailing lists&lt;/a&gt;. It is fascinating. The question is, what will Swift development look like moving forward? Here are some of the interesting things I have seen so far.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Chris Lattner’s &lt;a href=&quot;https://github.com/apple/swift/commit/18844bc65229786b96b89a9fc7739c0fc897905e&quot;&gt;first commit&lt;/a&gt; was on July 17, 2010.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The main &lt;a href=&quot;https://github.com/apple/swift&quot;&gt;Swift repo&lt;/a&gt; surpassed 10,000 stars in the first 24 hours. It now has more than 19,000 stars along with over 2,000 forks. As of this writing, it is still in the #1 spot on GitHub’s &lt;a href=&quot;https://github.com/trending&quot;&gt;trending&lt;/a&gt; page.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There has been close to ~400 pull requests across all of the repos. Many of them accepted and merged.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After the initial Swift announcement at &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2014-402/&quot;&gt;WWDC 2014&lt;/a&gt;, I think we all noticed how active the Swift team was on twitter, answering questions and more — &lt;a href=&quot;https://twitter.com/clattner_llvm&quot;&gt;Chris Lattner&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jckarter&quot;&gt;Joe Groff&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/UINT_MIN&quot;&gt;Jordan Rose&lt;/a&gt; to name a few. Turns out some tweets &lt;a href=&quot;https://github.com/apple/swift/commit/666646fee95bc75ca81e1dc5131989d56bfb0742&quot;&gt;resulted&lt;/a&gt; in &lt;em&gt;immediate&lt;/em&gt; bug fixes! 😄&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remember that &lt;a href=&quot;https://www.apple.com/pr/library/2014/07/15Apple-and-IBM-Forge-Global-Partnership-to-Transform-Enterprise-Mobility.html&quot;&gt;partnership&lt;/a&gt; with &lt;a href=&quot;http://www.apple.com/business/mobile-enterprise-apps/&quot;&gt;Apple and IBM&lt;/a&gt;? Then it should not be a surprise that IBM seems to be &lt;a href=&quot;https://developer.ibm.com/swift/2015/12/03/introducing-the-ibm-swift-sandbox/&quot;&gt;very invested&lt;/a&gt; in server-side Swift. It looks like there is growing momentum behind using Swift on the server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Chris Lattner is &lt;a href=&quot;https://github.com/apple/swift/pull/166&quot;&gt;merging pull requests&lt;/a&gt; at 10pm on Saturday. 😆&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We know exactly &lt;a href=&quot;https://github.com/apple/swift-evolution&quot;&gt;what to expect&lt;/a&gt; for Swift 3.0! No more keynote surprises.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md&quot;&gt;++ and – operators will be removed&lt;/a&gt; from Swift 3.0. And thanks to &lt;a href=&quot;https://twitter.com/ericasadun&quot;&gt;Erica Sadun&lt;/a&gt;, so will &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md&quot;&gt;C-style for-loops&lt;/a&gt;. She submitted this proposal on day two! 👏&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Chris Lattner &lt;a href=&quot;https://github.com/apple/swift/commit/22c3aa0588d2df1a207dcbad85946bab7976894c&quot;&gt;commits&lt;/a&gt; &lt;em&gt;“Pull some ancient history off an internal wiki page for possible historical interest.”&lt;/em&gt; What?! Yes please! Nerd alert.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The collection of &lt;a href=&quot;https://github.com/practicalswift/swift-compiler-crashes&quot;&gt;swift-compiler-crashes&lt;/a&gt; from &lt;a href=&quot;https://twitter.com/practicalswift&quot;&gt;@practicalswift&lt;/a&gt; has been &lt;a href=&quot;https://github.com/apple/swift/commit/e5ca8be1a090335d401cd1d7dfcf9b2104674d5b&quot;&gt;part of the repo&lt;/a&gt; since September 2014.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It looks like there’s a &lt;a href=&quot;https://github.com/apple/swift-evolution/pull/33/files&quot;&gt;good chance&lt;/a&gt; that &lt;code class=&quot;highlighter-rouge&quot;&gt;typealias&lt;/code&gt; will be replaced with &lt;code class=&quot;highlighter-rouge&quot;&gt;associated&lt;/code&gt; for associated type declarations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/jtbandes&quot;&gt;Jacob Bandes-Storch&lt;/a&gt; has &lt;a href=&quot;https://github.com/apple/swift/pull/253&quot;&gt;submitted&lt;/a&gt; &lt;a href=&quot;https://github.com/apple/swift/pull/272&quot;&gt;two&lt;/a&gt; pull requests that fix a total of over 400 crashes. 😲&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Swift team seems &lt;a href=&quot;https://twitter.com/clattner_llvm/status/673162286127714304&quot;&gt;very keen&lt;/a&gt; on getting the community involved. No contribution is too small!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Much of the &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation&quot;&gt;swift-corelibs-foundation&lt;/a&gt; framework is currently &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/search?utf8=✓&amp;amp;q=NSUnimplemented&quot;&gt;unimplemented&lt;/a&gt;. There seems to be a lot of low hanging fruit. I wonder if this is intentional to encourage contributions, or if it is the result of a tight deadline?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/apple/swift/commit/afc81c1855bf711315b8e5de02db138d3d487eeb&quot;&gt;initial checkin&lt;/a&gt; from 2010 was actually revision 4 and imported from an internal SVN repo. “Swift SVN r4”. You will notice the following in the header comments: &lt;em&gt;“This source file is part of the Swift.org open source project. Copyright (c) 2014 - 2015 Apple Inc.”&lt;/em&gt; I have three theories:
    1. Commit history was edited and cleaned up before being published on GitHub.
    2. In 2010, the Swift team’s deadline was “2014-2015”, &lt;em&gt;no matter what&lt;/em&gt;. This seems like a very Apple thing to do and explains Swift’s “rough around the edges” arrival.
    3. Chris Lattner is a wizard.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think we’re definitely off to a good start. The community is strong and excited, and Swift is &lt;em&gt;already&lt;/em&gt; greatly improved in &lt;strong&gt;only three days&lt;/strong&gt;. As Lattner says, &lt;em&gt;the revolution will be Swift!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That’s all I’ve got for now! If you enjoyed this article, &lt;a href=&quot;https://twitter.com/jesse_squires&quot;&gt;let me know&lt;/a&gt;. Maybe I’ll keep creeping and sharing what I find.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Building type-safe, composable data sources in Swift</title>
      <subtitle>A modern approach to collection views and table views</subtitle>
      <link href="http://localhost:4000/blog/building-data-sources-in-swift/" />
      <id>http://localhost:4000/blog/building-data-sources-in-swift</id>

      <published>2015-10-25T00:00:00+00:00</published>
      
      <updated>2015-10-25T00:00:00+00:00</updated>
      

      <summary><p>In iOS development, the core of nearly every app rests on the foundations provided by <code class="highlighter-rouge">UICollectionView</code> and <code class="highlighter-rouge">UITableView</code>. These APIs make it simple to build interfaces that display the data in our app, and allow us to easily interact with those data. Because they are so frequently used, it makes sense to optimize and refine how we use them — to reduce the boilerplate involved in setting them up, to make them testable, and more. With Swift, we have new ways with which we can approach these APIs and reimagine how we use them to build apps.</p>

</summary>
      <content type="html">&lt;p&gt;In iOS development, the core of nearly every app rests on the foundations provided by &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionView&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;. These APIs make it simple to build interfaces that display the data in our app, and allow us to easily interact with those data. Because they are so frequently used, it makes sense to optimize and refine how we use them — to reduce the boilerplate involved in setting them up, to make them testable, and more. With Swift, we have new ways with which we can approach these APIs and reimagine how we use them to build apps.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;the-common-problem&quot;&gt;The common problem&lt;/h3&gt;

&lt;p&gt;Setting up a table view or collection view has always required a lot of boilerplate — re-implementing the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/index.html#//apple_ref/occ/intf/UITableViewDataSource&quot;&gt;UITableViewDataSource&lt;/a&gt; and  &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionViewDataSource_protocol/index.html#//apple_ref/occ/intf/UICollectionViewDataSource&quot;&gt;UICollectionViewDataSource&lt;/a&gt; protocols time and time again. There are &lt;a href=&quot;https://www.objc.io/issues/1-view-controllers/lighter-view-controllers/&quot;&gt;strategies&lt;/a&gt; to abstract these protocols into separate data source objects, but until Swift they either had to be specialized for a specific type and thus not reusable, or reusable and not type-safe. Further, these protocols intermingle different responsibilities. As Ash Furrow &lt;a href=&quot;http://ashfurrow.com/blog/protocols-and-swift/&quot;&gt;points out&lt;/a&gt;, it would be better to have many single-purpose protocols, instead of having one protocol that does everything.&lt;/p&gt;

&lt;h3 id=&quot;a-modern-solution&quot;&gt;A modern solution&lt;/h3&gt;

&lt;p&gt;One of the first things I built with Swift (and just recently updated) was &lt;a href=&quot;https://github.com/jessesquires/JSQDataSourcesKit&quot;&gt;JSQDataSourcesKit&lt;/a&gt; because I wanted to address these issues. Inspired by Andy Matuschak’s &lt;a href=&quot;https://gist.github.com/andymatuschak/f1e1691fa1a327468f8e&quot;&gt;gist&lt;/a&gt;, the goals of the framework are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Remove the data source protocol boilerplate.&lt;/li&gt;
  &lt;li&gt;Be data driven. That is, if you want to change your view then change your data or its structure.&lt;/li&gt;
  &lt;li&gt;Protocol-oriented.&lt;/li&gt;
  &lt;li&gt;Type-safe.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt;, with a focus on single responsibility, interface segregation, and composition.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Pure&lt;/em&gt; Swift (no &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; and no &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt;, when possible)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The framework is crafted of four main types of components: &lt;code class=&quot;highlighter-rouge&quot;&gt;SectionInfo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CellFactory&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;BridgedDataSource&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;DataSourceProvider&lt;/code&gt;. For each component, there is a corresponding protocol or type to use with both table views and collection views.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SectionInfo&lt;/code&gt; —&lt;/strong&gt;
Section objects contain an array of your models. They represent one section of data. The framework provides &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionViewSection&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TableViewSection&lt;/code&gt; structs. However, they conform to the &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionViewSectionInfo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TableViewSectionInfo&lt;/code&gt; protocols, respectively. This allows you to build your own.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CellFactory&lt;/code&gt; —&lt;/strong&gt;
Cell factory objects are responsible for creating and configuring a cell for a given model. There are &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionViewCellFactory&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TableViewCellFactory&lt;/code&gt; structs, which conform to the &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionViewCellFactoryType&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TableViewCellFactoryType&lt;/code&gt; protocols, respectively. Again, this design allows you to build your own cell factory objects if you do not want to use the ones that the framework provides. For collection views only, there’s also &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionSupplementaryViewFactory&lt;/code&gt; which works similarly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BridgedDataSource&lt;/code&gt; —&lt;/strong&gt; These are actually opaque objects. They are &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; to the framework and not used by clients directly. Bridged data source objects implement the actual &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDataSource&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt; protocols. The name refers to the fact that these objects are bridging the data source protocol methods from Objective-C classes (i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; subclasses) to pure Swift classes. In order to implement  &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDataSource&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewDataSource&lt;/code&gt;, a class must also implement &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObjectProtocol&lt;/code&gt;, which essentially means inheriting from &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt;.
As mentioned above, I want to avoid the baggage of &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; and prevent &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; from dragging its dirty fingers through the rest of my types, so it is all contained here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DataSourceProvider&lt;/code&gt; —&lt;/strong&gt; Data source provider objects are composed of an array of sections, a cell factory, and a bridged data source. (And for collection views, there’s also a supplementary view factory.) A provider object orchestrates and mediates the communications between its constituent parts, which know nothing about each other. Finally, as the name suggests, it provides the data source for a table view or a collection view, which happens via its private bridged data source instance. To clients, it looks like this:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// TableViewDataSourceProvider&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bridgedDataSource&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// CollectionViewDataSourceProvider&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bridgedDataSource&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;Let’s take a look at how this works in practice. Here’s an example for a simple collection view.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CollectionViewSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CollectionViewSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;allSections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;section0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;section1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cellFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CollectionViewCellFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;reuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CellId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyCell&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// configure the cell with the model&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headerFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CollectionSupplementaryViewFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;reuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;HeaderViewId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyHeaderView&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// configure the header view with the model&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headerView&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CollectionViewDataSourceProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                  &lt;span class=&quot;nv&quot;&gt;sections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allSections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;nv&quot;&gt;cellFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;nv&quot;&gt;supplementaryViewFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First, we populate our section objects with our models. Then we create our cell and header view factories. Finally, we pass all of these instances to our data source provider. That’s all. The collection view will now display all of our data. The result is an elegant, composed, protocol-oriented, and testable system. You can independently test your models, test that each factory returns correctly configured views, and test that the &lt;code class=&quot;highlighter-rouge&quot;&gt;provider.dataSource&lt;/code&gt; accurately responds to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewDataSource&lt;/code&gt; methods. Using this framework with table views follows similarly, with the main exception being that table views do not have supplementary views.&lt;/p&gt;

&lt;p&gt;Also remember that the &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionViewDataSourceProvider&lt;/code&gt; only speaks to protocols — not the concrete objects used in the example above. Its signature is the following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CollectionViewDataSourceProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;SectionInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CollectionViewSectionInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;CellFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CollectionViewCellFactoryType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;SupplementaryViewFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CollectionSupplementaryViewFactoryType&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CellFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SectionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SupplementaryViewFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SectionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Do not be afraid! Before Brent Simmons accuses me of contributing to &lt;a href=&quot;http://inessential.com/2015/02/04/random_swift_things&quot;&gt;angle-bracket-T blindness&lt;/a&gt;, let me explain. There are three generic type parameters. We specify that these three types must conform to the &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionViewSectionInfo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionViewCellFactoryType&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionSupplementaryViewFactoryType&lt;/code&gt; protocols. Finally, the &lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt; clause specifies that each object must deal with the same kind of model objects (&lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt;). This prevents us from trying to use a section of &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelA&lt;/code&gt; with a cell factory of &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelB&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;additional-features&quot;&gt;Additional features&lt;/h3&gt;

&lt;p&gt;The example above just scratches the surface of what this framework can do. It also integrates with Core Data and &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/CoreData/Reference/NSFetchedResultsController_Class/index.html&quot;&gt;NSFetchedResultsController&lt;/a&gt;. For this, instead of initializing a &lt;code class=&quot;highlighter-rouge&quot;&gt;DataSourceProvider&lt;/code&gt; with an array of sections, you pass an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSFetchedResultsController&lt;/code&gt; instead. Even more, there are &lt;code class=&quot;highlighter-rouge&quot;&gt;FetchedResultsDelegateProvider&lt;/code&gt; classes that encapsulate all of the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/CoreData/Reference/NSFetchedResultsControllerDelegate_Protocol/index.html#//apple_ref/occ/intf/NSFetchedResultsControllerDelegate&quot;&gt;&lt;em&gt;tedious&lt;/em&gt; boilerplate&lt;/a&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;NSFetchedResultsControllerDelegate&lt;/code&gt; for table views &lt;strong&gt;and&lt;/strong&gt; collection views. If you want to see more examples, I’ve put together a great &lt;a href=&quot;https://github.com/jessesquires/JSQDataSourcesKit/tree/develop/Example&quot;&gt;example app&lt;/a&gt; in the repo that exercises all functionality in the framework. You can find complete documentation &lt;a href=&quot;http://www.jessesquires.com/JSQDataSourcesKit/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;onward&quot;&gt;Onward&lt;/h3&gt;

&lt;p&gt;I’m looking forward to building apps in Swift with patterns like this, and you should be too! If you have been confused by these hipsters talking about &lt;em&gt;protocol-oriented programming&lt;/em&gt; and &lt;em&gt;composition over inheritance&lt;/em&gt;, hopefully this serves as a practical example of what they mean. If you are working on an app in Swift, I encourage you try &lt;a href=&quot;https://github.com/jessesquires/JSQDataSourcesKit&quot;&gt;JSQDataSourcesKit&lt;/a&gt;. Let me know what you think, and feel free to send me a pull request!&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>UIKit changes in iOS 9</title>
      <subtitle>Goodbye non-zeroing weak references</subtitle>
      <link href="http://localhost:4000/blog/UIKit-changes-in-iOS-9/" />
      <id>http://localhost:4000/blog/UIKit-changes-in-iOS-9</id>

      <published>2015-10-14T00:00:00+00:00</published>
      
      <updated>2015-10-14T00:00:00+00:00</updated>
      

      <summary><p>Surprisingly, I have not seen anyone talking about what I just discovered in the <a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/iOS90APIDiffs/index.html#//apple_ref/doc/uid/TP40016222">iOS 9.0 API Diffs</a>. (Well, actually what <a href="https://twitter.com/343max/status/654513094559817728">Max von Webel</a> discovered.) There’s a hidden gem in the <a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/iOS90APIDiffs/Objective-C/UIKit.html">UIKit diffs</a>. We no longer have to suffer through tracking down obscure bugs due to non-zeroing weak references.</p>

</summary>
      <content type="html">&lt;p&gt;Surprisingly, I have not seen anyone talking about what I just discovered in the &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/releasenotes/General/iOS90APIDiffs/index.html#//apple_ref/doc/uid/TP40016222&quot;&gt;iOS 9.0 API Diffs&lt;/a&gt;. (Well, actually what &lt;a href=&quot;https://twitter.com/343max/status/654513094559817728&quot;&gt;Max von Webel&lt;/a&gt; discovered.) There’s a hidden gem in the &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/releasenotes/General/iOS90APIDiffs/Objective-C/UIKit.html&quot;&gt;UIKit diffs&lt;/a&gt;. We no longer have to suffer through tracking down obscure bugs due to non-zeroing weak references.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;non-zeroing-weak-references&quot;&gt;Non-zeroing weak references&lt;/h3&gt;

&lt;p&gt;What are non-zeroing weak references? Mike Ash’s Friday Q&amp;amp;A on &lt;a href=&quot;https://mikeash.com/pyblog/friday-qa-2011-09-30-automatic-reference-counting.html&quot;&gt;Automatic Reference Counting&lt;/a&gt; covers this and everything else you ever wanted to know about ARC. You should probably read this now, even if you have before. It’s great.&lt;/p&gt;

&lt;p&gt;Briefly, there are &lt;code class=&quot;highlighter-rouge&quot;&gt;strong&lt;/code&gt; references and &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; references in ARC. These describe the ownership behavior of a pointer. Either an object &lt;strong&gt;owns&lt;/strong&gt; the pointed-to object (&lt;code class=&quot;highlighter-rouge&quot;&gt;strong&lt;/code&gt;, increments the retain count), or it &lt;strong&gt;does not own&lt;/strong&gt; the pointed-to object (&lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt;, the retain count is unchanged). Then, &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; references can be &lt;em&gt;zeroing&lt;/em&gt; or &lt;em&gt;non-zeroing&lt;/em&gt;, meaning that when the pointed-to object is deallocated, the pointer is zeroed out or not.&lt;/p&gt;

&lt;p&gt;The issue is that a non-zeroing reference ends up pointing to invalid memory (because the reference is not zeroed out), thus when you attempt to access that memory (by sending the object a message) — you’ll crash. Mike puts it nicely in his post:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You must ensure that you never use such a pointer (preferably by zeroing it out manually) after the object it points to has been destroyed. Be careful, as non-zeroing weak references are playing with fire.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;playing-with-fire&quot;&gt;Playing with fire&lt;/h3&gt;

&lt;p&gt;Why do these details about weak references matter? Because up until iOS 8, UIKit views that have a &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;dataSource&lt;/code&gt; property have been declared as the following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// UITableView iOS 8 and below&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@property(nonatomic, assign)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UITableViewDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@property(nonatomic, assign)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UITableViewDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// UICollectionView iOS 8 and below&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@property(nonatomic, assign)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UICollectionViewDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@property(nonatomic, assign)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UICollectionViewDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;span class=&quot;text-muted&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; this extends well beyond UITableView and UICollectionView. UIBarButtonItem.target is assign. UIGestureRecognizer.delegate is assign. UIActionSheet.delegate is assign. UIAccelerometer.delegate is assign. The list goes on, everywhere in UIKit.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;These references are &lt;code class=&quot;highlighter-rouge&quot;&gt;assign&lt;/code&gt; (non-zeroing). That is, &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; (zeroing). Have you ever had a bug because of this? &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/issues/201&quot;&gt;I have&lt;/a&gt;. What happens is the &lt;code class=&quot;highlighter-rouge&quot;&gt;dataSource&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; object is deallocated &lt;em&gt;before&lt;/em&gt; the view, and then the view attempts to send a message to an object that has been destroyed, and you crash. And then you confusingly look through obscure stack traces and repeatedly fail to reproduce the issue. You lie awake at night, unable to sleep.&lt;/p&gt;

&lt;p&gt;For correctness, you should be setting these to &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;dealloc&lt;/code&gt;. In the comments of Mike’s post, he &lt;a href=&quot;https://mikeash.com/pyblog/friday-qa-2011-09-30-automatic-reference-counting.html#comment-4010c9e897b775d2d9a6f2eca3baa77e&quot;&gt;explains further&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You’re correct that __unsafe_unretained is the same as a regular assignment done the old way, but most Cocoa programmers don’t exercise the caution they should when using those. How much code have you seen that manually zeroes out delegate and data source pointers in a window controller’s -dealloc. It’s almost unheard of. And yet, it’s absolutely required for correctness, because you can’t know the order of object destruction, and the view might message its data source or delegate after the controller has been destroyed. In practice, this happens rarely, but it does happen, and is really annoying to track down.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;deliver-us-from-evil&quot;&gt;Deliver us from evil&lt;/h3&gt;

&lt;p&gt;As of iOS 9, the aforementioned APIs have changed. In fact, all of UIKit looks like it &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/releasenotes/General/iOS90APIDiffs/Objective-C/UIKit.html&quot;&gt;has been audited&lt;/a&gt;. Everywhere I looked, &lt;code class=&quot;highlighter-rouge&quot;&gt;assign&lt;/code&gt; was replaced with &lt;code class=&quot;highlighter-rouge&quot;&gt;weak, nullable&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// UITableView iOS 9&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@property(nonatomic, weak, nullable)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UITableViewDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@property(nonatomic, weak, nullable)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UITableViewDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// UICollectionView iOS 9&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@property(nonatomic, weak, nullable)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UICollectionViewDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@property(nonatomic, weak, nullable)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UICollectionViewDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I can’t say for certain, but my guess is that we can thank Swift for this. Swift was the impetus for &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=25&quot;&gt;nullability annotations&lt;/a&gt; and generics in Objective-C, and we know the teams at Apple have been &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=31&quot;&gt;working hard&lt;/a&gt; to update all of the Cocoa frameworks with these features. Maybe &lt;code class=&quot;highlighter-rouge&quot;&gt;assign&lt;/code&gt; affects interoperability with Swift? In any case, non-zeroing weak references are finally gone. As developers, we can finally get some sleep.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Swift enumerations and equatable</title>
      <subtitle>Implementing equatable for enums with associated values</subtitle>
      <link href="http://localhost:4000/blog/swift-enumerations-and-equatable/" />
      <id>http://localhost:4000/blog/swift-enumerations-and-equatable</id>

      <published>2015-07-26T00:00:00+00:00</published>
      
      <updated>2015-07-26T00:00:00+00:00</updated>
      

      <summary><p>Recently, I came across a <strong>case</strong> (<em>pun intended</em>) where I needed to compare two instances of an <code class="highlighter-rouge">enum</code> type in Swift. However, it was an <code class="highlighter-rouge">enum</code> where some cases had <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html#//apple_ref/doc/uid/TP40014097-CH12-ID148">associated values</a>. At first glance, it is not obvious how to do this.</p>

</summary>
      <content type="html">&lt;p&gt;Recently, I came across a &lt;strong&gt;case&lt;/strong&gt; (&lt;em&gt;pun intended&lt;/em&gt;) where I needed to compare two instances of an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; type in Swift. However, it was an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; where some cases had &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html#//apple_ref/doc/uid/TP40014097-CH12-ID148&quot;&gt;associated values&lt;/a&gt;. At first glance, it is not obvious how to do this.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;As you likely know, if you want to compare two instances of a type in Swift, then that type must conform to the &lt;a href=&quot;http://nshipster.com/swift-comparison-protocols/&quot;&gt;Equatable&lt;/a&gt; protocol. In other words, you must define the &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; operator for the type.
If the enumeration does not have associated values or if it has a raw-value type, then you get the &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; operator for free from the Swift &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/General/Reference/SwiftStandardLibraryReference/index.html&quot;&gt;Standard Library&lt;/a&gt;. For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// With a raw-value&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Double conforms to Equatable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.1415&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Phi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.6180&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tau&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.2831&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Pi&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tau&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Phi&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tau&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Phi&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Without a raw-value&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CompassPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;North&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;South&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;East&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;West&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;CompassPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;North&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CompassPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;North&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CompassPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;South&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CompassPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;East&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Comparing cases in these enumerations works &lt;em&gt;out-of-the-box&lt;/em&gt; because enumerations that have cases of a raw-value type implicitly conform to the &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Reference/Swift_RawRepresentable_Protocol/index.html#//apple_ref/swift/intf/s:PSs16RawRepresentable&quot;&gt;RawRepresentable&lt;/a&gt; protocol. The Swift Standard Library provides implementations of the &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; operator for &lt;code class=&quot;highlighter-rouge&quot;&gt;RawRepresentable&lt;/code&gt; types and generic &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; types.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Used to compare 'Math' enum&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RawRepresentable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RawValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Used to compare 'CompassPoint' enum&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is easy to see how and why this works. For the &lt;code class=&quot;highlighter-rouge&quot;&gt;RawRepresentable&lt;/code&gt; type, as long as the &lt;code class=&quot;highlighter-rouge&quot;&gt;rawValue&lt;/code&gt; conforms to &lt;code class=&quot;highlighter-rouge&quot;&gt;Equatable&lt;/code&gt;, then all this function has to do is compare the raw-value from each type. Without a raw-value, the different enumeration members are fully-fledged values in their own right. But if the some cases of the enumeration have &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html#//apple_ref/doc/uid/TP40014097-CH12-ID148&quot;&gt;associated values&lt;/a&gt;, then you must implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; operator yourself. Consider the following example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Barcode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UPCA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QRCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Error: binary operator '==' cannot be applied to two Barcode operands&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Barcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;QRCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Barcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;QRCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you are well versed in Swift’s pattern matching capabilities, then conforming to &lt;code class=&quot;highlighter-rouge&quot;&gt;Equatable&lt;/code&gt; is very straightforward.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Barcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Equatable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Barcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Barcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UPCA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;codeA1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codeB1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UPCA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;codeA2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codeB2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codeA1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codeA2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codeB1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codeB2&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;QRCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;QRCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code2&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;Barcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;QRCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Barcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;QRCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Barcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UPCA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Barcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UPCA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4567&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7890&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Barcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Barcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even with Swift 2.0, the syntax is a somewhat difficult to read and difficult to remember. We must pattern match on each case and then unpack the associated values (if any) to compare them directly. That’s it! Now we can compare our custom enumerations.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Namespaced constants in Swift</title>
      <subtitle>Using nested types for clarity</subtitle>
      <link href="http://localhost:4000/blog/swift-namespaced-constants/" />
      <id>http://localhost:4000/blog/swift-namespaced-constants</id>

      <published>2015-07-19T00:00:00+00:00</published>
      
      <updated>2015-07-23T00:00:00+00:00</updated>
      

      <summary><p>Mike Ash has a great <a href="https://www.mikeash.com/pyblog/friday-qa-2011-08-19-namespaced-constants-and-functions.html">Friday Q&amp;A</a> on namespaced constants and functions in C. It is a powerful and elegant technique to avoid using <code class="highlighter-rouge">#define</code> and verbose Objective-C prefixes. Although Swift types are namespaced by their module, we can still benefit from implementing this pattern with <code class="highlighter-rouge">struct</code> and <code class="highlighter-rouge">enum</code> types. I’ve been experimenting with this approach for constants in Swift and it has been incredibly useful.</p>

</summary>
      <content type="html">&lt;p&gt;Mike Ash has a great &lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2011-08-19-namespaced-constants-and-functions.html&quot;&gt;Friday Q&amp;amp;A&lt;/a&gt; on namespaced constants and functions in C. It is a powerful and elegant technique to avoid using &lt;code class=&quot;highlighter-rouge&quot;&gt;#define&lt;/code&gt; and verbose Objective-C prefixes. Although Swift types are namespaced by their module, we can still benefit from implementing this pattern with &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; types. I’ve been experimenting with this approach for constants in Swift and it has been incredibly useful.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;icon-image-assets&quot;&gt;Icon image assets&lt;/h3&gt;

&lt;p&gt;We are all familiar with handling assets, particularly icons, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage(named:)&lt;/code&gt; API. And since iOS 7, many icons have two distinct visual states — &lt;em&gt;lined&lt;/em&gt; and &lt;em&gt;filled&lt;/em&gt;, or &lt;em&gt;normal&lt;/em&gt; and &lt;em&gt;selected&lt;/em&gt;. Thus, we find ourselves with two versions of each icon, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage(named:&quot;music&quot;)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage(named:&quot;music-selected&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/tabbar.png&quot; title=&quot;iOS Tab Bar&quot; alt=&quot;iOS Tab Bar&quot; /&gt;
&lt;small class=&quot;text-muted center&quot;&gt;iOS Tab Bar, taken from &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/Bars.html#//apple_ref/doc/uid/TP40006556-CH12-SW1&quot; target=&quot;_blank&quot;&gt;iOS Human Interface Guidelines&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;In the past, we strove to avoid &lt;a href=&quot;https://corner.squareup.com/2014/02/objc-codegenutils.html&quot;&gt;stringly-typed&lt;/a&gt; Objective-C in Cocoa by creating constants or categories. But rather than apply these same techniques in Swift with an &lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt;, we can do something more sophisticated.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Music&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Movies&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TVShows&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Search&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;More&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-selected&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Usage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Music&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;music&quot; icon&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iconSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Music&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;music-selected&quot; icon&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example, we are using the new &lt;a href=&quot;http://ericasadun.com/2015/07/08/swift-new-stuff-in-xcode-7-beta-3/&quot;&gt;default enum naming&lt;/a&gt; for enums with a string raw type. This alone makes a huge difference — no explicit, hard-coded strings at all! We now have constants for all of our icon names, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;image(selected:)&lt;/code&gt; method will return the correct &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may be thinking that we could implement an extension on &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; instead. But the goal here is proper namespacing, which makes our code easier to read and easier to write. With an extension, we are essentially in the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; namespace and I would argue that this functionality is not really appropriate to add to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; class globally. By creating a new type, we create our own namespace. We immediately know we are dealing with icon assets when reading and writing code. We can get precise code-completion suggestions from our editor without having to remember what kind of naming conventions our teammate used for the new methods on &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; — was it &lt;em&gt;musicIcon&lt;/em&gt; and &lt;em&gt;musicSelectedIcon&lt;/em&gt;, or &lt;em&gt;iconMusic&lt;/em&gt; and &lt;em&gt;iconMusicSelected&lt;/em&gt;? Instead, we can simply begin typing &lt;code class=&quot;highlighter-rouge&quot;&gt;Icon.&lt;/code&gt; and let the editor tell us what icons are available.&lt;/p&gt;

&lt;h3 id=&quot;custom-colors&quot;&gt;Custom colors&lt;/h3&gt;

&lt;p&gt;Another common use case for constants, or a Swift extension are for the custom colors in an app. It would be nice to be able to use an enum in this scenario, but an enum raw value type must be a &lt;strong&gt;value type&lt;/strong&gt; — sorry &lt;code class=&quot;highlighter-rouge&quot;&gt;UIColor&lt;/code&gt;. Alternatively, we can use structs and nested structs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ColorPalette&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1491&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5628&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3188&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3285&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5749&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gray&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Light&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8374&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Medium&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.4756&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2605&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Usage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ColorPalette&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Red&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;darkGray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ColorPalette&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Gray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Dark&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again, we should not add our custom colors to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIColor&lt;/code&gt; globally via an extension. For colors, using an extension presents even more challenges regarding naming. For example if you have a custom red color, you cannot name the method &lt;code class=&quot;highlighter-rouge&quot;&gt;redColor()&lt;/code&gt; because &lt;code class=&quot;highlighter-rouge&quot;&gt;UIColor&lt;/code&gt; already defines this class method. Do you name your method &lt;code class=&quot;highlighter-rouge&quot;&gt;red()&lt;/code&gt;? That’s kind of awkward. Do you prefix the method name like you would in Objective-C, &lt;code class=&quot;highlighter-rouge&quot;&gt;jsq_redColor()&lt;/code&gt;? That’s &lt;em&gt;more&lt;/em&gt; awkward in Swift. Given light and dark versions of colors, do you use &lt;code class=&quot;highlighter-rouge&quot;&gt;darkPurple()&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;purpleDark()&lt;/code&gt;? If you have many dark and light variants, it might be better to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;colorName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; naming convention. Regardless, everyone on your team will have different opinions on naming — and they will &lt;em&gt;&lt;strong&gt;all&lt;/strong&gt; be great!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Luckily we can avoid the naming wars (hopefully). Using nested structs gives us our own namespace with much richer semantics, avoids naming collisions with &lt;code class=&quot;highlighter-rouge&quot;&gt;UIColor&lt;/code&gt;, and provides precise code-completion from our editor.&lt;/p&gt;

&lt;h3 id=&quot;storyboards-and-beyond&quot;&gt;Storyboards and beyond&lt;/h3&gt;

&lt;p&gt;What is most interesting here is realizing how &lt;strong&gt;extensions can limit our design space&lt;/strong&gt;. (And the same applies to categories in Objective-C.) It is not hard to imagine how we could apply these techniques with regard to other resources in our apps: storyboards, xibs, or sound effects. You could even nest enums inside of structs, or enums inside of enums. So far, I’ve found this pattern of namespaced constants to be extremely useful.&lt;/p&gt;

&lt;p&gt;Let me know what you think! You can find me &lt;a href=&quot;http://twitter.com/jesse_squires&quot;&gt;on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;text-muted&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; There have been some attempts to automate something similar to what I have described, like &lt;a href=&quot;https://github.com/indragiek/swiftrsrc&quot;&gt;swiftrsrc&lt;/a&gt; and &lt;a href=&quot;https://github.com/krzyzanowskim/Natalie&quot;&gt;Natalie&lt;/a&gt;, but not exactly. Some of the deeper nesting might be difficult to automate, but I have yet to try this.&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;alert alert-danger&quot;&gt;
   &lt;strong&gt;Update&lt;/strong&gt; &lt;span class=&quot;pull-right&quot;&gt;&lt;em&gt;23 July 2015&lt;/em&gt;&lt;/span&gt;
   &lt;br /&gt;
   Inspired by this post, &lt;a href=&quot;https://twitter.com/leemorgan&quot; class=&quot;alert-link&quot; target=&quot;_blank&quot;&gt;Lee Morgan&lt;/a&gt; has written a build script that generates a Swift source file based on Xcode assets. Checkout the repo &lt;a href=&quot;https://github.com/leemorgan/AutoAssets&quot; class=&quot;alert-link&quot; target=&quot;_blank&quot;&gt;AutoAssets&lt;/a&gt; on GitHub. Thanks Lee!
&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Using Core Data in Swift</title>
      <subtitle>Talk at Realm in San Francisco</subtitle>
      <link href="http://localhost:4000/blog/using-core-data-in-swift/" />
      <id>http://localhost:4000/blog/using-core-data-in-swift</id>

      <published>2015-05-25T00:00:00+00:00</published>
      
      <updated>2015-05-25T00:00:00+00:00</updated>
      

      <summary><p>I recently gave a talk at the Swift Language User Group (<a href="http://www.meetup.com/swift-language/events/220612410/">#SLUG</a>) meetup at <a href="http://realm.io">Realm</a> in San Francisco. A <a href="http://realm.io/news/jesse-squires-core-data-swift/">video of the talk</a> is now online over at Realm’s blog, where it is synced up with my <a href="https://speakerdeck.com/jessesquires/using-core-data-in-swift">slides</a>. If you haven’t already seen it, go check it out! Realm does an absolutely amazing job with posting these meetup talks — in addition to the video and slides, there’s a full transcript and subtitles.</p>

</summary>
      <content type="html">&lt;p&gt;I recently gave a talk at the Swift Language User Group (&lt;a href=&quot;http://www.meetup.com/swift-language/events/220612410/&quot;&gt;#SLUG&lt;/a&gt;) meetup at &lt;a href=&quot;http://realm.io&quot;&gt;Realm&lt;/a&gt; in San Francisco. A &lt;a href=&quot;http://realm.io/news/jesse-squires-core-data-swift/&quot;&gt;video of the talk&lt;/a&gt; is now online over at Realm’s blog, where it is synced up with my &lt;a href=&quot;https://speakerdeck.com/jessesquires/using-core-data-in-swift&quot;&gt;slides&lt;/a&gt;. If you haven’t already seen it, go check it out! Realm does an absolutely amazing job with posting these meetup talks — in addition to the video and slides, there’s a full transcript and subtitles.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;talk-summary&quot;&gt;Talk summary&lt;/h3&gt;

&lt;p&gt;Realm’s notes and transcription are excellent, but I want to briefly to reiterate the main points of the talk here.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Put your model in its own framework. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;MyAppModel.framework&lt;/code&gt;. This gives your models a clear namespace, makes your app modular, prepares your models for reuse elsewhere, and makes them easier to test. Do not add your models to the Test Target, &lt;code class=&quot;highlighter-rouge&quot;&gt;import MyAppModel&lt;/code&gt; instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html&quot;&gt;designated initializers&lt;/a&gt; for your &lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObject&lt;/code&gt; subclasses that use &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt;. In other words, your initializer should be parameterized to receive values for &lt;strong&gt;all&lt;/strong&gt; of its properties. This prevents your models from bypassing Swift’s strict initialization rules, because of &lt;code class=&quot;highlighter-rouge&quot;&gt;@NSManaged&lt;/code&gt;. Without doing this, you could end up with an instance of a model that is &lt;strong&gt;not&lt;/strong&gt; fully initialized. Further, provide default parameter values where possible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use Swift features. Make good use of optionals, &lt;code class=&quot;highlighter-rouge&quot;&gt;typealias&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; to make your models more clear. Remember, Xcode does not properly generate classes with optional properties.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;a href=&quot;https://github.com/jessesquires/JSQCoreDataKit&quot;&gt;JSQCoreDataKit&lt;/a&gt;! :) I plan on improving and adding to the framework as I use it in my side projects. If you are building an app using Swift and Core Data, please consider using it — contributions are more than welcome!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’m interested in bringing type-safety and functional paradigms to Core Data. Currently, this approach means eschewing much of Objective-C’s dynamicism, which unfortunately leaves popular libraries like &lt;a href=&quot;https://github.com/Mantle/Mantle&quot;&gt;Mantle&lt;/a&gt; incompatible. This is mostly due to using designated initializers in Swift.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;other-notes&quot;&gt;Other notes&lt;/h3&gt;

&lt;p&gt;There was a comment about iterating through the &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObjectModel_Class/index.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObjectModel&lt;/code&gt;&lt;/a&gt;. Details and discussion can be found at &lt;a href=&quot;https://gist.github.com/nevyn/d22c4684370fa07078dd&quot;&gt;this gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alejandro (&lt;a href=&quot;https://twitter.com/mephl&quot;&gt;&lt;strong&gt;@mephl&lt;/strong&gt;&lt;/a&gt;) &lt;a href=&quot;https://twitter.com/mephl/status/601003780700655616&quot;&gt;pointed out&lt;/a&gt; that &lt;code class=&quot;highlighter-rouge&quot;&gt;NSBatchUpdateRequest&lt;/code&gt; exists as of iOS 8. Awesome news! Anyone else feel like it is getting harder to keep track of all the changes and additions each year at WWDC?&lt;/p&gt;

&lt;h3 id=&quot;radar-or-gtfo&quot;&gt;Radar, or GTFO&lt;/h3&gt;

&lt;p&gt;I’ve filed the following radars for the issues I’ve experienced using Core Data in Swift. Duplicates are encouraged! And don’t forget to report anything else that you find.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://openradar.appspot.com/radar?id=6747306682482688&quot;&gt;rdar://21098460&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://openradar.appspot.com/radar?id=5534736382427136&quot;&gt;rdar://21098402&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://openradar.appspot.com/radar?id=4963635386384384&quot;&gt;rdar://21098433&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
   </entry>
   
   <entry>
      <title>Failable initializers, revisited</title>
      <subtitle>Functional approaches to avoid Swift's failable initializers</subtitle>
      <link href="http://localhost:4000/blog/swift-failable-initializers-revisited/" />
      <id>http://localhost:4000/blog/swift-failable-initializers-revisited</id>

      <published>2015-04-06T00:00:00+00:00</published>
      
      <updated>2015-04-06T00:00:00+00:00</updated>
      

      <summary><p>In a <a href="/swift-failable-initializers/">previous</a> post, I discussed how Swift’s <a href="https://developer.apple.com/swift/blog/?id=17">failable initializers</a> could be problematic. Specifically, I argued that their ease of use could persuade or encourage us to revert to old (bad) Objective-C habits of returning <code class="highlighter-rouge">nil</code> from <code class="highlighter-rouge">init</code>. Initialization is usually <em>not the right place</em> to fail. We should aim to avoid optionals as much as possible to reduce having to handle this absence of values. Recently, <strong>@danielgomezrico</strong> asked a great <a href="https://github.com/jessesquires/jessesquires.github.io/issues/8">question</a> about a possible use case for a failable initializer — parsing JSON. <a href="http://owensd.io/2014/06/18/json-parsing.html">Given</a> <a href="http://chris.eidhof.nl/posts/json-parsing-in-swift.html">this</a> problem’s <a href="https://github.com/SwiftyJSON/SwiftyJSON">popularity</a> in the Swift community, I thought sharing my response here would be helpful.</p>

</summary>
      <content type="html">&lt;p&gt;In a &lt;a href=&quot;/swift-failable-initializers/&quot;&gt;previous&lt;/a&gt; post, I discussed how Swift’s &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=17&quot;&gt;failable initializers&lt;/a&gt; could be problematic. Specifically, I argued that their ease of use could persuade or encourage us to revert to old (bad) Objective-C habits of returning &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;. Initialization is usually &lt;em&gt;not the right place&lt;/em&gt; to fail. We should aim to avoid optionals as much as possible to reduce having to handle this absence of values. Recently, &lt;strong&gt;@danielgomezrico&lt;/strong&gt; asked a great &lt;a href=&quot;https://github.com/jessesquires/jessesquires.github.io/issues/8&quot;&gt;question&lt;/a&gt; about a possible use case for a failable initializer — parsing JSON. &lt;a href=&quot;http://owensd.io/2014/06/18/json-parsing.html&quot;&gt;Given&lt;/a&gt; &lt;a href=&quot;http://chris.eidhof.nl/posts/json-parsing-in-swift.html&quot;&gt;this&lt;/a&gt; problem’s &lt;a href=&quot;https://github.com/SwiftyJSON/SwiftyJSON&quot;&gt;popularity&lt;/a&gt; in the Swift community, I thought sharing my response here would be helpful.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The problem&lt;/h3&gt;

&lt;p&gt;Suppose we have a JSON object that contains the data for a model object. Should we write a failable initializer for this model that receives the JSON, and fails if there is problem with parsing or validation? This scenario would look similar to the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Some JSON for MyModel&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSON&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Some model&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Usage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataFromServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// success&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// failure&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This rather straightforward, but is using &lt;code class=&quot;highlighter-rouge&quot;&gt;init?&lt;/code&gt; the best solution? There are some issues here that we need to address. First, the model &lt;em&gt;knows&lt;/em&gt; &lt;strong&gt;everything&lt;/strong&gt;. It knows that JSON is a thing, that JSON exists. It shouldn’t. A model should be a dumb container (preferably immutable) that holds data. Even worse, the model knows &lt;em&gt;how to parse&lt;/em&gt; the JSON. This means the model knows how JSON is generally structured and how it works, but more specifically it knows how &lt;em&gt;itself is represented as JSON&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What if the structure or keys in the JSON change? Then we would have to update our model. What if we are using &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreData/cdProgrammingGuide.html&quot;&gt;Core Data&lt;/a&gt;, and our model is an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObject&lt;/code&gt; subclass? Then we would have to stand up an &lt;strong&gt;entire&lt;/strong&gt; Core Data stack just to unit test the JSON parsing. What if the service from which we receive the JSON changes and instead we receive XML? Then we would need a new initializer, &lt;code class=&quot;highlighter-rouge&quot;&gt;init?(xml: XML)&lt;/code&gt;, and the model would know all about XML.&lt;/p&gt;

&lt;p&gt;This design has put our model in a fragile position.&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The solution&lt;/h3&gt;

&lt;p&gt;The issues above can be addressed by removing the model’s dependency on JSON (or XML) and creating single-purpose objects for each step of the process: (1) validating the JSON, (2) parsing the JSON, and (3) constructing the model.&lt;/p&gt;

&lt;p&gt;The first step is creating a generic validator object. We’ll use a &lt;a href=&quot;http://www.objc.io/snippets/13.html&quot;&gt;phantom type&lt;/a&gt; to ensure that a validator can only validate the JSON for a specific type of model. We initialize the validator with a closure that receives JSON and returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;Bool&lt;/code&gt; indicating whether or not it is valid. This closure is saved as a property on the validator.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ValidationClosure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ValidationClosure&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ValidationClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Usage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// validate the json&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The combination of a phantom type and a closure property enable us to construct many unique validators, while maintaining a single generic interface through which validation occurs. In other words, we do not have to create many different concrete validators (or validator subclasses) for many different models. Additionally, in this example you can see how this brings type-safety and readability to the validator. We know that this validator is for &lt;code class=&quot;highlighter-rouge&quot;&gt;MyModel&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;Next, we’ll define a JSON parser protocol, and implement a concrete parser. The protocol will allow us to reference parsers throughout our code in a generic way, while enabling each concrete parser to know about parsing a specific type of model. The parser will receive JSON, parse it, and return a model. We’ll also add a new (more proper) designated initializer to &lt;code class=&quot;highlighter-rouge&quot;&gt;MyModel&lt;/code&gt; that uses &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; and remove the old one, &lt;code class=&quot;highlighter-rouge&quot;&gt;init?(json: JSON)&lt;/code&gt;. This parser assumes that the JSON has already been validated.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONParserType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModelParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONParserType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// parse json and construct MyModel&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can put everything together. Once we receive JSON, we can validate it. If validation fails, then we are finished and there is no need to continue. With this solution, no failable initializers are required.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataFromServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// validate the json&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// handle bad json&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModelParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is much better. We have divided the problem into smaller subproblems and addressed each one individually. Even better, we can now unit test each component in isolation. However, because we are using Swift we can make this better. We can combine all the steps above into a top-level generic function. This function receives each of the components above — JSON, a validator, and a parser — and returns a model.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONParserType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Usage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// success&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// failure&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Suffering from &lt;a href=&quot;http://inessential.com/2015/02/04/random_swift_things&quot;&gt;angle-brack-T blindness&lt;/a&gt;? Me too. Let’s break this down. The type parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; specifies the model type. The validator must be a validator for &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;, and the function returns an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;T?&lt;/code&gt;. The type parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; specifies the parser type, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt; clause enforces that the parser &lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; parses models of type &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;. If validation fails, then the function returns &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;, otherwise it will parse the JSON and return a model.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;text-muted&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Depending on your architecture, it may not be possible nor worthwhile to have separate validation and parsing steps for JSON. If so, these two steps could be combined into the parser object and everything will still work wonderfully.&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;when-to-fail&quot;&gt;When to fail&lt;/h3&gt;

&lt;p&gt;As you can see, we have a clear separation of concerns, easily testable code, and no failable initializers. Of course there will be situations where a solution like this is not possible, namely, resource loading. For example, a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;NSBundle&lt;/code&gt; represents an actual resource on disk. If a resource does not exist, then the class that represents it cannot be instantiated and using a failable initializer is perfect. In this situation, &lt;code class=&quot;highlighter-rouge&quot;&gt;init?&lt;/code&gt; has exactly the semantics we want. But for models and similar instances, using &lt;code class=&quot;highlighter-rouge&quot;&gt;init?&lt;/code&gt; is probably not a good idea.&lt;/p&gt;

&lt;p&gt;Next time you find yourself wanting to write &lt;code class=&quot;highlighter-rouge&quot;&gt;init?&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;, there is likely a way to avoid it with a more thoughtful design that will push optionals and failure states further toward the edges of your object graph. Remember, &lt;strong&gt;&lt;em&gt;where&lt;/em&gt; we choose to fail &lt;em&gt;does&lt;/em&gt; matter.&lt;/strong&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Functional notifications</title>
      <subtitle>Exploring the flexibility of Swift micro-libraries</subtitle>
      <link href="http://localhost:4000/blog/functional-notifications/" />
      <id>http://localhost:4000/blog/functional-notifications</id>

      <published>2015-03-31T00:00:00+00:00</published>
      
      <updated>2015-03-31T00:00:00+00:00</updated>
      

      <summary><p>The <a href="http://en.wikipedia.org/wiki/Observer_pattern">observer pattern</a> is a powerful way to decouple the sending and handling of events between objects in a system. On iOS, one implementation of this pattern is via <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSNotificationCenter_Class">NSNotificationCenter</a>. However, the <code class="highlighter-rouge">NSNotificationCenter</code> APIs are kind of cumbersome to use and require some boilerplate code. Luckily, Swift gives us the tools to improve <code class="highlighter-rouge">NSNotificationCenter</code> with very little code.</p>

</summary>
      <content type="html">&lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;observer pattern&lt;/a&gt; is a powerful way to decouple the sending and handling of events between objects in a system. On iOS, one implementation of this pattern is via &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSNotificationCenter_Class&quot;&gt;NSNotificationCenter&lt;/a&gt;. However, the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSNotificationCenter&lt;/code&gt; APIs are kind of cumbersome to use and require some boilerplate code. Luckily, Swift gives us the tools to improve &lt;code class=&quot;highlighter-rouge&quot;&gt;NSNotificationCenter&lt;/code&gt; with very little code.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;out-with-the-old&quot;&gt;Out with the old&lt;/h3&gt;

&lt;p&gt;A while back, &lt;a href=&quot;http://www.objc.io&quot;&gt;objc.io&lt;/a&gt; posted functional &lt;a href=&quot;http://www.objc.io/snippets/16.html&quot;&gt;snippet 16&lt;/a&gt;, on &lt;em&gt;Typed Notification Observers&lt;/em&gt;. I had already been working on a generic, reusable way to observe notifications in iOS, but this snippet really pointed me in the right direction. One major motivation here is to remove the boilerplate of handling notifications. A typical example would be a view controller that registers to observe a notification and implements an instance method to be called when the notification is received.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNotificationCenter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
                                             &lt;span class=&quot;nf&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handleNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                                 &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIApplicationDidReceiveMemoryWarningNotification&lt;/span&gt;
                                               &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealloc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNotificationCenter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ... a bunch of view controller code ...
&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handleNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNotification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// handle notification
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is problematic for a few reasons.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We need to remember to explicitly add and remove &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; as an observer. Forgetting to remove &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;dealloc&lt;/code&gt; is a bug.&lt;/li&gt;
  &lt;li&gt;The code that actually handles the notification is in a totally different area (the &lt;code class=&quot;highlighter-rouge&quot;&gt;handleNotification:&lt;/code&gt; method). As more code is added to this class, it becomes more difficult to see what is happening and when.&lt;/li&gt;
  &lt;li&gt;Because this is Objective-C, there is no type-safety. An &lt;code class=&quot;highlighter-rouge&quot;&gt;NSNotification&lt;/code&gt; can have an &lt;em&gt;object&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;) property and &lt;em&gt;userInfo&lt;/em&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDictionary&lt;/code&gt;) property. If accessing the object, we must know how cast it. And if accessing the dictionary, we must know what it contains.&lt;/li&gt;
  &lt;li&gt;We must duplicate this pattern across all parts of our app, proliferating issues (1), (2), and (3).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;a-new-micro-library&quot;&gt;A new micro-library&lt;/h3&gt;

&lt;p&gt;Say hello to &lt;a href=&quot;https://github.com/jessesquires/JSQNotificationObserverKit&quot;&gt;JSQNotificationObserverKit&lt;/a&gt;, a Swift framework based on &lt;a href=&quot;http://www.objc.io/snippets/16.html&quot;&gt;snippet 16&lt;/a&gt;. This framework remedies the issues described above with a &lt;em&gt;tiny&lt;/em&gt; API that is &lt;em&gt;extremely&lt;/em&gt; flexible. As you’ll notice from the &lt;a href=&quot;http://www.jessesquires.com/JSQNotificationObserverKit&quot;&gt;documentation&lt;/a&gt;, there is only 1 class, 1 struct, and 1 function. This is all we need, which is as awesome as it is surprising. Let’s see how it works.&lt;/p&gt;

&lt;p&gt;We begin by creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification&lt;/code&gt;. This struct has two type parameters: a value &lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt; and sender &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;. The type of value &lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt; that the notification sends is a &lt;a href=&quot;http://www.objc.io/snippets/13.html&quot;&gt;phantom type&lt;/a&gt;, while &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; is the type of sender associated with the notification. A &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification&lt;/code&gt; also has a &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; property and an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;sender&lt;/code&gt; property.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 1. Suppose we have a UIView that posts a notification when its size changes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2. This notification posts a CGSize value from a UIView sender&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;notification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NewViewSizeNotif&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, we create our &lt;code class=&quot;highlighter-rouge&quot;&gt;NotificationObserver&lt;/code&gt;, which is initialized with the notification described above and a closure to be called when the notification is received. Instantiating this observer automatically adds it to &lt;code class=&quot;highlighter-rouge&quot;&gt;NSNotificationCenter&lt;/code&gt; for the notification &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sender&lt;/code&gt; specified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification&lt;/code&gt; function parameter. Because &lt;code class=&quot;highlighter-rouge&quot;&gt;NotificationObserver&lt;/code&gt; has the same type parameters as &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification&lt;/code&gt;, it can &lt;em&gt;only&lt;/em&gt; observe that &lt;em&gt;specific&lt;/em&gt; kind of notification.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 3. This observer listens for the notification described above&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;observer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NotificationObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 4. Register observer, start listening for the notification&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NotificationObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// handle notification&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we post the notification using the &lt;code class=&quot;highlighter-rouge&quot;&gt;postNotification(_:value:)&lt;/code&gt; function. Again, this function has the same type parameters as &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification&lt;/code&gt;, which enforces sending a value of the type specified by the phantom type of &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification&lt;/code&gt;. In this example, we can &lt;strong&gt;only&lt;/strong&gt; send a &lt;code class=&quot;highlighter-rouge&quot;&gt;CGSize&lt;/code&gt; as the value. Anything else would result in a compiler error.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 5. Post the notification with the updated CGSize value&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;postNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSizeMake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When the observer is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; (when it is deallocated), then it is removed from &lt;code class=&quot;highlighter-rouge&quot;&gt;NSNotificationCenter&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 6. Unregister observer, stop listening for notifications&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s all. Each of the aforementioned issues have been resolved. Registering and unregistering for a notification is now as simple as creating and destroying an observer object. The code for the registration and handling of the notification is all in one place. We have type-safety, and a reusable solution for the rest of our app.&lt;/p&gt;

&lt;h3 id=&quot;tiny-but-flexible&quot;&gt;Tiny, but flexible&lt;/h3&gt;

&lt;p&gt;So how flexible is this small API? The example above works for a notification with a sender and a value, but what about a notification that only has a value? Or a notification that only has a sender? Or a notification that has neither? What about supporting more typical Cocoa notifications that send a &lt;em&gt;userInfo&lt;/em&gt; dictionary? We can do it all.&lt;/p&gt;

&lt;p&gt;A notification can be configured in 4 different ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It can have a specific sender and value (as in the example above)&lt;/li&gt;
  &lt;li&gt;It can have only a sender. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplicationDidReceiveMemoryWarningNotification&lt;/code&gt; does not send any data in the &lt;em&gt;userInfo&lt;/em&gt; dictionary.&lt;/li&gt;
  &lt;li&gt;It can only have a value. Sometimes observers do not care which object posted a given notification.&lt;/li&gt;
  &lt;li&gt;It can have neither a sender, nor a value. Sometimes a notification may be posted to notify of an event, and either there isn’t an associated sender, or the observer does not care.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For notifications without a sender, or for which the observer does not care about the sender, we can specify a sender of type &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyObject&lt;/code&gt;. When we initialize a &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification&lt;/code&gt;, we can omit the &lt;code class=&quot;highlighter-rouge&quot;&gt;sender&lt;/code&gt; parameter which defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. The semantics here are great. &lt;em&gt;Any object&lt;/em&gt; can send this notification, it does not matter to the observer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyValueType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;notification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyValueType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Notification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;postNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For notifications without a value, we simply specify a value type of &lt;code class=&quot;highlighter-rouge&quot;&gt;Void&lt;/code&gt;. Then when the notification is posted we send the empty tuple, &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;. Remember, the empty tuple is equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;Void&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;notification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyObjectType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Notification&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;postNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From here, it is easy to see how we can construct and post a notification with neither a value nor a sender. Furthermore, the value type could be a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dictionary&lt;/code&gt; which allows this API to conform to the existing patterns in Cocoa. For more examples on usage, see the unit tests included with &lt;a href=&quot;https://github.com/jessesquires/JSQNotificationObserverKit&quot;&gt;JSQNotificationObserverKit&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;less-is-more&quot;&gt;Less is more&lt;/h3&gt;

&lt;p&gt;It really is incredible how much we can accomplish with so little — 1 class, 1 struct, and 1 function. An equivalent API in Objective-C would have been more than double the size and still not type-safe. I think the &lt;a href=&quot;http://www.objc.io/snippets/&quot;&gt;objc.io snippets&lt;/a&gt; are absolutely great, but they are often deceptively simple. The power and flexibility of these functional patterns is not always obvious to a tenured Objective-C developer. If you want to learn even more about micro-libraries, check out Chris Eidhof’s talk on &lt;a href=&quot;http://realm.io/news/chris-eidhof-micro-libraries-swift&quot;&gt;&lt;em&gt;Tiny Networking&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Better Core Data models in Swift</title>
      <subtitle>How Swift can bring clarity and safety to your managed objects</subtitle>
      <link href="http://localhost:4000/blog/better-coredata-models-in-swift/" />
      <id>http://localhost:4000/blog/better-coredata-models-in-swift</id>

      <published>2015-02-17T00:00:00+00:00</published>
      
      <updated>2015-02-17T00:00:00+00:00</updated>
      

      <summary><p>As I continue my work with <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreData/cdProgrammingGuide.html">Core Data</a> and <a href="http://www.apple.com/swift/">Swift</a>, I have been trying to find ways to make Core Data <strong>better</strong>. Among my goals are clarity and safety, specifically regarding types. Luckily, we can harness Swift’s optionals, enums, and other features to make managed objects more robust and more clear. But even with the improvements that Swift brings, there are still some drawbacks and limitations with Xcode’s current toolset.</p>

</summary>
      <content type="html">&lt;p&gt;As I continue my work with &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreData/cdProgrammingGuide.html&quot;&gt;Core Data&lt;/a&gt; and &lt;a href=&quot;http://www.apple.com/swift/&quot;&gt;Swift&lt;/a&gt;, I have been trying to find ways to make Core Data &lt;strong&gt;better&lt;/strong&gt;. Among my goals are clarity and safety, specifically regarding types. Luckily, we can harness Swift’s optionals, enums, and other features to make managed objects more robust and more clear. But even with the improvements that Swift brings, there are still some drawbacks and limitations with Xcode’s current toolset.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;a-great-case-for-optionals&quot;&gt;A great case for optionals&lt;/h3&gt;

&lt;p&gt;There’s been plenty of &lt;a href=&quot;http://owensd.io/2014/10/18/optionals-beware.html&quot;&gt;feedback&lt;/a&gt; in the community about &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID330&quot;&gt;optionals&lt;/a&gt; and how they are often &lt;a href=&quot;http://natashatherobot.com/unit-testing-optionals-in-swift-xctassertnotnil/&quot;&gt;cumbersome&lt;/a&gt; to use. However, this relatively simple construct brings a welcoming clarity to managed objects when working with Core Data. When defining entities in Core Data, it is possible to set some basic validation rules for an entity’s attributes in the Data Model Inspector.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/coredata_inspector.jpg&quot; title=&quot;Core Data Model Inspector&quot; alt=&quot;Core Data Model Inspector&quot; /&gt;
&lt;small class=&quot;text-muted center&quot;&gt;Data Model Inspector for Core Data managed objects.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;You can define minimum and maximum values, provide default values, mark attributes as optional, and more. This is nothing new. But in Objective-C, the optionality of a property on a managed object could only be discovered by opening the &lt;code class=&quot;highlighter-rouge&quot;&gt;.xcdatamodeld&lt;/code&gt; file in Xcode, then selecting the entity, then selecting the attribute, and then opening the Data Model Inspector in the sidebar. Or, at runtime you find out that your &lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObjectContext&lt;/code&gt; fails to save because of &lt;code class=&quot;highlighter-rouge&quot;&gt;Cocoa error 1570&lt;/code&gt;. Neither of these experiences are enjoyable.&lt;/p&gt;

&lt;p&gt;For example, imagine we have the following &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; class. What fields are required for a save to succeed?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSManagedObject&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateOfBirth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middleName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSDecimalNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By contrast, when using Swift we immediately know what properties are optional simply by looking at the code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dateOfBirth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;middleName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDecimalNumber&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int32&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;span class=&quot;text-muted&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Xcode does not generate Swift classes accurately when they have optional attributes. You must manually add the &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; for optional values. Further, though &lt;em&gt;The Swift Programming Language&lt;/em&gt; guide &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID317&quot;&gt;recommends&lt;/a&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt; for all integer variables, Core Data recommends using specific integer sizes and complains if you attempt to do otherwise, thus the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;Int32&lt;/code&gt; for the &lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt; property.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This seems like a minor detail, but it’s a huge win — especially when you begin to work with your models throughout the rest of your app. As with optionals in general, you will need to explicitly handle &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; (which I think is a positive side effect). But even with the &lt;a href=&quot;http://www.scottlogic.com/blog/2014/12/08/swift-optional-pyramids-of-doom.html&quot;&gt;&lt;em&gt;pyramid of doom&lt;/em&gt;&lt;/a&gt; behind us, this may not be pleasant if you have a lot of optionals. If this is the case, hopefully it will encourage you to &lt;em&gt;reconsider your design&lt;/em&gt;. Is this field &lt;em&gt;really&lt;/em&gt; necessary? Could this property be derived from other data? Should this property be &lt;em&gt;required&lt;/em&gt; instead? These are questions one should always be asking when designing model classes, but perhaps the leniency of Objective-C allowed them to be dismissed before. &lt;strong&gt;Optionals complicate your model&lt;/strong&gt;, which is a great motivation to use as few as possible and keep things simple.&lt;/p&gt;

&lt;p&gt;Given this, let’s review our &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; class. Is &lt;code class=&quot;highlighter-rouge&quot;&gt;middleName&lt;/code&gt; important? No, let’s remove it. Suppose that we know that all employees have an email address with the form: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;firstName&amp;gt;&amp;lt;LastName&amp;gt;@&amp;lt;companyName&amp;gt;.com&lt;/code&gt;. Do we really need to store it? No, we can write a function or computed property to generate that. Finally, let’s assume that employees should be required to have an &lt;code class=&quot;highlighter-rouge&quot;&gt;address&lt;/code&gt;. Ahh, this is looking much better now.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dateOfBirth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDecimalNumber&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int32&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;taking-advantage-of-typealias&quot;&gt;Taking advantage of &lt;code class=&quot;highlighter-rouge&quot;&gt;typealias&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Another Swift feature we can use is a &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID361&quot;&gt;type alias declaration&lt;/a&gt;, which allows a new name to refer to an existing type. For an &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt;, it could be very helpful to work with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Salary&lt;/code&gt; type instead of an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDecimalNumber&lt;/code&gt; type. In the depths of the codebase, there may be operations on &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDecimalNumber&lt;/code&gt; values where it is not clear what those values represent. A &lt;code class=&quot;highlighter-rouge&quot;&gt;typealias&lt;/code&gt; makes our model much more descriptive and allows us to operate on values of a much more expressive &lt;code class=&quot;highlighter-rouge&quot;&gt;Salary&lt;/code&gt; type.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// other properties...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDecimalNumber&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Salary&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then write functions that receive and return an &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee.Salary&lt;/code&gt; type. Such functions can retain their brevity, while maximizing their clarity.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeRaise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Salary&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As noted in &lt;a href=&quot;http://www.objc.io&quot;&gt;objc.io&lt;/a&gt;, &lt;em&gt;we can take this one step further&lt;/em&gt; by using a &lt;a href=&quot;http://www.objc.io/snippets/8.html&quot;&gt;wrapper type&lt;/a&gt;. To do this with an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObject&lt;/code&gt; subclass, we’ll need to do some wrapping and unwrapping (no pun intended). First, the original property in Core Data should be marked as &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;. Then we can use a computed property for the new wrapper type that transforms the private property value to and from the wrapper value. This is a bit of work, but the clarity and safety we receive in return are well worth it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Salary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDecimalNumber&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// other properties...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;salaryAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDecimalNumber&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Salary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;salaryAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;salaryAmount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Usage&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10000.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, for fetch requests you still need to use the underlying private property name, &lt;code class=&quot;highlighter-rouge&quot;&gt;salaryAmount&lt;/code&gt;. This is because Core Data doesn’t know about the &lt;code class=&quot;highlighter-rouge&quot;&gt;salary&lt;/code&gt; computed property, nor the &lt;code class=&quot;highlighter-rouge&quot;&gt;Salary&lt;/code&gt; type. However, I think the naming conventions used here minimize confusion. That is, &lt;code class=&quot;highlighter-rouge&quot;&gt;salary.amount&lt;/code&gt; corresponds to the private &lt;code class=&quot;highlighter-rouge&quot;&gt;salaryAmount&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;using-swift-enumerations&quot;&gt;Using Swift enumerations&lt;/h3&gt;

&lt;p&gt;It is not uncommon for a model object to encode some type of state as an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;. With Objective-C, you could define an &lt;code class=&quot;highlighter-rouge&quot;&gt;NS_ENUM&lt;/code&gt; and store an integer property in your managed object. But an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; in Objective-C is little more than a glorified integer. By adopting an approach similar to the wrapper type above, we can get all the power of a Swift &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; directly in our managed object. This is incredibly useful.&lt;/p&gt;

&lt;p&gt;Let’s see what this would look like for the &lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt; property in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; class.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EmployeeStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReadyForHire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Hired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Retired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Resigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Deceased&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// other properties...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;statusValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int32&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EmployeeStatus&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EmployeeStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rawValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statusValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statusValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValue&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Usage&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Hired&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;span class=&quot;text-muted&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Just as in the previous example, for fetch requests you would still need to use the private property name, &lt;code class=&quot;highlighter-rouge&quot;&gt;statusValue&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, this is not limited to integers. You can apply this strategy with an enumeration of &lt;strong&gt;any&lt;/strong&gt; type that Core Data supports. For example, for an &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; there could be fixed salary amounts that correspond to an employee’s role. With slightly more effort, you can even support an enumeration with &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html#//apple_ref/doc/uid/TP40014097-CH12-ID148&quot;&gt;associated values&lt;/a&gt;. I’ll leave that as an exercise for the reader.&lt;/p&gt;

&lt;h3 id=&quot;clarity-or-something-slightly-less-terrible&quot;&gt;Clarity, or something slightly less terrible&lt;/h3&gt;

&lt;p&gt;Swift has a lot of potential to improve Core Data, but it does require more effort for developers and has some inconvenient workarounds and shortcomings. While I think it’s worth the time, the wrapping and unwrapping of values described above can be tedious to implement. And having to use the underlying private property names for fetch requests feels dirty. On the bright side, we get optionals and type aliases for free — a great step forward.&lt;/p&gt;

&lt;p&gt;In any case, I do think this is better than what we had before. Sometimes it seems like Swift is bringing out the worst in Cocoa and Objective-C. Here’s to hoping the toolset will improve — and when Cocoa finally &lt;a href=&quot;http://nshipster.com/the-death-of-cocoa/&quot;&gt;dies&lt;/a&gt;, I’ll be cheering for a Swift re-implementation of Core Data.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Swift, Core Data, and unit testing</title>
      <subtitle>Working around Swift's constraints to unit test models</subtitle>
      <link href="http://localhost:4000/blog/swift-coredata-and-testing/" />
      <id>http://localhost:4000/blog/swift-coredata-and-testing</id>

      <published>2015-01-05T00:00:00+00:00</published>
      
      <updated>2015-01-05T00:00:00+00:00</updated>
      

      <summary><p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreData/cdProgrammingGuide.html">Core Data</a> is probably loved as much as it is shunned by iOS developers. It is a framework of great power that often comes with great frustration. But it remains a popular tool among developers despite its pitfalls — likely because Apple continues to <a href="https://developer.apple.com/videos/wwdc/2014/?id=225">invest</a> in it and encourages its adoption, as well as the availability of the <a href="http://nshipster.com/core-data-libraries-and-utilities/">many</a> open-source <a href="https://github.com/rosettastone/RSTCoreDataKit">libraries</a> that make Core Data easier to use. Consider unit testing, and Core Data gets a bit more cumbersome. Luckily, there are <a href="https://github.com/rosettastone/RSTCoreDataKit#unit-testing">established techniques</a> to facilitate testing your models. Add <a href="http://www.apple.com/swift/">Swift</a> to this equation, and the learning curve gets slightly steeper.</p>

</summary>
      <content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreData/cdProgrammingGuide.html&quot;&gt;Core Data&lt;/a&gt; is probably loved as much as it is shunned by iOS developers. It is a framework of great power that often comes with great frustration. But it remains a popular tool among developers despite its pitfalls — likely because Apple continues to &lt;a href=&quot;https://developer.apple.com/videos/wwdc/2014/?id=225&quot;&gt;invest&lt;/a&gt; in it and encourages its adoption, as well as the availability of the &lt;a href=&quot;http://nshipster.com/core-data-libraries-and-utilities/&quot;&gt;many&lt;/a&gt; open-source &lt;a href=&quot;https://github.com/rosettastone/RSTCoreDataKit&quot;&gt;libraries&lt;/a&gt; that make Core Data easier to use. Consider unit testing, and Core Data gets a bit more cumbersome. Luckily, there are &lt;a href=&quot;https://github.com/rosettastone/RSTCoreDataKit#unit-testing&quot;&gt;established techniques&lt;/a&gt; to facilitate testing your models. Add &lt;a href=&quot;http://www.apple.com/swift/&quot;&gt;Swift&lt;/a&gt; to this equation, and the learning curve gets slightly steeper.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;prefix-managed-object-subclasses&quot;&gt;Prefix managed object subclasses&lt;/h3&gt;

&lt;p&gt;Because Swift classes are namespaced, you must prefix the class name with the name of the module in which it is compiled. You can do this by opening your &lt;code class=&quot;highlighter-rouge&quot;&gt;.xcdatamodeld&lt;/code&gt; file in Xcode, selecting an entity, and opening the model entity inspector.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/coredata_namespace.png&quot; title=&quot;Core Data namespace&quot; alt=&quot;Core Data namespace&quot; /&gt;
&lt;small class=&quot;text-muted center&quot;&gt;Using Swift namespaces with Core Data. Image taken from &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/WritingSwiftClassesWithObjective-CBehavior.html#//apple_ref/doc/uid/TP40014216-CH5-XID_56&quot;&gt;Using Swift with Cocoa and Objective-C&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;This is certainly easy to forget, and if you do, you’ll see this error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CoreData: warning: Unable to load class named 'Person' for entity 'Person'.
Class not found, using default NSManagedObject instead.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Not very helpful, is it? When I first saw this, it took me a few puzzling minutes to realize that I had forgotten to prefix my class names. And there’s another catch. You must add the module name prefix &lt;strong&gt;after&lt;/strong&gt; you generate the classes, otherwise Xcode will not create the classes properly (or at all). This is a bug.&lt;/p&gt;

&lt;h3 id=&quot;implementing-common-managed-object-extensions&quot;&gt;Implementing common managed object extensions&lt;/h3&gt;

&lt;p&gt;Most of the existing Objective-C Core Data libraries that you’ll find implement the following helper methods in some way, if not verbatim. These methods mitigate the awkwardness of inserting new objects into Core Data and avoid &lt;a href=&quot;http://corner.squareup.com/2014/02/objc-codegenutils.html&quot;&gt;&lt;em&gt;stringly-typed&lt;/em&gt; Objective-C&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Helpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entityName&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSStringFromClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;insertNewObjectInContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSManagedObjectContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSEntityDescription&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;insertNewObjectForEntityForName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                         &lt;span class=&quot;nv&quot;&gt;inManagedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I have decided to use Swift for one of my side projects, and in designing the model layer of the app my first thought was to rewrite these methods in Swift. Let’s see what that would look like.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;entityName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fullClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSStringFromClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_getClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;classNameComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classNameComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertNewObjectInContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSEntityDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insertNewObjectForEntityForName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;entityName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inManagedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hm. The &lt;code class=&quot;highlighter-rouge&quot;&gt;entityName()&lt;/code&gt; function just became much less elegant. Remember, we have to prefix our Swift classes for Core Data which means their fully qualified names take the form &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ModuleName&amp;gt;.&amp;lt;ClassName&amp;gt;&lt;/code&gt;. This means we must parse out the &lt;em&gt;entity name&lt;/em&gt; which is the class name only. This seems fragile and probably isn’t a good idea. Additionally, we have to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;object_getClass()&lt;/code&gt; function from the &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html&quot;&gt;Objective-C runtime library&lt;/a&gt;, which feels dirty — &lt;em&gt;even in Objective-C&lt;/em&gt;. I’ve always avoided using such &lt;a href=&quot;http://nshipster.com/associated-objects/&quot;&gt;runtime&lt;/a&gt; &lt;a href=&quot;http://nshipster.com/method-swizzling/&quot;&gt;voodoo&lt;/a&gt; as much as possible, opting for actual design patterns instead. Even &lt;code class=&quot;highlighter-rouge&quot;&gt;NSStringFromClass()&lt;/code&gt; feels &lt;em&gt;wrong&lt;/em&gt; in Swift. And generally speaking, &lt;em&gt;what do we gain by simply rewriting our &lt;strong&gt;old&lt;/strong&gt; Objective-C code&lt;/em&gt;? &lt;strong&gt;Not much.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Despite these issues, I decided to let it be for the moment so that I could continue working and give some thought to a &lt;em&gt;swifter&lt;/em&gt; design. I continued building out my model classes, standing up my core data stack, and writing unit tests. Much to my surprise, using the extension functions above crashed when running my unit tests. I ran the same code from the Application Target and everything was fine. After more investigation, I realized that I had just found a Swift compiler &lt;a href=&quot;http://openradar.appspot.com/19368054&quot;&gt;bug&lt;/a&gt;. You can find an &lt;a href=&quot;https://github.com/jessesquires/rdar-19368054&quot;&gt;example project&lt;/a&gt; on GitHub that exhibits the bug. The issue is that the following function incorrectly returns &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; in a project’s Test Target.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertNewObjectForEntityForName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;entityName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;inManagedObjectContext&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//  Example&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  Returns valid Person object in App Target&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  Returns nil in Test Target&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSEntityDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insertNewObjectForEntityForName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Person&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inManagedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So much for revisiting these functions later. I could continue using them in the Application Target, but I would still need to find a fix for initializing managed objects in the Test Target. This isn’t ideal. I would rather have a single solution that works in both targets. Back to the drawing board.&lt;/p&gt;

&lt;h3 id=&quot;rethinking-and-redesigning&quot;&gt;Rethinking and redesigning&lt;/h3&gt;

&lt;p&gt;Let’s reiterate what we are trying to achieve. We want:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To find a convenient way to initialize managed objects by encapsulating the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;NSEntityDescription&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;To workaround the bug in &lt;code class=&quot;highlighter-rouge&quot;&gt;NSEntityDescription.insertNewObjectForEntityForName(_, inManagedObjectContext:)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;To avoid having to pass literal entity names, like &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Person&quot;&lt;/code&gt;, to the initializer&lt;/li&gt;
      &lt;li&gt;To avoid the issues mentioned above (using &lt;code class=&quot;highlighter-rouge&quot;&gt;object_getClass()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NSStringFromClass()&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;To conform to Swift paradigms and utilize Swift features&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The solution that meets all the criteria above is a convenience initializer:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;convenience&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;entityDescription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSEntityDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;entityForName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Person&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inManagedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;insertIntoManagedObjectContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is very similar to the original class factory function in the extension. It receives a context and returns a managed object. Regarding (2), it is very clear how this addresses the problematic &lt;code class=&quot;highlighter-rouge&quot;&gt;NSEntityDescription&lt;/code&gt; class function. In Swift, an initializer is guaranteed to return a non-nil, typed instance, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;insertNewObjectForEntityForName(_, inManagedObjectContext:)&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyObject&lt;/code&gt;. We avoid having to cast the return value altogether.&lt;/p&gt;

&lt;p&gt;As you’ve probably noticed, the entity name (&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Person&quot;&lt;/code&gt;) is hard-coded. And you are correct in concluding that this solution doesn’t generalize. That is, &lt;strong&gt;all&lt;/strong&gt; of your managed object subclasses would need to implement this convenience initializer and provide their own value for the entity name. You might consider tweaking this by moving the convenience initializer to a new extension and replacing the hard-coded string with an &lt;code class=&quot;highlighter-rouge&quot;&gt;entityName()&lt;/code&gt; function that classes must override. Unfortunately, this &lt;a href=&quot;https://github.com/jessesquires/rdar-19368054#swift-extensions-will-not-work&quot;&gt;will not work&lt;/a&gt; due to Swift’s &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-XID_324&quot;&gt;initializer delegation and two-phase initialization&lt;/a&gt; enforcements.&lt;/p&gt;

&lt;p&gt;In the end, I think adding these 3 lines of code to each of your managed object subclasses is a worthwhile exchange for type-safety and a more pure, &lt;em&gt;more swift&lt;/em&gt; design. Perhaps this could eventually be automated via &lt;a href=&quot;https://github.com/rentzsch/mogenerator&quot;&gt;mogenerator&lt;/a&gt; or a similar tool. Cocoa &lt;a href=&quot;http://nshipster.com/the-death-of-cocoa/&quot;&gt;may be dying&lt;/a&gt;, but it certainly &lt;strong&gt;isn’t dead yet&lt;/strong&gt;. As we face these kinds of challenges with Swift, it is important to remember that the &lt;em&gt;Objective-C way&lt;/em&gt; is not always the &lt;em&gt;Swift way&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span class=&quot;text-muted&quot;&gt;&lt;strong&gt;There’s one more thing.&lt;/strong&gt; In trying to find ways around the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSEntityDescription&lt;/code&gt; bug, I found an odd way to get the aforementioned extension functions to work in the Test Target. We know that unit testing in Swift is &lt;a href=&quot;http://natashatherobot.com/swift-unit-testing-tips-and-tricks/&quot;&gt;tricky&lt;/a&gt; because of its &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/AccessControl.html#//apple_ref/doc/uid/TP40014097-CH41-XID_29&quot;&gt;access control&lt;/a&gt; implementation. The files in your Application Target aren’t available to your Test Target because these are two different modules. The usual strategy is to add your files to both targets. If you do not do this, but instead make your managed object subclasses &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; and import them to your Test Target (&lt;code class=&quot;highlighter-rouge&quot;&gt;import &amp;lt;AppTargetName&amp;gt;&lt;/code&gt;), then casting from &lt;code class=&quot;highlighter-rouge&quot;&gt;NSEntityDescription.insertNewObjectForEntityForName(_, inManagedObjectContext:)&lt;/code&gt; succeeds.&lt;/span&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Introducing JSQMessagesVC 6.0</title>
      <subtitle>A brief history and celebration of the popular messages UI library for iOS</subtitle>
      <link href="http://localhost:4000/blog/introducing-jsqmessagesvc-6-0/" />
      <id>http://localhost:4000/blog/introducing-jsqmessagesvc-6-0</id>

      <published>2014-12-08T00:00:00+00:00</published>
      
      <updated>2014-12-08T00:00:00+00:00</updated>
      

      <summary><p>A few weeks ago I published the <a href="https://github.com/jessesquires/JSQMessagesViewController/releases/tag/6.0.0">sixth major release</a> of <del>my</del> <em>our</em> <a href="http://www.jessesquires.com/JSQMessagesViewController/">messages UI library</a> for iOS. This release closes the door on a major milestone for this project, so I wanted to take the time to highlight its significance, discuss its new features, and examine its design. Of course, this would not have been possible without our amazing open-source <a href="https://github.com">community</a> and the <a href="https://github.com/jessesquires/JSQMessagesViewController/graphs/contributors">contributors</a> to this project.</p>

</summary>
      <content type="html">&lt;p&gt;A few weeks ago I published the &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/releases/tag/6.0.0&quot;&gt;sixth major release&lt;/a&gt; of &lt;del&gt;my&lt;/del&gt; &lt;em&gt;our&lt;/em&gt; &lt;a href=&quot;http://www.jessesquires.com/JSQMessagesViewController/&quot;&gt;messages UI library&lt;/a&gt; for iOS. This release closes the door on a major milestone for this project, so I wanted to take the time to highlight its significance, discuss its new features, and examine its design. Of course, this would not have been possible without our amazing open-source &lt;a href=&quot;https://github.com&quot;&gt;community&lt;/a&gt; and the &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/graphs/contributors&quot;&gt;contributors&lt;/a&gt; to this project.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/jsqmessages6.png&quot; title=&quot;JSQMessagesViewController 6.0&quot; alt=&quot;JSQMessagesViewController 6.0&quot; /&gt;
&lt;small class=&quot;text-muted center&quot;&gt;JSQMessagesViewController: An elegant messages UI library for iOS&lt;/small&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-brief-history&quot;&gt;A brief history&lt;/h3&gt;

&lt;p&gt;It all began with &lt;a href=&quot;http://bit.ly/hemoglobeapp&quot;&gt;Hemoglobe&lt;/a&gt;, an app for the bleeding disorder community. I built this app with &lt;a href=&quot;http://michaelschultz.com&quot;&gt;Michael Schultz&lt;/a&gt; almost two years ago, and one of the main features was… &lt;em&gt;private user messages&lt;/em&gt;. I searched on &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; and &lt;a href=&quot;https://www.cocoacontrols.com&quot;&gt;CocoaControls&lt;/a&gt; for an existing open-source framework. What I found was a lot of &lt;a href=&quot;https://www.cocoacontrols.com/search?utf8=✓&amp;amp;q=messages&quot;&gt;great attempts&lt;/a&gt; and partially completed projects. However, one &lt;a href=&quot;https://github.com/samsoffes/ssmessagesviewcontroller&quot;&gt;abandoned project&lt;/a&gt; stuck out and gave me some great ideas to get started.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt; was just entering its third year back then and was not very mainstream. I knew very little about it until &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/issues/3&quot;&gt;an issue&lt;/a&gt; was opened that requested CocoaPod support and I received my &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/pull/4&quot;&gt;first pull-request&lt;/a&gt; to add a &lt;a href=&quot;http://guides.cocoapods.org/syntax/podspec.html&quot;&gt;podspec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After the app launched, I extracted the messages UI into a separate component and published &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/releases/tag/1.0.0&quot;&gt;version 1.0&lt;/a&gt; on GitHub. I figured this was the least I could do, given how much the abandoned projects had helped me even though they were only partially completed. I figured there were probably other developers out there searching for a “finished” messages UI framework I like was before.&lt;/p&gt;

&lt;p&gt;The component was originally implemented with a &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;, until &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/releases/tag/5.0.0&quot;&gt;version 5.0&lt;/a&gt; which saw a complete rewrite of the library that opted for the more flexible &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionView&lt;/code&gt; instead. And here we are today, &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/tags&quot;&gt;49 releases&lt;/a&gt; later at version &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/releases/tag/6.1.0&quot;&gt;6.1.0&lt;/a&gt;, with over &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController#apps-using-this-library&quot;&gt;20 apps&lt;/a&gt; using this library and &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/stargazers&quot;&gt;3,000&lt;/a&gt; stars on GitHub. I &lt;strong&gt;never&lt;/strong&gt; thought that this library would get so much attention. It’s been such a pleasure developing this component out in the open and collaborating with each of the &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/graphs/contributors&quot;&gt;contributors&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-anatomy-of-a-cell&quot;&gt;The anatomy of a cell&lt;/h3&gt;

&lt;p&gt;The flagship feature of 6.0 is the &lt;em&gt;most requested&lt;/em&gt; feature to date — media messages. In order to display anything other than text in the message bubbles, some major changes were required in the core library. With these new changes it is now possible to display &lt;strong&gt;any arbitrary&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; in a message bubble. The messages view (picture above) is backed by subclasses of &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewCell&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionView&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewFlowLayout&lt;/code&gt;. Each message is represented as a cell in the collection view and has a number of customizable subviews and properties, which are outlined in the following diagram. The labels for the subviews in the diagram are the names of the actual subview properties for a cell. See the &lt;a href=&quot;http://cocoadocs.org/docsets/JSQMessagesViewController/6.1.0/Classes/JSQMessagesCollectionViewCell.html&quot;&gt;JSQMessagesCollectionViewCell&lt;/a&gt; documentation for further details.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/jsqmessages_cell_anatomy.jpg&quot; title=&quot;Anatomy of a cell&quot; alt=&quot;Anatomy of a cell&quot; /&gt;
&lt;small class=&quot;text-muted center&quot;&gt;Anatomy of a cell&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;There are two basic types of cells, incoming and outgoing. Each cell has three labels for message metadata — the sender, the date, and delivery status. Each of these labels is optional, and you can hide or show any combination of them. Next, there are two top-level container views, one for the message content and one for the avatar. The &lt;code class=&quot;highlighter-rouge&quot;&gt;messageBubbleContainerView&lt;/code&gt; holds the &lt;code class=&quot;highlighter-rouge&quot;&gt;messageBubbleImageView&lt;/code&gt; and either a &lt;code class=&quot;highlighter-rouge&quot;&gt;textView&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;mediaView&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;avatarContainerView&lt;/code&gt; holds the &lt;code class=&quot;highlighter-rouge&quot;&gt;avatarImageView&lt;/code&gt;. Avatars are also optional. Finally, there’s a customizable margin (&lt;code class=&quot;highlighter-rouge&quot;&gt;messageBubbleLeftRightMargin&lt;/code&gt;) on the side of the cell that is opposite the avatar. For outgoing messages, this is the left-side margin. For incoming messages, this is the right-side margin. You can modify this margin using &lt;a href=&quot;http://cocoadocs.org/docsets/JSQMessagesViewController/6.1.0/Classes/JSQMessagesCollectionViewFlowLayout.html#//api/name/messageBubbleLeftRightMargin&quot;&gt;the property&lt;/a&gt; on the flow layout object. Each of these subviews is customizable via the usual &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKit_Framework/&quot;&gt;UIKit&lt;/a&gt; APIs. Now that we understand the basics about the views, it’s time to examine the model behind them.&lt;/p&gt;

&lt;h3 id=&quot;the-model-speaking-to-protocols&quot;&gt;The model: speaking to protocols&lt;/h3&gt;

&lt;p&gt;One of the most challenging aspects of developing a framework is making assumptions — you should always try to make as few as possible. This is much easier said than done, and I’ve made plenty of &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/issues/389&quot;&gt;embarassing mistakes&lt;/a&gt;. Frameworks and libraries are constantly &lt;a href=&quot;http://st-www.cs.illinois.edu/users/droberts/evolve.html&quot;&gt;evolving&lt;/a&gt; as new use cases and edge cases emerge. It is vitally important to be modular, flexible, and extensible.&lt;/p&gt;

&lt;blockquote&gt;
	&lt;p&gt;Designing frameworks is difficult. In fact, I believe that they are so difficult, that they can only be designed by building examples and generalizing the example code into the framework code.&lt;/p&gt;
	&lt;footer&gt;&lt;a href=&quot;http://st-www.cs.illinois.edu/users/droberts/&quot;&gt;Don Roberts&lt;/a&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;So how do we implement &lt;em&gt;the model&lt;/em&gt; in &lt;em&gt;Model-View-Controller&lt;/em&gt; when we have no idea what the model will be? &lt;em&gt;Every&lt;/em&gt; developer that wants to use this library will have a &lt;em&gt;unique&lt;/em&gt; model. Class names will be different, variable names will be different, the persistence layer (&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreData/cdProgrammingGuide.html&quot;&gt;Core Data&lt;/a&gt; or otherwise) will be different. We unify these differences with &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithProtocols/WorkingwithProtocols.html&quot;&gt;Protocols&lt;/a&gt; (or &lt;a href=&quot;http://en.wikipedia.org/wiki/Interface_(Java)&quot;&gt;Interfaces&lt;/a&gt;). This is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;L&lt;/a&gt; in &lt;a href=&quot;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt;, and it is one of the most powerful design tools that you have.&lt;/p&gt;

&lt;p&gt;There are 4 data protocols for the model layer:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JSQMessageData&lt;/code&gt;: defines methods for providing message data (text or media) and metadata (sender, date, etc.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JSQMessageMediaData&lt;/code&gt;: defines methods for representing media as a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JSQMessageAvatarImageDataSource&lt;/code&gt;: defines methods for providing avatar images&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JSQMessageBubbleImageDataSource&lt;/code&gt;: defines methods for providing message bubble images&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Together, these protocols specify the comprehensive interface through which the &lt;code class=&quot;highlighter-rouge&quot;&gt;JSQMessagesViewController&lt;/code&gt; framework communicates with your data. This means it does not matter how your data is structured or defined — you simply need to conform to the protocols by implementing their methods. This is very flexible and gives you the freedom to implement &lt;em&gt;your&lt;/em&gt; model however &lt;em&gt;you&lt;/em&gt; like.&lt;/p&gt;

&lt;p&gt;Finally, I want to mention that the library &lt;em&gt;does&lt;/em&gt; provide concrete model classes for those who want to use them. This allows you to get started using this library more quickly, and also serves as an example for how to implement these protocols in your custom classes should you choose to do so.&lt;/p&gt;

&lt;h3 id=&quot;media-messages-revealed&quot;&gt;Media messages revealed&lt;/h3&gt;

&lt;p&gt;Earlier I mentioned that the new media message API allows you to display &lt;strong&gt;any arbitrary&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; in a message bubble. This means that your media message can be &lt;em&gt;anything&lt;/em&gt; and you only need to implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;JSQMessageMediaData&lt;/code&gt; protocol that defines how to display your specific media. For example, media data could be a &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/CoreLocation/Reference/CLLocation_Class/index.html&quot;&gt;CLLocation&lt;/a&gt;, or a &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImage_Class/index.html&quot;&gt;UIImage&lt;/a&gt;, or an &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/AddressBook/Reference/ABRecordRef_iPhoneOS/index.html#//apple_ref/c/tdef/ABRecordRef&quot;&gt;ABRecordRef&lt;/a&gt;. The 6.0 release provides 3 concrete media types: &lt;code class=&quot;highlighter-rouge&quot;&gt;JSQLocationMediaItem&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSQPhotoMediaItem&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;JSQVideoMediaItem&lt;/code&gt;. I think these are the most common kind of media that users want to send and that developers want to support. They should cover about 80 percent of use cases.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/jsqmessages_media_type.jpg&quot; title=&quot;JSQMessage Media Items&quot; alt=&quot;JSQMessage Media Items&quot; /&gt;
&lt;small class=&quot;text-muted center&quot;&gt;Provided media message types&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The media message API was built with extensibility in mind. If the provided media items do not suit your needs, you can extend them to do so. And, with very little effort you can define &lt;em&gt;your own&lt;/em&gt; &lt;strong&gt;custom&lt;/strong&gt; media items.&lt;/p&gt;

&lt;p&gt;An alternative approach to this API would have been to define the different message or media types as an &lt;a href=&quot;http://nshipster.com/ns_enum-ns_options/&quot;&gt;Enum&lt;/a&gt;. And a few contributors have suggested or asked about this. Hopefully, you can see how limiting this would have been, especially regarding the library-provided media types. Using an enum would litter the code base with &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statements — a &lt;a href=&quot;http://en.wikipedia.org/wiki/Code_smell&quot;&gt;code smell&lt;/a&gt; — and require special handling for each kind of media. The only option for extensibilty would have been providing a “custom” enum case, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;JSQMediaTypeCustom&lt;/code&gt;, which would defer all the work to the consumer of the API. This special enum case further increases complexity. And more importantly, this solution &lt;strong&gt;cannot&lt;/strong&gt; address the situation where a developer wants to add &lt;strong&gt;more than one&lt;/strong&gt; custom media type. By using a protocol, we avoid these pitfalls and every single media type is handled in the exact same way by the library.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController#getting-started&quot;&gt;Getting Started&lt;/a&gt; section of the &lt;code class=&quot;highlighter-rouge&quot;&gt;README&lt;/code&gt;. You can find additional details in the &lt;a href=&quot;http://cocoadocs.org/docsets/JSQMessagesViewController&quot;&gt;documentation&lt;/a&gt; and &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/releases/tag/6.0.0&quot;&gt;6.0 release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;future-work&quot;&gt;Future work&lt;/h3&gt;

&lt;p&gt;I think this library is in a very good state. It’s stable and extensbile, but there’s still plenty of work to do moving forward. There are plenty of &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/labels/feature%20request&quot;&gt;feature requests&lt;/a&gt; and some &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/labels/bug&quot;&gt;bugs&lt;/a&gt; to address. And as mentioned above, frameworks are constantly evolving. I can’t wait to see what this framework looks like in another year. I would love to rewrite it in &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;Swift&lt;/a&gt; eventually. We’ll see what happens.&lt;/p&gt;

&lt;h3 id=&quot;thanks-for-contributing&quot;&gt;Thanks for contributing&lt;/h3&gt;

&lt;p&gt;Needless to say, this project &lt;strong&gt;would not&lt;/strong&gt; be where it is today without the enthusiasm and support of our &lt;strong&gt;awesome community&lt;/strong&gt;. The initial release of this library was so limited, and I never expected that I would still be developing it &lt;em&gt;years&lt;/em&gt; later. It is only because of the interest, &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/issues/172#issuecomment-41995394&quot;&gt;kindness&lt;/a&gt;, and &lt;a href=&quot;https://github.com/jessesquires/JSQMessagesViewController/issues/608&quot;&gt;encouragement&lt;/a&gt; from the community that I’ve continued working on this. (Well, programming is also pretty fun for me too.)&lt;/p&gt;

&lt;p&gt;Developing this library, and doing it openly, has &lt;strong&gt;taught me so much&lt;/strong&gt; and given me &lt;strong&gt;so many opportunities&lt;/strong&gt;. I’ve improved my programming skills, I’ve met dozens of great developers, I discovered CocoaPods, I’ve learned how to effectively manage a large project with dozens of individual contributors, and the list continues. And I continue to learn. Open-source has given me all of these amazing things. I could not be more grateful for that. And I’m very excited to continue supporting and maintaining this library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you for this opportunity to learn, share, and collaborate.&lt;/strong&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Rosetta Stone contributes</title>
      <subtitle>Rosetta Stone officially joins the open-source community</subtitle>
      <link href="http://localhost:4000/blog/rosetta-stone-contributes/" />
      <id>http://localhost:4000/blog/rosetta-stone-contributes</id>

      <published>2014-12-05T00:00:00+00:00</published>
      
      <updated>2014-12-05T00:00:00+00:00</updated>
      

      <summary><p>I’m incredibly happy and incredibly proud to share that <a href="http://www.rosettastone.com">Rosetta Stone</a> is an <a href="http://en.wikipedia.org/wiki/Open-source_software">open-source software</a> contributor. Since I started working at Rosetta Stone a little more than a year ago, I’ve been encouraging and advocating for the company to get involved in open-source. Today, we did just that. Today is a big day for Rosetta Stone.</p>

</summary>
      <content type="html">&lt;p&gt;I’m incredibly happy and incredibly proud to share that &lt;a href=&quot;http://www.rosettastone.com&quot;&gt;Rosetta Stone&lt;/a&gt; is an &lt;a href=&quot;http://en.wikipedia.org/wiki/Open-source_software&quot;&gt;open-source software&lt;/a&gt; contributor. Since I started working at Rosetta Stone a little more than a year ago, I’ve been encouraging and advocating for the company to get involved in open-source. Today, we did just that. Today is a big day for Rosetta Stone.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;See &lt;a href=&quot;http://product.rosettastone.com/rosetta-stone-is-now-on-github/&quot;&gt;my post&lt;/a&gt; on our product/engineering &lt;a href=&quot;http://product.rosettastone.com/news/&quot;&gt;blog&lt;/a&gt; for the official announcement. I think the &lt;a href=&quot;http://tom.preston-werner.com/2011/11/22/open-source-everything.html&quot;&gt;value&lt;/a&gt; and &lt;a href=&quot;http://ashfurrow.com/blog/sharing-is-selfish/&quot;&gt;benefits&lt;/a&gt; of open-source are clear, and immeasurable. Every great engineer that I know agrees. So I couldn’t be more excited about this news.&lt;/p&gt;

&lt;p&gt;And to top it off, I helped author our &lt;em&gt;first&lt;/em&gt; &lt;strong&gt;ever&lt;/strong&gt; open-source project! Today we released an initial version of &lt;a href=&quot;https://github.com/rosettastone/RSTCoreDataKit&quot;&gt;RSTCoreDataKit&lt;/a&gt;, an iOS library for making &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreData/cdProgrammingGuide.html&quot;&gt;Core Data&lt;/a&gt; easier to use. This is just a start and there’s certainly more coming. This is only the beginning.&lt;/p&gt;

&lt;p&gt;Now go show us some love on &lt;a href=&quot;https://github.com/rosettastone&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Swift failable initializers</title>
      <subtitle>When failable becomes fallible, and how to avoid it</subtitle>
      <link href="http://localhost:4000/blog/swift-failable-initializers/" />
      <id>http://localhost:4000/blog/swift-failable-initializers</id>

      <published>2014-10-22T00:00:00+00:00</published>
      
      <updated>2014-10-22T00:00:00+00:00</updated>
      

      <summary><p>Swift is still young and ever-changing. With each release, we have seen dozens of tweaks, additions, and deletions. And there is no reason for us to think that this rapid evolution will decline anytime soon. To remind us of exactly that, the latest <a href="https://developer.apple.com/swift/blog/?id=17">post</a> on Apple’s <a href="https://developer.apple.com/swift/">Swift Developer Blog</a> introduces a new feature in Swift 1.1 in <a href="https://developer.apple.com/xcode/downloads/">Xcode 6.1</a> — <em>failable initializers</em>.</p>

</summary>
      <content type="html">&lt;p&gt;Swift is still young and ever-changing. With each release, we have seen dozens of tweaks, additions, and deletions. And there is no reason for us to think that this rapid evolution will decline anytime soon. To remind us of exactly that, the latest &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=17&quot;&gt;post&lt;/a&gt; on Apple’s &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;Swift Developer Blog&lt;/a&gt; introduces a new feature in Swift 1.1 in &lt;a href=&quot;https://developer.apple.com/xcode/downloads/&quot;&gt;Xcode 6.1&lt;/a&gt; — &lt;em&gt;failable initializers&lt;/em&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h4 id=&quot;failable-initializers&quot;&gt;Failable initializers&lt;/h4&gt;

&lt;p&gt;The idea is simple — sometimes objects fail to successfully initialize and we need a way to handle this. If you have ever read the iOS or OS X &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/index.html#//apple_ref/occ/instm/NSObject/init&quot;&gt;documentation&lt;/a&gt; for the Cocoa frameworks, then you have often had the pleasure of reading method descriptions similar to the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Return Value&lt;/strong&gt; &lt;br /&gt;
An initialized object, or &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; if an object could not be created for some reason that would not result in an exception.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is commonplace in Objective-C. When instantiating classes in the Cocoa frameworks, many of them may return &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; instead of an initialized object. We are used to this. But Swift is different. Swift guarantees that instances will not be &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;, with the exception of &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_467&quot;&gt;optionals&lt;/a&gt;. The syntactic difference for a failable initializer — from &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;init?()&lt;/code&gt; — is much more subtle than its implications.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;pure&lt;/strong&gt; Swift, there should not be a need for a &lt;em&gt;failable&lt;/em&gt; initializer. However, this is a great feature that streamlines and simplifies Swift’s interoperability with Cocoa and Objective-C. But that is where it stops being so great. The problem with failable initializers is, ironically, &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. In Objective-C, it is usually safe to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; around, or send messages to &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. Then you accidentally try to insert &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; into an array or a dictionary at runtime. We all loathe that embarassment. But Swift comes to the rescue with optional types, right? Yes, but I think most would prefer to avoid the optional unwrapping dance as much as possible. And generally speaking, we must &lt;a href=&quot;http://owensd.io/2014/10/18/optionals-beware.html&quot;&gt;use optionals with care&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The issue with failable initializers in Swift is the same issue with &lt;a href=&quot;http://nshipster.com/swift-operators/&quot;&gt;overloaded or custom operators&lt;/a&gt; and &lt;a href=&quot;http://nshipster.com/swift-literal-convertible/&quot;&gt;literal convertibles&lt;/a&gt; — potential abuse.&lt;/p&gt;

&lt;h4 id=&quot;be-failable-not-fallible&quot;&gt;Be failable, not fallible&lt;/h4&gt;

&lt;p&gt;“Too young for conventions” is the language’s latest tagline, which is probably as frightening to some as it is empowering to others. In this unique situation, we have the opportunity to influence what are considered Swift’s best practices. Using failable initializers in Swift should be done sparingly and carefully.&lt;/p&gt;

&lt;p&gt;Apple’s &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=17&quot;&gt;article&lt;/a&gt; provides an example of initializing an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSImage&lt;/code&gt; object. Putting Cocoa and Objective-C aside, I think this is an excellent use case. When you are trying to load an asset or other resource, it makes sense to fail and return &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; in the situation that the resource is… well, &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, failable initializers might seduce you into doing something bad. Suppose we have a blog post object. It requires the body text, the date it was written, and an image. To “simplify” construction of a post, you decide to pass the name of an image, instead of a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; object.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyPost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nameOfImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nameOfImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the image cannot be constructed, then the initialization of &lt;code class=&quot;highlighter-rouge&quot;&gt;MyPost&lt;/code&gt; fails. What have we done by designing our &lt;code class=&quot;highlighter-rouge&quot;&gt;init?&lt;/code&gt; this way? We have disregarded the &lt;a href=&quot;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt; principles, specifically &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_inversion_principle&quot;&gt;dependency inversion&lt;/a&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;MyPost&lt;/code&gt; object is for storing blog post data. It should not be initializing an image. The dependency on &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; is now obfuscated. And finally, we have to do our optional unwrapping dance every time we instantiate a post.&lt;/p&gt;

&lt;p&gt;We can fix these issues by passing a non-optional image to our initializer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyBetterPost&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Clean and deterministic again. But you’re probably thinking, &lt;em&gt;we still have to handle an optional image &lt;strong&gt;somewhere&lt;/strong&gt;&lt;/em&gt;. That’s true. When constructing a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt;, the initializer &lt;code class=&quot;highlighter-rouge&quot;&gt;init(named name: String) -&amp;gt; UIImage?&lt;/code&gt; could return &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;, but the point is that this should be happening &lt;em&gt;outside&lt;/em&gt; of this class, and definitely &lt;strong&gt;not&lt;/strong&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;. There’s no good reason to dirty up this class with optionals.&lt;/p&gt;

&lt;p&gt;This example is extremely simple, but hopefully you can see how things could get out of hand and just plain shameful with failable initializers if we aren’t careful. Imagine if &lt;code class=&quot;highlighter-rouge&quot;&gt;MyPost&lt;/code&gt; had several properties to construct that could fail.&lt;/p&gt;

&lt;h4 id=&quot;a-fallible-place-to-be-failable&quot;&gt;A fallible place to be failable&lt;/h4&gt;

&lt;p&gt;Here is where we arrive at the core of the problem: failable initializers misplace responsibilities in your architecture, or at least encourage you to do so. Specifically, they misplace the point of failure. An initializer should construct an instance. It should be as simple as possible. It should provide appropriate default values when feasible. It should not be processing or parsing data, as those responsibilities are for functions or instance methods. And most importantly, it should succeed. Of course, there will be exceptions but they should be few.&lt;/p&gt;

&lt;p&gt;So where should we fail in the example above? One great solution would be a validator class, &lt;code class=&quot;highlighter-rouge&quot;&gt;MyBetterPostValidator&lt;/code&gt;, whose single responsibility is validating data. This class would also &lt;strong&gt;not&lt;/strong&gt; have a failable intializer, but instead it would have a method that receives the data for a post. If that data is validated successfully, then a &lt;code class=&quot;highlighter-rouge&quot;&gt;MyBetterPost&lt;/code&gt; gets instantiated.&lt;/p&gt;

&lt;h4 id=&quot;its-optional&quot;&gt;It’s optional&lt;/h4&gt;

&lt;p&gt;Failable initializers do address some of our problems, namely interoperability with Objective-C and Cocoa, and resource loading. But we should be aware of the potential issues that they introduce into our design. Failable initializers feel a lot like Objective-C, and I’m not sure who wants to feel that anymore. If we rely on them too much, we risk simply &lt;em&gt;re-implementing&lt;/em&gt; our &lt;em&gt;old&lt;/em&gt; Objective-C code in Swift. Instead, we should strive to take advantage of Swift’s new features (enums, tuples, generics, etc.) and completely &lt;em&gt;re-think&lt;/em&gt; how we design our classes and systems.&lt;/p&gt;

&lt;p&gt;In a way, before failable initializers, Swift helped enforce the &lt;a href=&quot;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt; principles during initialization. But now, we must enforce them ourselves. This is the part where I say, “with great power comes great responsibility”, but I won’t.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Adaptive user interfaces</title>
      <subtitle>Exploring iOS size classes and trait collections</subtitle>
      <link href="http://localhost:4000/blog/adaptive-user-interfaces/" />
      <id>http://localhost:4000/blog/adaptive-user-interfaces</id>

      <published>2014-10-01T00:00:00+00:00</published>
      
      <updated>2014-10-01T00:00:00+00:00</updated>
      

      <summary><p>When the App Store launched, there was one iPhone with one screen size and one pixel density. Designing your user interfaces was relatively simple and the <a href="http://martinfowler.com/bliki/TechnicalDebt.html">technical debt</a> of hard-coding them was cheap. Today, developers and designers face many challenges in creating apps that must work on dozens of different devices. <a href="https://www.apple.com/iphone/compare/">Long gone</a> are the days of 480x320. We can no longer depend on physical screen sizes and must always be prepared for the next generation of devices.</p>

</summary>
      <content type="html">&lt;p&gt;When the App Store launched, there was one iPhone with one screen size and one pixel density. Designing your user interfaces was relatively simple and the &lt;a href=&quot;http://martinfowler.com/bliki/TechnicalDebt.html&quot;&gt;technical debt&lt;/a&gt; of hard-coding them was cheap. Today, developers and designers face many challenges in creating apps that must work on dozens of different devices. &lt;a href=&quot;https://www.apple.com/iphone/compare/&quot;&gt;Long gone&lt;/a&gt; are the days of 480x320. We can no longer depend on physical screen sizes and must always be prepared for the next generation of devices.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h4 id=&quot;devices-have-traits&quot;&gt;Devices have traits&lt;/h4&gt;

&lt;p&gt;In &lt;a href=&quot;https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS8.html&quot;&gt;iOS 8&lt;/a&gt;, Apple introduced a new level of abstraction in the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKit_Framework/index.html#//apple_ref/doc/uid/TP40006955&quot;&gt;UIKit&lt;/a&gt; framework — &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITraitSet_ClassReference/index.html#//apple_ref/occ/cl/UITraitCollection&quot;&gt;UITraitCollection&lt;/a&gt;, an addition to iOS that has as far-reaching implications for developers as it does for &lt;strong&gt;designers&lt;/strong&gt;, &lt;em&gt;if not more&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;UITraitCollection&lt;/code&gt; object describes the properties, or &lt;em&gt;traits&lt;/em&gt;, of a user interface (UI) element. These traits define a display scale (a &lt;a href=&quot;http://en.wikipedia.org/wiki/Retina_Display&quot;&gt;Retina&lt;/a&gt; or non-Retina display), the user interface idiom (an iPhone or iPad), and most importantly a vertical and a horizontal size class. When combined with &lt;a href=&quot;https://developer.apple.com/library/IOs/documentation/UserExperience/Conceptual/AutolayoutPG/Introduction/Introduction.html&quot;&gt;Auto-Layout&lt;/a&gt;, these new APIs empower developers and designers to redefine the ways in which they conceptualize their user interfaces. Trait collections complete our repertoire for designing &lt;a href=&quot;https://developer.apple.com/LIBRARY/IOS/documentation/UserExperience/Conceptual/MobileHIG/LayoutandAppearance.html#//apple_ref/doc/uid/TP40006556-CH54-SW1&quot;&gt;adaptive UI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just as the iPhone 6 &lt;a href=&quot;https://www.apple.com/iphone-6/display/&quot;&gt;Retina HD display&lt;/a&gt; further reinforces the mandate for us to think about layouts in terms of abstract &lt;a href=&quot;http://www.paintcodeapp.com/news/iphone-6-screens-demystified&quot;&gt;points&lt;/a&gt; rather than pixels, trait collections guide us into thinking about layouts in an entirely new manner. With trait collections, we can reason about device screen dimensions, orientations, and user interfaces in a generalized way.&lt;/p&gt;

&lt;h4 id=&quot;size-classes&quot;&gt;Size classes&lt;/h4&gt;

&lt;p&gt;A size class identifies a relative amount of display space for a UI element. There are two primary size classes in iOS 8, compact and regular. Every screen or view defines a size class for both its horizontal and vertical dimensions — that is, its width and height. Describing each dimension with a size class results in a total of four options: compact width, regular width, compact height, regular height. The size classes for all iOS devices are defined in the following diagram.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/size_classes.png&quot; title=&quot;iOS 8 Size Classes&quot; alt=&quot;iOS 8 Size Classes&quot; /&gt;
&lt;small class=&quot;text-muted center&quot;&gt;iOS 8 size classes by device. Device images taken from &lt;a href=&quot;https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS8.html&quot;&gt;What’s New in iOS 8&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;There’s a lot of information in this diagram. Let’s break down the most important details:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We no longer have dozens of physical devices. We have four abstract devices: Regular-Compact, Regular-Regular, Compact-Compact, Compact-Regular.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;All iPhones&lt;/strong&gt; (top left) in the portrait orientation have a &lt;strong&gt;regular height&lt;/strong&gt; and a &lt;strong&gt;compact width&lt;/strong&gt;. This means that your UI should behave and appear nearly the same on an iPhone 4S as it does on an iPhone 6 Plus.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;All iPads&lt;/strong&gt; (top right) in &lt;strong&gt;any&lt;/strong&gt; orientation have a &lt;strong&gt;regular&lt;/strong&gt; size class for both dimensions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the landscape orientation, iPhone 4/S, iPhone 5/S, and iPhone 6 (bottom left) have a &lt;strong&gt;compact&lt;/strong&gt; size class for both dimensions. This is incredibly important as it highlights that &lt;em&gt;physical device dimensions and size classes &lt;strong&gt;do not&lt;/strong&gt; correspond one-to-one&lt;/em&gt;. For example, consider the iPhone 5. When in the portrait orientation it has a &lt;strong&gt;regular height&lt;/strong&gt; and a &lt;strong&gt;compact width&lt;/strong&gt;. Knowing this, your intuition may lead you to believe that when the device rotates, the size classes also “rotate” to yield a &lt;strong&gt;compact height&lt;/strong&gt; and a &lt;strong&gt;regular width&lt;/strong&gt;. However, this is not the case. When in the landscape orientation, the iPhone 5 has a &lt;strong&gt;compact width&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The iPhone 6 Plus in the landscape orientation is unique (bottom right). It is currently the only device that adopts a &lt;strong&gt;compact height&lt;/strong&gt; and a &lt;strong&gt;regular width&lt;/strong&gt;. In iOS 8, we find that this means when the iPhone 6 Plus is in the landscape orientation, its UI behaves similarly to the iPad. For example, Mail displays as a &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/userexperience/conceptual/mobilehig/Art/split_view_2x.png&quot;&gt;split view&lt;/a&gt; with the list of emails on the left and the currently selected email content on the right.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is also possible for views, subviews, and view controllers to have size classes that differ from the “device” size classes above. There could even be multiple views or view controllers displaying on screen simultaneously, each with unique size classes. For example, a &lt;a href=&quot;https://developer.apple.com/LIBRARY/IOS/documentation/UserExperience/Conceptual/MobileHIG/Art/popover_2x.png&quot;&gt;popover&lt;/a&gt; on iPad could be Regular-Compact, which means it would display full-screen on an iPhone. However, this is a minor detail. The code that you write should only be concerned with doing the right thing for the appropriate size classes.&lt;/p&gt;

&lt;p&gt;Finally, I should note that iOS 8 also provides an &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitDataTypesReference/index.html#//apple_ref/swift/enum/UIUserInterfaceSizeClass&quot;&gt;&lt;em&gt;unspecified&lt;/em&gt;&lt;/a&gt; size class, which essentially means &lt;em&gt;any&lt;/em&gt; size class. In other words, an unspecified size class means that a view should always display and behave the same way, regardless of other UI elements or the current device.&lt;/p&gt;

&lt;h4 id=&quot;working-in-a-new-dimension&quot;&gt;Working in a new dimension&lt;/h4&gt;

&lt;p&gt;What do these changes mean? Developers and designers should abandon thinking in terms of pixels and devices in favor of thinking in terms of size classes and adaptive layouts. Creating pixel-perfect mockups is no longer feasible. Don’t ask how a UI layout should look on an iPhone. Instead, ask how it should appear for a regular height and a compact width. How should the content change for a regular width? For a compact height? Should certain UI elements move to new locations? Should certain UI elements hide or appear? Should any UI elements change size? These are the kinds of questions that we need to be asking and answering.&lt;/p&gt;

&lt;p&gt;Implementing &lt;a href=&quot;https://developer.apple.com/LIBRARY/IOS/documentation/UserExperience/Conceptual/MobileHIG/LayoutandAppearance.html#//apple_ref/doc/uid/TP40006556-CH54-SW1&quot;&gt;adaptive UI&lt;/a&gt; successfully requires thinking about the attributes of devices, not devices themselves. For designers, investigating the built-in apps in iOS 8 on different devices is a great place to see examples and start understanding these new paradigms. Developers, see the &lt;a href=&quot;https://developer.apple.com/library/ios/recipes/xcode_help-IB_adaptive_sizes/_index.html#//apple_ref/doc/uid/TP40014436&quot;&gt;Size Classes Design Help&lt;/a&gt; developer guide.&lt;/p&gt;

&lt;h4 id=&quot;adapting-to-future-devices&quot;&gt;Adapting to future devices&lt;/h4&gt;

&lt;p&gt;With iOS 8, Apple has provided developers and designers with the tools they need to prepare for the future. Which size classes will the next iPhone have? The next iPad? Will there be new size classes? I’m looking at you, &lt;a href=&quot;http://www.apple.com/watch/&quot;&gt;Apple Watch&lt;/a&gt;.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Apples to apples, Part III</title>
      <subtitle>A modest proposal&#58; can Swift outperform plain C?</subtitle>
      <link href="http://localhost:4000/blog/apples-to-apples-part-three/" />
      <id>http://localhost:4000/blog/apples-to-apples-part-three</id>

      <published>2014-08-21T00:00:00+00:00</published>
      
      <updated>2014-08-21T00:00:00+00:00</updated>
      

      <summary><p><em>When I find my code is slow or troubled, friends and colleagues comfort me. Speaking words of wisdom, write in C.</em> It is understood that foregoing the features and abstractions of <a href="http://en.wikipedia.org/wiki/High-level_programming_language">high-level</a> programming languages in favor of their <a href="http://en.wikipedia.org/wiki/Low-level_programming_language">low-level</a> counterparts can yield faster, more efficient code. If you abandon your favorite runtime, forget about garbage collection, eschew dynamic typing, and leave message passing behind; then you will be left with scalar operations, manual memory management, and raw pointers. However, the closer we get to the hardware, the further we get from readability, safety, and maintainability.</p>

</summary>
      <content type="html">&lt;p&gt;&lt;em&gt;When I find my code is slow or troubled, friends and colleagues comfort me. Speaking words of wisdom, write in C.&lt;/em&gt; It is understood that foregoing the features and abstractions of &lt;a href=&quot;http://en.wikipedia.org/wiki/High-level_programming_language&quot;&gt;high-level&lt;/a&gt; programming languages in favor of their &lt;a href=&quot;http://en.wikipedia.org/wiki/Low-level_programming_language&quot;&gt;low-level&lt;/a&gt; counterparts can yield faster, more efficient code. If you abandon your favorite runtime, forget about garbage collection, eschew dynamic typing, and leave message passing behind; then you will be left with scalar operations, manual memory management, and raw pointers. However, the closer we get to the hardware, the further we get from readability, safety, and maintainability.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;In &lt;a href=&quot;/apples-to-apples-part-two/&quot;&gt;&lt;em&gt;Apples to apples, Part II&lt;/em&gt;&lt;/a&gt;, we discovered that Swift was finally performing better than Objective-C. As expected, some common &lt;a href=&quot;https://twitter.com/OldManKris/status/497102303833255936&quot;&gt;reactions&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/mpweiher/status/497066155224608768&quot;&gt;responses&lt;/a&gt; on Twitter were, &lt;em&gt;then how does it compare to C?&lt;/em&gt; This is precisely what we are investigating today to welcome this week’s arrival of &lt;a href=&quot;https://developer.apple.com/xcode/downloads/&quot;&gt;Xcode 6 beta 6&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Code:&lt;/em&gt; &lt;a href=&quot;https://github.com/jessesquires/swift-sorts&quot;&gt;swift-sorts&lt;/a&gt; and &lt;a href=&quot;https://github.com/jessesquires/c-sorts&quot;&gt;c-sorts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Software:&lt;/em&gt; OS X Mavericks 10.9.4, Xcode 6 beta 6&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Hardware:&lt;/em&gt; 2008 unibody MacBook Pro, 2.4 Ghz Intel Core 2 Duo, 8 GB 1067 MHz DDR3 memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The benchmarks consist of &lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/em&gt; trials, which are averaged at the end to obtain the average execution time for each algorithm. Each trial begins by generating an array of &lt;em&gt;&lt;strong&gt;N&lt;/strong&gt;&lt;/em&gt; random integers in the range &lt;code&gt;[0, UINT32_MAX)&lt;/code&gt;. Then, each sorting algorithm is passed a copy of this initial array to sort. The current time is logged before and after each sort and the difference between the two yields the execution time for the algorithm for the current trial. Each execution time is saved to find the average time and standard deviation after all trials are complete.&lt;/p&gt;

&lt;p&gt;The sorting algorithms are written as &lt;a href=&quot;http://en.wikipedia.org/wiki/Introduction_to_Algorithms&quot;&gt;textbook implementations&lt;/a&gt; for clarity, objectivity, and fairness to each language. The standard library sort for Swift uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;sorted()&lt;/code&gt; &lt;a href=&quot;https://gist.github.com/jessesquires/06b6bd68a7d18810651f#file-sorts-m&quot;&gt;function&lt;/a&gt; while C uses &lt;code class=&quot;highlighter-rouge&quot;&gt;qsort()&lt;/code&gt; from &lt;a href=&quot;http://www.cplusplus.com/reference/cstdlib/qsort/&quot;&gt;cstdlib&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;results&quot;&gt;Results&lt;/h3&gt;

&lt;p&gt;Below are the results of running each program over 20 trials with 100,000 integers. The average execution times are displayed in seconds with the standard deviation listed underneath. All trials were run with the release build configuration, since we know Swift would be too slow in debug. The final row in each table is the difference in speed of Swift compared to C. A positive value indicates that Swift is faster, while a negative value indicates that Swift is slower. For example, if C runs in 1.2 seconds and Swift runs in 3.6 seconds, then Swift is 3 times (-3x) slower. Also note that the different compiler optimization levels have no affect on C, but are listed for consistency.&lt;/p&gt;

&lt;p class=&quot;text-muted text-center table-header-footer&quot;&gt;&lt;strong&gt;Table 1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
	&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
		&lt;thead&gt;
			&lt;tr&gt;
				&lt;th class=&quot;text-muted&quot;&gt;
					&lt;em&gt;T&lt;/em&gt; = 20
					&lt;br /&gt;
					&lt;em&gt;N&lt;/em&gt; = 100,000
					&lt;br /&gt;
					Release
				&lt;/th&gt;
				&lt;th&gt;Std lib sort&lt;/th&gt;
				&lt;th&gt;Quick sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Heap sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Insertion sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Selection sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
			&lt;/tr&gt;
		&lt;/thead&gt;
		&lt;tbody&gt;
			&lt;tr&gt;
				&lt;th&gt;C &lt;code&gt;-O3&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;0.020853 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.000191)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;0.011243 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.000042)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;0.014909 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.000360)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;7.575798 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.016685)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;6.981794 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.004399)&lt;/span&gt;&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;th&gt;Swift &lt;code&gt;-O&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;0.014114 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.000413)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;0.016745 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.000202)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;0.042325 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.003881)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;33.819305 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.120471)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;25.255743 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.084152)&lt;/span&gt;&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr class=&quot;info text-info&quot;&gt;
				&lt;th&gt;Difference&lt;/th&gt;
				&lt;td&gt;1.48x&lt;/td&gt;
				&lt;td&gt;-1.48x&lt;/td&gt;
				&lt;td&gt;-2.84x&lt;/td&gt;
				&lt;td&gt;-4.46x&lt;/td&gt;
				&lt;td&gt;-3.62x&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/tbody&gt;
	&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;text-muted&quot;&gt;
	&lt;strong&gt;Note:&lt;/strong&gt; I should point out that Swift has &lt;strong&gt;slightly regressed&lt;/strong&gt; in beta 6 — but it is still substantially faster than Objective-C on all algorithms. When comparing the results above with &lt;a href=&quot;/apples-to-apples-part-two/&quot;&gt;&lt;em&gt;Table 4&lt;/em&gt; from Part II&lt;/a&gt;, we see that Swift is slower for each sort by the following rates: 1.01x, 1.06x, 1.15x, 1.23x, 1.33x, respectively. Remember, Swift is still in beta. Things happen. If previous releases are any indication, we will surely see improvements.
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Unexpectedly, &lt;strong&gt;Swift outperforms C&lt;/strong&gt; for the standard library sort. This may reveal more about the standard library sorting algorithms than it does about the languages, but it is fascinating nonetheless. Examining the other sorts, C comes out ahead as most would have guessed — but its &lt;strong&gt;margins are small&lt;/strong&gt;, relatively speaking. Recall how Swift nailed Objective-C in the previous post. At its slowest, Swift was still 6x faster than Objective-C, which means that Objective-C could not dream of performing this well. This is a big deal.&lt;/p&gt;

&lt;p class=&quot;text-muted text-center table-header-footer&quot;&gt;&lt;strong&gt;Table 2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
	&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
		&lt;thead&gt;
			&lt;tr&gt;
				&lt;th class=&quot;text-muted&quot;&gt;
					&lt;em&gt;T&lt;/em&gt; = 20
					&lt;br /&gt;
					&lt;em&gt;N&lt;/em&gt; = 100,000
					&lt;br /&gt;
					Release
				&lt;/th&gt;
				&lt;th&gt;Std lib sort&lt;/th&gt;
				&lt;th&gt;Quick sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Heap sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Insertion sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Selection sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
			&lt;/tr&gt;
		&lt;/thead&gt;
		&lt;tbody&gt;
			&lt;tr&gt;
				&lt;th&gt;C &lt;code&gt;-Ofast&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;0.020861 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.000216)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;0.011245 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.000044)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;0.014932 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.000308)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;7.578673 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.012784)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;6.985793 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.004598)&lt;/span&gt;&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;th&gt;Swift &lt;code&gt;-Ounchecked&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;0.009508 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.000367)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;0.011953 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.000603)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;0.033006 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.002562)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;30.831836 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.057725)&lt;/span&gt;&lt;/td&gt;
				&lt;td&gt;9.660987 s&lt;br /&gt;&lt;span class=&quot;text-muted&quot;&gt;(&amp;plusmn; 0.078939)&lt;/span&gt;&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr class=&quot;info text-info&quot;&gt;
				&lt;th&gt;Difference&lt;/th&gt;
				&lt;td&gt;2.19x&lt;/td&gt;
				&lt;td&gt;-1.06x&lt;/td&gt;
				&lt;td&gt;-2.21x&lt;/td&gt;
				&lt;td&gt;-4.07x&lt;/td&gt;
				&lt;td&gt;-1.38x&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/tbody&gt;
	&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Here we see what we should expect from &lt;code class=&quot;highlighter-rouge&quot;&gt;-Ounchecked&lt;/code&gt;, given the results in &lt;em&gt;Table 1&lt;/em&gt;. There is a similar pattern, only amplified. Swift gets even faster and even closer to C.&lt;/p&gt;

&lt;h3 id=&quot;approaching-the-speed-of-c&quot;&gt;Approaching the speed of C&lt;/h3&gt;

&lt;p&gt;It’s serendipitous that &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; denotes &lt;a href=&quot;http://en.wikipedia.org/wiki/Speed_of_light&quot;&gt;the speed of light&lt;/a&gt; in physics, isn’t it? A common view in the programming community is that &lt;em&gt;nothing beats C&lt;/em&gt;, and rightly so. It paved the road ahead and has endured the decades since its inception. I doubt that C is going anywhere, but this new kid on the block is pretty swift.&lt;/p&gt;

&lt;p&gt;As programmers, we have a choice with regard to our toolsets. Programming languages come in a variety of forms with a &lt;a href=&quot;https://www.destroyallsoftware.com/talks/wat&quot;&gt;variety of features&lt;/a&gt;. The opportunity costs of choosing one language are the features that you are foregoing in another. Swift is no C when it comes to speed, but when considering the features of each language, Swift’s superiority is undisputed.&lt;/p&gt;

&lt;p&gt;And now we must patiently wait for the next beta.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>On the value of benchmarks</title>
      <subtitle>A brief examination of measuring code performance</subtitle>
      <link href="http://localhost:4000/blog/on-the-value-of-benchmarks/" />
      <id>http://localhost:4000/blog/on-the-value-of-benchmarks</id>

      <published>2014-08-19T00:00:00+00:00</published>
      
      <updated>2014-08-19T00:00:00+00:00</updated>
      

      <summary><p>As <a href="/apples-to-apples-part-two/"><em>Apples to apples, Part II</em></a> made its way around the web, it was <a href="https://twitter.com/SwiftLang/status/497057489766981632">praised</a> as well as <a href="https://twitter.com/benpickering/status/497127012814041088">critiqued</a>. The latter largely consisted of questions regarding the real-world applications of these benchmarks. In general, benchmarks should be taken with a grain of salt. I want to take a minute to clarify my thoughts on benchmarks and how I think they can be valuable.</p>

</summary>
      <content type="html">&lt;p&gt;As &lt;a href=&quot;/apples-to-apples-part-two/&quot;&gt;&lt;em&gt;Apples to apples, Part II&lt;/em&gt;&lt;/a&gt; made its way around the web, it was &lt;a href=&quot;https://twitter.com/SwiftLang/status/497057489766981632&quot;&gt;praised&lt;/a&gt; as well as &lt;a href=&quot;https://twitter.com/benpickering/status/497127012814041088&quot;&gt;critiqued&lt;/a&gt;. The latter largely consisted of questions regarding the real-world applications of these benchmarks. In general, benchmarks should be taken with a grain of salt. I want to take a minute to clarify my thoughts on benchmarks and how I think they can be valuable.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Benchmarks in software (and also &lt;a href=&quot;http://www.macrumors.com/2013/12/15/new-12-core-mac-pro-once-again-shows-up-in-benchmarks/&quot;&gt;in hardware&lt;/a&gt;) inherently do not reflect real-world performance scenarios. Just as with scientific experiments in academia, we have contrived a special situation in a fabricated environment that isolates a particular feature of a particular system, in order to examine it more closely. It does not matter whether we are measuring the speed of sorting large arrays of numbers, or examining the mechanisms of the behavior of &lt;em&gt;Caenorhaditis elegans&lt;/em&gt; (i.e. the nematode worm) by &lt;a href=&quot;http://www.ploscompbiol.org/article/info:doi/10.1371/journal.pcbi.1002890&quot;&gt;embedding a model of its connectome in a simplified body and environment simulation&lt;/a&gt; — limitations and restrictions exist. By virtue of these processes, external factors that are normally present are absent.&lt;/p&gt;

&lt;p&gt;But even in these circumstances, I find benchmarks (as well as scientific research) interesting and meaningful.
There may not be a direct, one-to-one correspondence in performance between a set of benchmarks and a full app, but they will provide insights into how these languages operate in general, in certain contexts, or under certain conditions. These observations can help guide our troubleshooting abilities and inform our decisions on which toolsets to use. Further, every app will be built differently. Only through the isolation of benchmark testing can we objectively view and examine the qualities of a programming language.&lt;/p&gt;

&lt;p&gt;In iOS and OS X development, we are lucky enough to have amazing tools like &lt;a href=&quot;https://developer.apple.com/xcode/features/&quot;&gt;Instruments&lt;/a&gt; whose purpose is to help make our apps better. We also have a few programming languages to choose from: Objective-C, C, C++, and Swift — all of which can co-exist peacefully in a single app. Instruments can easily tell you where your code is slow, but there is not a “fix me” button that you can click to solve your problems. We often have to be creative with regard to optimizing our apps, and knowing a little about how and why certain languages may be slower or faster, and under what conditions, could go a long way.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Apples to apples, Part II</title>
      <subtitle>An analysis of sorts between Objective-C and Swift</subtitle>
      <link href="http://localhost:4000/blog/apples-to-apples-part-two/" />
      <id>http://localhost:4000/blog/apples-to-apples-part-two</id>

      <published>2014-08-06T00:00:00+00:00</published>
      
      <updated>2014-08-06T00:00:00+00:00</updated>
      

      <summary><p>If at first you don’t succeed, try, try again. Practice makes perfect. These proverbs have encouraged us all in many different contexts. But in software development, they tug at our heartstrings uniquely. Programmers persevere through countless nights of fixing bugs. Companies march vigilantly toward an <a href="http://en.wikipedia.org/wiki/Minimum_viable_product">MVP</a>. But after 1.0 there is no finish line, there is no bottom of the 9th inning. There are more bugs to be fixed. There are new releases ahead. The march continues, because software is not a <em>product</em>, it is a <em>process</em>.</p>

</summary>
      <content type="html">&lt;p&gt;If at first you don’t succeed, try, try again. Practice makes perfect. These proverbs have encouraged us all in many different contexts. But in software development, they tug at our heartstrings uniquely. Programmers persevere through countless nights of fixing bugs. Companies march vigilantly toward an &lt;a href=&quot;http://en.wikipedia.org/wiki/Minimum_viable_product&quot;&gt;MVP&lt;/a&gt;. But after 1.0 there is no finish line, there is no bottom of the 9th inning. There are more bugs to be fixed. There are new releases ahead. The march continues, because software is not a &lt;em&gt;product&lt;/em&gt;, it is a &lt;em&gt;process&lt;/em&gt;.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;This week, Apple has reminded us of the value of this iterative process and its rewards with the fifth beta release of Xcode 6, iOS 8, OS X Yosemite, and most importantly — &lt;em&gt;Swift&lt;/em&gt;. This update includes a &lt;a href=&quot;http://adcdownload.apple.com//Developer_Tools/xcode_6_beta_5_za4gu6/xcode_6_beta_5_release_notes.pdf&quot;&gt;number of improvements&lt;/a&gt;, but perhaps the most interesting are those not listed. Swift was rough around the edges during its launch at &lt;a href=&quot;https://developer.apple.com/wwdc/&quot;&gt;WWDC&lt;/a&gt;, but it is &lt;strong&gt;definitely&lt;/strong&gt; beginning to live up to its name.&lt;/p&gt;

&lt;p&gt;If you missed my first post, &lt;a href=&quot;/apples-to-apples/&quot;&gt;&lt;em&gt;Apples to Apples&lt;/em&gt;&lt;/a&gt;, you should head over there now to catch up.&lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;The setup is the same as before, but I’ll reiterate for clarity.&lt;/p&gt;

&lt;blockquote&gt;
	&lt;ul&gt;
		&lt;li&gt;&lt;strong&gt;Code:&lt;/strong&gt; &lt;a href=&quot;https://github.com/jessesquires/swift-sorts&quot;&gt;swift-sorts&lt;/a&gt;, &lt;a href=&quot;https://github.com/jessesquires/objc-sorts&quot;&gt;objc-sorts&lt;/a&gt;, and &lt;a href=&quot;https://gist.github.com/jessesquires/06b6bd68a7d18810651f#file-sorts-m&quot;&gt;std lib sort&lt;/a&gt; implementations&lt;/li&gt;
		&lt;li&gt;&lt;strong&gt;Software:&lt;/strong&gt; OS X Mavericks 10.9.4, Xcode 6 beta 5&lt;/li&gt;
		&lt;li&gt;&lt;strong&gt;Hardware:&lt;/strong&gt; 2008 unibody MacBook Pro, 2.4 Ghz Intel Core 2 Duo, 8 GB 1067 MHz DDR3 memory&lt;/li&gt;
	&lt;/ul&gt;

	&lt;p&gt;The benchmarks consist of &lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/em&gt; trials, which are averaged at the end to obtain the average execution time for each algorithm. Each trial begins by generating an array of &lt;em&gt;&lt;strong&gt;N&lt;/strong&gt;&lt;/em&gt; random integers in the range &lt;code&gt;[0, UINT32_MAX)&lt;/code&gt;. Then, each sorting algorithm is passed a copy of this initial array to sort. The current time is logged before and after each sort and the difference between the two yields the execution time for the algorithm for the current trial.&lt;/p&gt;

	&lt;p&gt;These two programs were carefully crafted to be a true &lt;em&gt;apples-to-apples&lt;/em&gt; comparison. All of the algorithms, as well as &lt;code&gt;main.swift&lt;/code&gt; and &lt;code&gt;main.m&lt;/code&gt;, are implemented as similarly as possible, bounded only by the confines and paradigms of the languages themselves. In Objective-C, &lt;code&gt;NSArray&lt;/code&gt; and &lt;code&gt;NSNumber&lt;/code&gt; are used intentionally as the counterparts to Swift's &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt;. The APIs are language-specific too, for example &lt;code&gt;exchangeObjectAtIndex: withObjectAtIndex:&lt;/code&gt; versus &lt;code&gt;swap()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;results&quot;&gt;Results&lt;/h3&gt;

&lt;p&gt;Below are the results of running each program over 10 trials with 10,000 integers. The build configuration settings are noted for each run and the average execution times are displayed in seconds. The average case runtime complexity for each algorithm is also noted.&lt;/p&gt;

&lt;p&gt;The final row in each table is the difference in speed of Swift compared to Objective-C. A positive value indicates that Swift is faster, while a negative value indicates that Swift is slower. For example, if Objective-C runs in 3.6 seconds and Swift runs in 1.2 seconds, then Swift is 3 times (3x) faster.&lt;/p&gt;

&lt;p class=&quot;text-muted text-center table-header-footer&quot;&gt;&lt;strong&gt;Table 1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
	&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
		&lt;thead&gt;
			&lt;tr&gt;
				&lt;th class=&quot;text-muted&quot;&gt;
					&lt;em&gt;T&lt;/em&gt; = 10
					&lt;br /&gt;
					&lt;em&gt;N&lt;/em&gt; = 10,000
					&lt;br /&gt;
					Debug
				&lt;/th&gt;
				&lt;th&gt;Std lib sort&lt;/th&gt;
				&lt;th&gt;Quick sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Heap sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Insertion sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Selection sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
			&lt;/tr&gt;
		&lt;/thead&gt;
		&lt;tbody&gt;
			&lt;tr&gt;
				&lt;th&gt;Objective-C &lt;code&gt;-O0&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;0.015161 s&lt;/td&gt;
				&lt;td&gt;0.011438 s&lt;/td&gt;
				&lt;td&gt;0.023984 s&lt;/td&gt;
				&lt;td&gt;1.917997 s&lt;/td&gt;
				&lt;td&gt;3.685714 s&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;th&gt;Swift &lt;code&gt;-Onone&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;1.300011 s&lt;/td&gt;
				&lt;td&gt;1.364851 s&lt;/td&gt;
				&lt;td&gt;3.974969 s&lt;/td&gt;
				&lt;td&gt;524.086557 s&lt;/td&gt;
				&lt;td&gt;400.251450 s&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr class=&quot;info text-info&quot;&gt;
				&lt;th&gt;Difference&lt;/th&gt;
				&lt;td&gt;-85.7x&lt;/td&gt;
				&lt;td&gt;-119.3x&lt;/td&gt;
				&lt;td&gt;-165.7x&lt;/td&gt;
				&lt;td&gt;-273.2x&lt;/td&gt;
				&lt;td&gt;-108.6x&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/tbody&gt;
	&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;When not optimized, Swift is nothing to write home about. You can see that Objective-C performs substantially better. But this is ok — since you will be shipping with optimized builds. With no optimizations, this is what we should expect to see. The swiftness of Swift is in the compiler — &lt;a href=&quot;http://www.llvm.org&quot;&gt;LLVM&lt;/a&gt; and &lt;a href=&quot;http://clang.llvm.org&quot;&gt;Clang&lt;/a&gt;. Mike Ash’s &lt;em&gt;Friday Q&amp;amp;A&lt;/em&gt; last month on the &lt;a href=&quot;https://mikeash.com/pyblog/friday-qa-2014-07-04-secrets-of-swifts-speed.html&quot;&gt;&lt;em&gt;Secrets of Swift’s Speed&lt;/em&gt;&lt;/a&gt; provides a good overview of how better performance can be achieved with Swift versus Objective-C with compiler optimizations. We can see these optimizations in action below.&lt;/p&gt;

&lt;p class=&quot;text-muted text-center table-header-footer&quot;&gt;&lt;strong&gt;Table 2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
	&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
		&lt;thead&gt;
			&lt;tr&gt;
				&lt;th class=&quot;text-muted&quot;&gt;
					&lt;em&gt;T&lt;/em&gt; = 10
					&lt;br /&gt;
					&lt;em&gt;N&lt;/em&gt; = 10,000
					&lt;br /&gt;
					Release
				&lt;/th&gt;
				&lt;th&gt;Std lib sort&lt;/th&gt;
				&lt;th&gt;Quick sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Heap sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Insertion sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Selection sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
			&lt;/tr&gt;
		&lt;/thead&gt;
		&lt;tbody&gt;
			&lt;tr&gt;
				&lt;th&gt;Objective-C &lt;code&gt;-O3&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;0.011852 s&lt;/td&gt;
				&lt;td&gt;0.010419 s&lt;/td&gt;
				&lt;td&gt;0.019587 s&lt;/td&gt;
				&lt;td&gt;1.741661 s&lt;/td&gt;
				&lt;td&gt;3.439606 s&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;th&gt;Swift &lt;code&gt;-O&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;0.001072 s&lt;/td&gt;
				&lt;td&gt;0.001316 s&lt;/td&gt;
				&lt;td&gt;0.002580 s&lt;/td&gt;
				&lt;td&gt;0.279190 s&lt;/td&gt;
				&lt;td&gt;0.193269 s&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr class=&quot;info text-info&quot;&gt;
				&lt;th&gt;Difference&lt;/th&gt;
				&lt;td&gt;11.1x&lt;/td&gt;
				&lt;td&gt;7.9x&lt;/td&gt;
				&lt;td&gt;7.6x&lt;/td&gt;
				&lt;td&gt;6.2x&lt;/td&gt;
				&lt;td&gt;17.8x&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/tbody&gt;
	&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;If you recall the results from the &lt;a href=&quot;/apples-to-apples/&quot;&gt;previous post&lt;/a&gt;, then this should be quite shocking (in a good way). Take a deep breath. Yes, yes this is real life. The tables have completely turned (no pun intended). I’ve been running these trials since the first beta, and this is the &lt;em&gt;first time&lt;/em&gt; that Swift has performed &lt;strong&gt;better than Objective-C&lt;/strong&gt; for every single algorithm, with standard optimizations. And not only is Swift faster, but it is faster by significant margins.&lt;/p&gt;

&lt;p class=&quot;text-muted text-center table-header-footer&quot;&gt;&lt;strong&gt;Table 3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
	&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
		&lt;thead&gt;
			&lt;tr&gt;
				&lt;th class=&quot;text-muted&quot;&gt;
					&lt;em&gt;T&lt;/em&gt; = 10
					&lt;br /&gt;
					&lt;em&gt;N&lt;/em&gt; = 10,000
					&lt;br /&gt;
					Release
				&lt;/th&gt;
				&lt;th&gt;Std lib sort&lt;/th&gt;
				&lt;th&gt;Quick sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Heap sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Insertion sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Selection sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
			&lt;/tr&gt;
		&lt;/thead&gt;
		&lt;tbody&gt;
			&lt;tr&gt;
				&lt;th&gt;Objective-C &lt;code&gt;-Ofast&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;0.012596 s&lt;/td&gt;
				&lt;td&gt;0.010147 s&lt;/td&gt;
				&lt;td&gt;0.019617 s&lt;/td&gt;
				&lt;td&gt;1.763124 s&lt;/td&gt;
				&lt;td&gt;3.504833 s&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;th&gt;Swift &lt;code&gt;-Ounchecked&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;0.000773 s&lt;/td&gt;
				&lt;td&gt;0.001011 s&lt;/td&gt;
				&lt;td&gt;0.002073 s&lt;/td&gt;
				&lt;td&gt;0.261637 s&lt;/td&gt;
				&lt;td&gt;0.099996 s&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr class=&quot;info text-info&quot;&gt;
				&lt;th&gt;Difference&lt;/th&gt;
				&lt;td&gt;16.3x&lt;/td&gt;
				&lt;td&gt;10.0x&lt;/td&gt;
				&lt;td&gt;9.5x&lt;/td&gt;
				&lt;td&gt;6.7x&lt;/td&gt;
				&lt;td&gt;35.0x&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/tbody&gt;
	&lt;/table&gt;
&lt;/div&gt;

&lt;p class=&quot;text-muted text-center table-header-footer&quot;&gt;As of beta 5, the Swift optimization level of &lt;code&gt;-Ofast&lt;/code&gt; has been deprecated in favor &lt;code&gt;-Ounchecked&lt;/code&gt;. This renaming is a delightful change. Previously it read as, &lt;em&gt;&quot;Ooooh fast!&quot;&lt;/em&gt;, begging for misuse and misunderstanding. But now it's more like &lt;em&gt;&quot;Oh... unchecked?&quot;&lt;/em&gt;, which better reflects its unsafe nature.&lt;/p&gt;

&lt;p&gt;This should come as no surprise. Swift performance at this optimization level was always better than Objective-C, with the exception of the std lib sort — which no longer the case.&lt;/p&gt;

&lt;p&gt;The benchmarks above were gathered with &lt;code class=&quot;highlighter-rouge&quot;&gt;N = 10,000&lt;/code&gt; to be consistent with the previous post. However, this is no longer a challenge for Swift. Let’s see what happens when &lt;code class=&quot;highlighter-rouge&quot;&gt;N = 100,000&lt;/code&gt;. Given that most, if not all, developers will be compliling their modules and apps at the standard optimization level, the trials below were only run with &lt;code class=&quot;highlighter-rouge&quot;&gt;-O&lt;/code&gt; and release. As expected, Swift comes out on top.&lt;/p&gt;

&lt;p class=&quot;text-muted text-center table-header-footer&quot;&gt;&lt;strong&gt;Table 4&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
	&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
		&lt;thead&gt;
			&lt;tr&gt;
				&lt;th class=&quot;text-muted&quot;&gt;
					&lt;em&gt;T&lt;/em&gt; = 10
					&lt;br /&gt;
					&lt;em&gt;N&lt;/em&gt; = 100,000
					&lt;br /&gt;
					Release
				&lt;/th&gt;
				&lt;th&gt;Std lib sort&lt;/th&gt;
				&lt;th&gt;Quick sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Heap sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Insertion sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Selection sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
			&lt;/tr&gt;
		&lt;/thead&gt;
		&lt;tbody&gt;
			&lt;tr&gt;
				&lt;th&gt;Objective-C &lt;code&gt;-O3&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;0.151701 s&lt;/td&gt;
				&lt;td&gt;0.121619 s&lt;/td&gt;
				&lt;td&gt;0.251310 s&lt;/td&gt;
				&lt;td&gt;175.421688 s&lt;/td&gt;
				&lt;td&gt;349.182743 s&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;th&gt;Swift &lt;code&gt;-O&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;0.013933 s&lt;/td&gt;
				&lt;td&gt;0.015712 s&lt;/td&gt;
				&lt;td&gt;0.036932 s&lt;/td&gt;
				&lt;td&gt;27.532488 s&lt;/td&gt;
				&lt;td&gt;18.969978 s&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr class=&quot;info text-info&quot;&gt;
				&lt;th&gt;Difference&lt;/th&gt;
				&lt;td&gt;10.9x&lt;/td&gt;
				&lt;td&gt;7.7x&lt;/td&gt;
				&lt;td&gt;6.8x&lt;/td&gt;
				&lt;td&gt;6.4x&lt;/td&gt;
				&lt;td&gt;18.4x&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/tbody&gt;
	&lt;/table&gt;
&lt;/div&gt;

&lt;h3 id=&quot;full-speed-ahead&quot;&gt;Full speed ahead&lt;/h3&gt;

&lt;p&gt;When Apple introduced Swift, we were assured safety, clarity, modernity, and speed. It is clear to me that they have delivered and are continuing to deliver on these promises. The refinements and enhancements made over the past few months have been absolutely great. Some highlights for me include array value semantics, array and dictionary syntactic sugar, the &lt;code class=&quot;highlighter-rouge&quot;&gt;..&amp;lt;&lt;/code&gt; operator replacing the &lt;code class=&quot;highlighter-rouge&quot;&gt;..&lt;/code&gt; operator, and the performance improvements seen here. I think Swift is coming along quite nicely and I am more excited than ever for the next beta.&lt;/p&gt;

&lt;p&gt;Swift is a breath of fresh air that makes reading and writing Objective-C feel archaic. I cannot wait for 1.0 and the moment when I can say goodbye to Objective-C.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;em&gt;Apples to apples&lt;/em&gt; series will continue as betas are released. Stay tuned for updates and new posts!&lt;/strong&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Status bars matter</title>
      <subtitle>Perfecting your app screenshots for the App Store</subtitle>
      <link href="http://localhost:4000/blog/status-bars-matter/" />
      <id>http://localhost:4000/blog/status-bars-matter</id>

      <published>2014-08-03T00:00:00+00:00</published>
      
      <updated>2014-10-13T00:00:00+00:00</updated>
      

      <summary><p>You have spent countless hours, days, months, or maybe even <a href="http://www.polygon.com/2014/2/6/5386200/why-it-took-a-year-to-make-and-then-break-down-an-amazing-puzzle-game">years</a> perfecting your app. There has been plenty of blood, sweat, and tears. Your relationships and your health have <a href="http://blog.jaredsinclair.com/post/93118460565/a-candid-look-at-unreads-first-year">suffered through</a> the development process. You are ready for 1.0 and the time has arrived to prepare all of your content for the App Store — app icon, keywords, description, localizations, and screenshots (and soon <a href="https://developer.apple.com/support/appstore/app-previews/">app previews</a>).</p>

</summary>
      <content type="html">&lt;p&gt;You have spent countless hours, days, months, or maybe even &lt;a href=&quot;http://www.polygon.com/2014/2/6/5386200/why-it-took-a-year-to-make-and-then-break-down-an-amazing-puzzle-game&quot;&gt;years&lt;/a&gt; perfecting your app. There has been plenty of blood, sweat, and tears. Your relationships and your health have &lt;a href=&quot;http://blog.jaredsinclair.com/post/93118460565/a-candid-look-at-unreads-first-year&quot;&gt;suffered through&lt;/a&gt; the development process. You are ready for 1.0 and the time has arrived to prepare all of your content for the App Store — app icon, keywords, description, localizations, and screenshots (and soon &lt;a href=&quot;https://developer.apple.com/support/appstore/app-previews/&quot;&gt;app previews&lt;/a&gt;).&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;But even with all of Dan Counsell’s &lt;a href=&quot;http://dancounsell.com/articles&quot;&gt;excellent advice&lt;/a&gt; on how to promote your app and refine your App Store presence, I continue to see iOS developers make one glaring mistake in their screenshots. This common flaw is even overlooked in Dan’s article on &lt;a href=&quot;http://dancounsell.com/articles/designing-great-app-store-screenshots&quot;&gt;&lt;em&gt;Designing Great App Store Screenshots&lt;/em&gt;&lt;/a&gt;, which should be required reading for all iOS developers. But what does it fail to mention? &lt;strong&gt;The status bar.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/statusbar.jpg&quot; title=&quot;iOS status bar&quot; alt=&quot;iOS status bar&quot; /&gt;
&lt;small class=&quot;text-muted center&quot;&gt;iOS status bar&lt;/small&gt;&lt;/p&gt;

&lt;h4 id=&quot;sore-thumbs&quot;&gt;Sore thumbs&lt;/h4&gt;

&lt;p&gt;Status bars matter. If configured well, they go unnoticed. But if they are sloppily ignored, they stick out like a sore thumb. And sadly, there are a lot of sore thumbs in the App Store. Below are actual status bars taken from the screenshots of three different apps curently in the App Store. All apps were on one of the top charts within the top 50.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/statusbar-bad1.jpg&quot; title=&quot;Status bar example 1&quot; alt=&quot;Status bar example 1&quot; /&gt;
&lt;small class=&quot;text-muted center&quot;&gt;Sample 1: status bars seen in the App Store&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/statusbar-bad2.jpg&quot; title=&quot;Status bar example 2&quot; alt=&quot;Status bar example 2&quot; /&gt;
&lt;small class=&quot;text-muted center&quot;&gt;Sample 2: status bars seen in the App Store&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-thumbnail img-responsive center&quot; src=&quot;/img/statusbar-bad3.jpg&quot; title=&quot;Status bar example 3&quot; alt=&quot;Status bar example 3&quot; /&gt;
&lt;small class=&quot;text-muted center&quot;&gt;Sample 3: status bars seen in the App Store&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;There’s a lot of information in an untamed status bar. In &lt;em&gt;Sample 1&lt;/em&gt; it looks like someone is from Canada, and working late through the evening. At least she had good reception and an adequate power supply. In &lt;em&gt;Sample 2&lt;/em&gt; the developer lives in the UK, and has extremly poor reception. She needs to charge her iPhone soon, but at least she knows her current location. &lt;em&gt;Sample 3&lt;/em&gt; is by far the most interesting. We can see AT&amp;amp;T’s typically poor reception, thus the developer is in the US. This guy was up late, but at least he remembered to set his alarm so that he could wake up in the morning to take more screenshots and charge his device.&lt;/p&gt;

&lt;p&gt;Status bars seem negligible until you notice how unsightly and distracting they can be. Luckily, the mistakes above can be easily avoided.&lt;/p&gt;

&lt;h4 id=&quot;preparing-your-screenshots&quot;&gt;Preparing your screenshots&lt;/h4&gt;

&lt;p&gt;We know that screenshots are one of the most important parts of the App Store content for which you are responsible. Users &lt;em&gt;rarely&lt;/em&gt; read app descriptions in their entirety, but they &lt;em&gt;always&lt;/em&gt; look at screenshots. If the status bar is visible in the screenshots that you provide, then it better be clean and uniform across every single one. It should have full cell reception bars, no carrier text, full Wi-Fi bars, and a fully charged battery. Each screenshot should also display &lt;strong&gt;the exact same time&lt;/strong&gt;. &lt;em&gt;No exceptions&lt;/em&gt;. Finally, depending on your app’s functionality, it might make sense to show the GPS location or Bluetooth indicators, but use sparingly. Also remember that you can remove the status bar altogether.&lt;/p&gt;

&lt;h4 id=&quot;raising-the-status-bar&quot;&gt;Raising the (status) bar&lt;/h4&gt;

&lt;p&gt;You can automate all of this with an awesome utility app called &lt;a href=&quot;http://shinydevelopment.com/status-magic/&quot;&gt;Status Magic&lt;/a&gt;, which adds perfect status bars to your screenshots or removes them completely. It is worth every penny, and it will get your screenshots looking clean and consistent in no time.&lt;/p&gt;

&lt;p&gt;The only aspect of the status bar that you should customize, aside from the colors, is the time. Apple uses &lt;code class=&quot;highlighter-rouge&quot;&gt;9:41 AM&lt;/code&gt;. Choose something reasonable — for example, &lt;a href=&quot;https://itunes.apple.com/us/app/clear-tasks-to-do-list/id493136154&quot;&gt;Clear&lt;/a&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;10:00&lt;/code&gt;. I like to use &lt;code class=&quot;highlighter-rouge&quot;&gt;7:06 AM&lt;/code&gt;. If you cannot decide on a time that is meaningful to you, then Apple’s &lt;code class=&quot;highlighter-rouge&quot;&gt;9:41 AM&lt;/code&gt; will work beautifully and you will fit right in.&lt;/p&gt;

&lt;p&gt;Don’t let your app be a victim of status bar neglect.
This is about polishing your app and its presentation in the App Store to the highest degree. &lt;strong&gt;Status bars matter&lt;/strong&gt;, and every detail counts.&lt;/p&gt;

&lt;div class=&quot;alert alert-danger&quot;&gt;
	&lt;strong&gt;Update&lt;/strong&gt; &lt;span class=&quot;pull-right&quot;&gt;&lt;em&gt;13 Oct 2014&lt;/em&gt;&lt;/span&gt;
	&lt;p&gt;
		&lt;a href=&quot;http://shinydevelopment.com&quot; class=&quot;alert-link&quot; target=&quot;_blank&quot;&gt;Shiny Development&lt;/a&gt; has removed Status Magic from the App Store. Find out why on &lt;a href=&quot;http://shinydevelopment.com/blog/status-magic-and-iphone6-screen-sizes/&quot; class=&quot;alert-link&quot; target=&quot;_blank&quot;&gt;their blog&lt;/a&gt; and how you can still get perfect status bars with OS X Yosemite and iOS 8.
	&lt;/p&gt;
&lt;/div&gt;
</content>
   </entry>
   
   <entry>
      <title>Apples to apples</title>
      <subtitle>A comparison of sorts between Objective-C and Swift</subtitle>
      <link href="http://localhost:4000/blog/apples-to-apples/" />
      <id>http://localhost:4000/blog/apples-to-apples</id>

      <published>2014-06-25T00:00:00+00:00</published>
      
      <updated>2014-08-01T00:00:00+00:00</updated>
      

      <summary><p>When Craig Federighi arrived at his presentation slide about Objective-C during this year’s <a href="http://www.apple.com/apple-events/june-2014/">WWDC keynote</a> everyone in the room seemed puzzled, curious, and maybe even a bit uneasy. <em>What was happening?</em> As he continued, he considered what Objective-C would be like <strong>without the C</strong>, and the room abruptly filled with rumblings and whispers <sup><a href="#note1" id="superscript1">[1]</a></sup> as developers in the audience confided in those around them. If you had been following the <a href="http://informalprotocol.com/2014/02/replacing-cocoa/">discussions</a> in our community about the <a href="http://nearthespeedoflight.com/article/2014_03_17_objective_next">state of Objective-C</a> (and why we <a href="http://ashfurrow.com/blog/we-need-to-replace-objective-c">need to replace it</a>) during the previous months, you could only have imagined one thing: Objective-C was no more — at least not as we knew it.</p>

</summary>
      <content type="html">&lt;p&gt;When Craig Federighi arrived at his presentation slide about Objective-C during this year’s &lt;a href=&quot;http://www.apple.com/apple-events/june-2014/&quot;&gt;WWDC keynote&lt;/a&gt; everyone in the room seemed puzzled, curious, and maybe even a bit uneasy. &lt;em&gt;What was happening?&lt;/em&gt; As he continued, he considered what Objective-C would be like &lt;strong&gt;without the C&lt;/strong&gt;, and the room abruptly filled with rumblings and whispers &lt;sup&gt;&lt;a href=&quot;#note1&quot; id=&quot;superscript1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; as developers in the audience confided in those around them. If you had been following the &lt;a href=&quot;http://informalprotocol.com/2014/02/replacing-cocoa/&quot;&gt;discussions&lt;/a&gt; in our community about the &lt;a href=&quot;http://nearthespeedoflight.com/article/2014_03_17_objective_next&quot;&gt;state of Objective-C&lt;/a&gt; (and why we &lt;a href=&quot;http://ashfurrow.com/blog/we-need-to-replace-objective-c&quot;&gt;need to replace it&lt;/a&gt;) during the previous months, you could only have imagined one thing: Objective-C was no more — at least not as we knew it.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
	&lt;p&gt;And then Federighi said, let there be Swift; and there was Swift.&lt;/p&gt;
	&lt;footer&gt;WWDC 2014, 1:44:48&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;The third floor of Moscone West erupted with applause as if we had traveled back in time to Steve Jobs’ &lt;a href=&quot;https://www.youtube.com/watch?v=EHWRkuDlNOE&quot;&gt;2007 announcement&lt;/a&gt; of &lt;em&gt;&lt;strong&gt;the&lt;/strong&gt;&lt;/em&gt; iPhone: &lt;em&gt;“An iPod, a phone, and an Internet communicator”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As the keynote continued, we were assured safety, optimizations, clarity, modernity, and speed. But, as some have &lt;a href=&quot;http://www.splasmata.com/?p=2798&quot;&gt;already investigated&lt;/a&gt;, Swift may not be as swift as promised. However, Swift is still in beta (along with Xcode 6, iOS 8, and OS X 10.10), so we will undoubtedly see many improvements and changes in the coming months.&lt;/p&gt;

&lt;p&gt;As a fun and interesting &lt;a href=&quot;http://codekata.com&quot;&gt;code kata&lt;/a&gt;, I decided to port my &lt;a href=&quot;https://github.com/jessesquires/objc-sorts&quot;&gt;objc-sorts&lt;/a&gt; project on GitHub to Swift. Behold, &lt;a href=&quot;https://github.com/jessesquires/swift-sorts&quot;&gt;swift-sorts&lt;/a&gt;. These projects are collections of sorting algorithms implemented in Objective-C and Swift, respectively. I completed a rough version of the Swift project during the week of WWDC and have since refined both. I also shared the results below with Apple engineers in the Swift Labs during WWDC, but more on that later.&lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;div class=&quot;alert alert-danger&quot;&gt;
	&lt;strong&gt;Update 1: Xcode6-beta2&lt;/strong&gt; &lt;span class=&quot;pull-right&quot;&gt;&lt;em&gt;27 July 2014&lt;/em&gt;&lt;/span&gt;
	&lt;p&gt;
		This post has been updated for Xcode6-beta2. All trials were re-run as described below using Xcode6-beta2.
		Results were largely similar, no significant changes.
	&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;alert alert-danger&quot;&gt;
	&lt;strong&gt;Update 2: Xcode6-beta4&lt;/strong&gt; &lt;span class=&quot;pull-right&quot;&gt;&lt;em&gt;1 Aug 2014&lt;/em&gt;&lt;/span&gt;
	&lt;p&gt;
		This post has been updated for Xcode6-beta4. All trials were re-run as described below using Xcode6-beta4.
	&lt;/p&gt;
	&lt;p&gt;
		Major changes to the Swift language include the &lt;a href=&quot;https://developer.apple.com/swift/blog/?id=3&quot; class=&quot;alert-link&quot;&gt;redesign of arrays&lt;/a&gt; to have full value semantics and new syntactic sugar &amp;mdash; introduced in Xcode6-beta3.
		As of the beta4 release, Swift has seen &lt;strong&gt;dramatic&lt;/strong&gt; performance improvements. See the updated results below.
	&lt;/p&gt;
	&lt;p&gt;
		&lt;strong&gt;Note:&lt;/strong&gt; because of the new array semantics and syntax, code changes were required for Swift. You can find the previous code on the &lt;code&gt;xcode6-beta1and2&lt;/code&gt; branch &lt;a href=&quot;https://github.com/jessesquires/swift-sorts/branches&quot; class=&quot;alert-link&quot;&gt;on GitHub&lt;/a&gt;.
	&lt;/p&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Code:&lt;/em&gt; &lt;a href=&quot;https://github.com/jessesquires/swift-sorts&quot;&gt;Swift Sorts&lt;/a&gt; and &lt;a href=&quot;https://github.com/jessesquires/objc-sorts&quot;&gt;Objective-C Sorts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Software:&lt;/em&gt; OS X Mavericks &lt;del&gt;10.9.3&lt;/del&gt; 10.9.4, Xcode6-beta4 &lt;del&gt;beta2&lt;/del&gt; &lt;del&gt;WWDC seed&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Hardware:&lt;/em&gt; 2008 unibody MacBook Pro, 2.4 Ghz Intel Core 2 Duo, 8 GB 1067 MHz DDR3 memory &lt;sup&gt;&lt;a href=&quot;#note2&quot; id=&quot;superscript2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each project is a command line app with a debug, release, and unit-test scheme. Build and run, then watch the console for output.&lt;/p&gt;

&lt;p&gt;The benchmarks consist of &lt;em&gt;T&lt;/em&gt; trials, which are averaged at the end to obtain the average execution time for each algorithm. Each trial begins by generating an array of &lt;em&gt;N&lt;/em&gt; random integers in the range &lt;code class=&quot;highlighter-rouge&quot;&gt;[0, UINT32_MAX)&lt;/code&gt;. Then, each sorting algorithm is passed a copy of this initial array to sort. The current time is logged before and after each sort and the difference between the two yields the execution time for the algorithm for the current trial.&lt;/p&gt;

&lt;p&gt;These two programs were carefully crafted to be a true &lt;em&gt;apples-to-apples&lt;/em&gt; comparison. All of the algorithms, as well as &lt;code class=&quot;highlighter-rouge&quot;&gt;main.swift&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;main.m&lt;/code&gt;, are implemented as similarly as possible, bounded only by the confines and paradigms of the languages themselves. In Objective-C, &lt;code class=&quot;highlighter-rouge&quot;&gt;NSArray&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NSNumber&lt;/code&gt; are used intentionally as the counterparts to Swift’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;. The APIs are language-specific too, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;exchangeObjectAtIndex: withObjectAtIndex:&lt;/code&gt; versus &lt;code class=&quot;highlighter-rouge&quot;&gt;swap()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following were used for the standard library sorts:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Swift&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// some array&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Objective-C&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// some array&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sortUsingComparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSComparisonResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;span class=&quot;text-muted text-center center table-header-footer&quot;&gt;
Previous Swift std lib sort &lt;a href=&quot;https://gist.github.com/jessesquires/06b6bd68a7d18810651f/ee5aa0a7427f830fadd4d369c9d04a895fc2b49b&quot;&gt;implementation here&lt;/a&gt;.
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;Results&lt;/h3&gt;

&lt;p&gt;Below are the results of running each program over 10 trials with 10,000 integers. The build configuration settings are noted for each run and the execution times are displayed in seconds. The average case runtime complexity for each algorithm is also noted. I realize that 10,000 is relatively small, but you’ll see that Swift was taking quite a long time.&lt;/p&gt;

&lt;p class=&quot;text-muted text-center table-header-footer&quot;&gt;&lt;strong&gt;Table 1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
	&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
		&lt;thead&gt;
			&lt;tr&gt;
				&lt;th class=&quot;text-muted&quot;&gt;
					&lt;em&gt;T&lt;/em&gt; = 10
					&lt;br /&gt;
					&lt;em&gt;N&lt;/em&gt; = 10,000
					&lt;br /&gt;
					Debug
				&lt;/th&gt;
				&lt;th&gt;Std lib sort&lt;/th&gt;
				&lt;th&gt;Quick sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Heap sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Insertion sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Selection sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
			&lt;/tr&gt;
		&lt;/thead&gt;
		&lt;tbody&gt;
			&lt;tr&gt;
				&lt;th&gt;Objective-C &lt;code&gt;-O0&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;&lt;strike&gt;0.015813 s&lt;/strike&gt;&lt;br /&gt;0.015732 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;0.011393 s&lt;/strike&gt;&lt;br /&gt;0.011395 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;0.023052 s&lt;/strike&gt;&lt;br /&gt;0.025252 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;1.945385 s&lt;/strike&gt;&lt;br /&gt;1.931189 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;3.745795 s&lt;/strike&gt;&lt;br /&gt;3.762144 s&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;th&gt;Swift &lt;code&gt;-Onone&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;&lt;strike&gt;1.460893 s&lt;/strike&gt;&lt;br /&gt;1.536891 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;1.585898 s&lt;/strike&gt;&lt;br /&gt;1.633227 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;4.498561 s&lt;/strike&gt;&lt;br /&gt;4.714571 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;599.164323 s&lt;/strike&gt;&lt;br /&gt;625.810322 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;507.968824 s&lt;/strike&gt;&lt;br /&gt;519.386646 s&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/tbody&gt;
	&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p class=&quot;text-muted text-center table-header-footer&quot;&gt;&lt;strong&gt;Table 2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
	&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
		&lt;thead&gt;
			&lt;tr&gt;
				&lt;th class=&quot;text-muted&quot;&gt;
					&lt;em&gt;T&lt;/em&gt; = 10
					&lt;br /&gt;
					&lt;em&gt;N&lt;/em&gt; = 10,000
					&lt;br /&gt;
					Release
				&lt;/th&gt;
				&lt;th&gt;Std lib sort&lt;/th&gt;
				&lt;th&gt;Quick sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Heap sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Insertion sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Selection sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
			&lt;/tr&gt;
		&lt;/thead&gt;
		&lt;tbody&gt;
			&lt;tr&gt;
				&lt;th&gt;Objective-C &lt;code&gt;-O3&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;&lt;strike&gt;0.012037 s&lt;/strike&gt;&lt;br /&gt;0.012195 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;0.010317 s&lt;/strike&gt;&lt;br /&gt;0.010893 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;0.020318 s&lt;/strike&gt;&lt;br /&gt;0.019672 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;1.777335 s&lt;/strike&gt;&lt;br /&gt;1.778275 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;3.508259 s&lt;/strike&gt;&lt;br /&gt;3.521110 s&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;th&gt;Swift &lt;code&gt;-O&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;&lt;strike&gt;0.079272 s&lt;/strike&gt;&lt;br /&gt;0.019062 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;0.072787 s&lt;/strike&gt;&lt;br /&gt;0.007888 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;0.212094 s&lt;/strike&gt;&lt;br /&gt;0.057481 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;28.431325 s&lt;/strike&gt;&lt;br /&gt;4.407984 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;8.662720 s&lt;/strike&gt;&lt;br /&gt;7.028199 s&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/tbody&gt;
	&lt;/table&gt;
&lt;/div&gt;

&lt;p class=&quot;text-muted text-center table-header-footer&quot;&gt;According to the Apple engineers that I spoke with, &lt;code&gt;-O3&lt;/code&gt; in Objective-C is essentially the equivalent to &lt;code&gt;-O&lt;/code&gt; in Swift.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p class=&quot;text-muted text-center table-header-footer&quot;&gt;&lt;strong&gt;Table 3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;
	&lt;table class=&quot;table table-bordered table-hover&quot;&gt;
		&lt;thead&gt;
			&lt;tr&gt;
				&lt;th class=&quot;text-muted&quot;&gt;
					&lt;em&gt;T&lt;/em&gt; = 10
					&lt;br /&gt;
					&lt;em&gt;N&lt;/em&gt; = 10,000
					&lt;br /&gt;
					Release
				&lt;/th&gt;
				&lt;th&gt;Std lib sort&lt;/th&gt;
				&lt;th&gt;Quick sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Heap sort&lt;br /&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Insertion sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
				&lt;th&gt;Selection sort&lt;br /&gt;&lt;code&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/code&gt;&lt;/th&gt;
			&lt;/tr&gt;
		&lt;/thead&gt;
		&lt;tbody&gt;
			&lt;tr&gt;
				&lt;th&gt;Objective-C &lt;code&gt;-Ofast&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;&lt;strike&gt;0.012278 s&lt;/strike&gt;&lt;br /&gt;0.011828 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;0.010448 s&lt;/strike&gt;&lt;br /&gt;0.010285 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;0.020256 s&lt;/strike&gt;&lt;br /&gt;0.019763 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;1.787421 s&lt;/strike&gt;&lt;br /&gt;1.776664 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;3.582407 s&lt;/strike&gt;&lt;br /&gt;3.497402 s&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;th&gt;Swift &lt;code&gt;-Ofast&lt;/code&gt;&lt;/th&gt;
				&lt;td&gt;&lt;strike&gt;0.022573 s&lt;/strike&gt;&lt;br /&gt;0.001306 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;0.005410 s&lt;/strike&gt;&lt;br /&gt;0.001426 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;0.005903 s&lt;/strike&gt;&lt;br /&gt;0.002259 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;0.997563 s&lt;/strike&gt;&lt;br /&gt;0.297713 s&lt;/td&gt;
				&lt;td&gt;&lt;strike&gt;0.113045 s&lt;/strike&gt;&lt;br /&gt;0.068731 s&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/tbody&gt;
	&lt;/table&gt;
&lt;/div&gt;

&lt;p class=&quot;text-muted text-center table-header-footer&quot;&gt;Note that &lt;code&gt;-O&lt;/code&gt; is the standard optimization level for Swift and &lt;code&gt;-Ofast&lt;/code&gt;, though faster, removes &lt;strong&gt;all&lt;/strong&gt; safety features (&lt;em&gt;array bounds-checking, integer overflow checking, etc.&lt;/em&gt;) from Swift. In other words, do not ship an entire app compiled with &lt;code&gt;-Ofast&lt;/code&gt;. More on that below.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-danger&quot;&gt;
	&lt;strong&gt;Update 2: Xcode6-beta4&lt;/strong&gt; &lt;span class=&quot;pull-right&quot;&gt;&lt;em&gt;1 Aug 2014&lt;/em&gt;&lt;/span&gt;
	&lt;p&gt;
		We see the following notable changes with Xcode-beta4:
	&lt;/p&gt;
	&lt;ol&gt;
		&lt;li&gt;Swift is now slightly worse without optimizations. (see &lt;em&gt;Table 1&lt;/em&gt;)&lt;/li&gt;
		&lt;li&gt;With optimizations, Swift performance is incredibly better and much closer to Objective-C. However, Objective-C is still faster. (see &lt;em&gt;Table 2&lt;/em&gt;)&lt;/li&gt;
		&lt;li&gt;Swift's insertion sort has completely turned around, and now outperforms selection sort with significant margins!&lt;/li&gt;
		&lt;li&gt;Swift with agressive optimizations is substantially faster than before, and outperforms Objective-C on every sort.&lt;/li&gt;
	&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;There are a few notable discoveries here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Rather shockingly, debug is incredibly slow in Swift but improves dramatically with compiler flags. The difference in performance between &lt;em&gt;no&lt;/em&gt; optimizations and &lt;code&gt;-Ofast&lt;/code&gt; in Swift is stark. On the other hand, Objective-C sees relatively minor benefits.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At the standard optimization level (see &lt;em&gt;Table 2&lt;/em&gt;), the two languages begin to perform more similarly. Objective-C is still noticeably faster though. Std lib sort is 6.5x faster. Quick sort is 7.0x faster. Heap sort is 10.4x faster. Insertion sort is 16.0x faster. Selection sort is 2.47x faster.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Only with &lt;code&gt;-Ofast&lt;/code&gt; do we begin to experience the swiftness of Swift, and even then the standard library sort in Objective-C is almost twice as fast (1.84x). However, when comparing Swift to Swift the discrepancies are enormous. Swift performs orders of magnitude better than it did without optimizations and puts Objective-C to shame with regard to quick sort, heap sort, insertion sort, and selection sort (see &lt;em&gt;Table 3&lt;/em&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We all know that selection sort and insertion sort are not particularly optimal algorithms, and Swift does a good job to emphasize this (when not using &lt;code&gt;-Ofast&lt;/code&gt;, see &lt;em&gt;Table 1&lt;/em&gt; and &lt;em&gt;Table 2&lt;/em&gt;). But why are these two so terrible in Swift? Especially insertion sort — in debug Objective-C is 308.0x faster. I’m still puzzled by this. These two sorting algorithms are not complex, but they stand apart from the other sorts in the following ways: selection sort has nested for-loops and insertion sort has a while-loop nested in a for-loop. Perhaps Swift is having trouble optimizing these? Is this a bug?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My mundane quick sort implementation is faster than the standard library sort for both languages. Typically, these library methods would utilize multiple sorting algorithms that are guided by a set of heuristics that help determine the best algorithm to use based on the dataset. I suspect that we would see the standard library sorts perform best with larger datasets and/or with complex objects.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;According to the benchmarks presented during the keynote (1:45:30), we should (probably?) be seeing different results here. Federighi noted that for complex object sort, Objective-C performed at 2.8x and Swift performed at 3.9x, using Python as the baseline (1.0x). It is not clear at this time how these benchmarks were achieved. What were the build and optimization settings? What is a “complex object”? In any case, surely Swift should be able to sort integers just as well as “complex objects”, right?&lt;/p&gt;

&lt;h3 id=&quot;swift-labs-at-wwdc&quot;&gt;Swift Labs at WWDC&lt;/h3&gt;

&lt;p&gt;The Apple engineers hanging out in the Swift Labs at WWDC were interested in these benchmarks and were somewhat surprised to see them. Unfortunately, the engineers that I spoke with did not have an explanation for why we were seeing these results. We filed Radar #17201160, noting most of the points above.&lt;/p&gt;

&lt;p&gt;Additionally, I asked what the best practices are with regard to using &lt;code&gt;-Ofast&lt;/code&gt;. They recommended the following approach: (1) profile your app to find out where it is slow, (2) extract this slow code into a separate module/framework, (3) very thoroughly test this module, and then (4) compile the module using &lt;code&gt;-Ofast&lt;/code&gt; and link it to your app. Remember, this removes &lt;strong&gt;all&lt;/strong&gt; safety features from Swift.&lt;/p&gt;

&lt;h3 id=&quot;moving-forward&quot;&gt;Moving forward&lt;/h3&gt;

&lt;p&gt;The results above seem to indicate that Apple has not (yet) followed through on their promises of speed and safety — at least in the sense that these features can be mutually inclusive. Again, it is still early. Hopefully these benchmarks will improve as Swift nears a 1.0 release. &lt;strong&gt;I plan on updating this post or writing follow-up posts as Apple releases updates for Swift and Xcode6-beta.&lt;/strong&gt; &lt;span class=&quot;text-danger&quot;&gt;&lt;strong&gt;[Updated 2X]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;As Brent Simmons &lt;a href=&quot;http://inessential.com/2014/02/12/on_replacing_objective-c&quot;&gt;said&lt;/a&gt;, Objective-C used to be considered slow compared to plain C, but it is not slow compared to Java or Python. I am not sure if the reaction to these results should be &lt;em&gt;we have faster hardware, so a slower language is fine&lt;/em&gt;, or &lt;em&gt;nothing will ever be as fast as C&lt;/em&gt;, or somewhere in-between. But after completing these two projects, I do know this: Swift is a pleasure to write and read. Many things came easier and more naturally in Swift, and Playgrounds are pure gold. Swift has a lot of potential. Let’s hope this is the next step that we have all been waiting for, and not another &lt;a href=&quot;http://arstechnica.com/apple/2010/06/copland-2010-revisited/&quot;&gt;Copland&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;futher-reading&quot;&gt;Futher reading&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;em&gt;Official&lt;/em&gt; &lt;a href=&quot;https://developer.apple.com/swift/blog/&quot;&gt;Apple Swift Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.splasmata.com/?p=2798&quot;&gt;&lt;em&gt;Swift?&lt;/em&gt;&lt;/a&gt; from Splasm Software&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.objc.io/issue-7/collections.html&quot;&gt;&lt;em&gt;The Foundation Collection Classes&lt;/em&gt;&lt;/a&gt; by Peter Steinberger, objc.io issue #7&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes text-muted&quot;&gt;
	&lt;ul&gt;
		&lt;li&gt;
			&lt;a href=&quot;#superscript1&quot; id=&quot;note1&quot;&gt;&lt;i class=&quot;fa fa-angle-up&quot;&gt;&lt;/i&gt; [1]&lt;/a&gt; If you turn up the volume and listen closely, you can hear this in the keynote video. It was much louder in person.
		&lt;/li&gt;
		&lt;li&gt;
			&lt;a href=&quot;#superscript2&quot; id=&quot;note2&quot;&gt;&lt;i class=&quot;fa fa-angle-up&quot;&gt;&lt;/i&gt; [2]&lt;/a&gt; If you are thinking, &lt;em&gt;this guy needs a new MacBook&lt;/em&gt; &amp;mdash; you are correct! :)
		&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;
</content>
   </entry>
   
   <entry>
      <title>Built with open-source</title>
      <subtitle>The beginnings of this blog</subtitle>
      <link href="http://localhost:4000/blog/built-with-open-source/" />
      <id>http://localhost:4000/blog/built-with-open-source</id>

      <published>2014-06-09T00:00:00+00:00</published>
      
      <updated>2014-06-09T00:00:00+00:00</updated>
      

      <summary><p>XKCD’s posts on <a href="http://xkcd.com/1205/">saving time</a> and <a href="http://xkcd.com/1319/">automation</a> are precisely how this blog came to be. Until now, I never had the time or motivation to write on a regular basis, though I considered it often. I’ve been developing for iOS for a few years now and I’ve become increasingly involved in the Objective-C open-source community via <a href="https://github.com/jessesquires">GitHub</a> and <a href="http://cocoapods.org">CocoaPods</a>, and was lucky enough to attend (<em>my first!</em>) <a href="https://developer.apple.com/wwdc">WWDC</a> this year on its 25th anniversary. It was an awesome experience. With that said, I can’t think of a better time or better reason to begin writing about my experiences with iOS and Objective-C (and now <a href="https://developer.apple.com/swift/">Swift</a>), as well as my involvement in open-source. I hope to share worthwhile and interesting things here.</p>

</summary>
      <content type="html">&lt;p&gt;XKCD’s posts on &lt;a href=&quot;http://xkcd.com/1205/&quot;&gt;saving time&lt;/a&gt; and &lt;a href=&quot;http://xkcd.com/1319/&quot;&gt;automation&lt;/a&gt; are precisely how this blog came to be. Until now, I never had the time or motivation to write on a regular basis, though I considered it often. I’ve been developing for iOS for a few years now and I’ve become increasingly involved in the Objective-C open-source community via &lt;a href=&quot;https://github.com/jessesquires&quot;&gt;GitHub&lt;/a&gt; and &lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt;, and was lucky enough to attend (&lt;em&gt;my first!&lt;/em&gt;) &lt;a href=&quot;https://developer.apple.com/wwdc&quot;&gt;WWDC&lt;/a&gt; this year on its 25th anniversary. It was an awesome experience. With that said, I can’t think of a better time or better reason to begin writing about my experiences with iOS and Objective-C (and now &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;Swift&lt;/a&gt;), as well as my involvement in open-source. I hope to share worthwhile and interesting things here.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3 id=&quot;this-site&quot;&gt;This site&lt;/h3&gt;

&lt;p&gt;For this site, I did not want a &lt;em&gt;blogspot&lt;/em&gt; or &lt;em&gt;tumblr&lt;/em&gt; or &lt;em&gt;wordpress&lt;/em&gt; site. I wanted to build a site and manage it myself. I wanted control and I wanted it to be made as simple as possible, &lt;a href=&quot;http://en.wikiquote.org/wiki/Albert_Einstein&quot;&gt;but no simpler&lt;/a&gt;. And I wanted it to be open-source.&lt;/p&gt;

&lt;p&gt;This site is lovingly powered by &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;, &lt;a href=&quot;http://getbootstrap.com&quot;&gt;Bootstrap&lt;/a&gt;, and &lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/&quot;&gt;Font Awesome&lt;/a&gt;, and it is generously hosted via &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt; — &lt;em&gt;all of which are built on and influenced by open-source&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;open-source&quot;&gt;Open-source&lt;/h3&gt;

&lt;p&gt;This world would be significantly different without the concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Open_source&quot;&gt;open-source&lt;/a&gt;, which is an idea that has been around for millenia. Though it was not always referred to as “open-source”, the core ideas persist. Only through the processes of sharing, &lt;a href=&quot;http://blogs.sciencemag.org/origins/2009/09/on-the-origin-of-cooperation.html&quot;&gt;collaboration&lt;/a&gt;, and &lt;a href=&quot;http://www.sciencedaily.com/releases/2013/08/130820094643.htm&quot;&gt;reciprocity&lt;/a&gt; did our ancestors establish a stable, thriving society. It is this kind of openness and cooperation that has fostered our thriving community of programmers. Whether or not we can describe it as &lt;a href=&quot;http://heartbleed.com&quot;&gt;&lt;em&gt;stable&lt;/em&gt;&lt;/a&gt;, I’ll leave up to you. Nearly all of the software in-use today was built on, supported by, or influenced by &lt;a href=&quot;http://en.wikipedia.org/wiki/Open-source_software&quot;&gt;&lt;strong&gt;open-source software&lt;/strong&gt;&lt;/a&gt;. It would be naive to think that the different technologies and apps that we take for granted every single day would be here without that help.&lt;/p&gt;

&lt;blockquote&gt;
	&lt;p&gt;If I have seen further it is by standing on the shoulders of giants.&lt;/p&gt;
	&lt;footer&gt;
		&lt;a href=&quot;http://en.wikiquote.org/wiki/Isaac_Newton&quot; target=&quot;_blank&quot;&gt;Isaac Newton&lt;/a&gt;
		(or &lt;a href=&quot;http://en.wikipedia.org/wiki/Bernard_of_Chartres&quot; target=&quot;_blank&quot;&gt;Bernard of Chartres&lt;/a&gt;, if you're hip with French philosophers)
	&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Future posts will focus on iOS, Cocoa, Objective-C, Swift, and open-source.&lt;/strong&gt;&lt;/p&gt;
</content>
   </entry>
   

</feed>
